{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a quantum computing job management dashboard application built with React, Express.js, and TypeScript. The system provides a comprehensive interface for managing quantum computing jobs, monitoring backend systems, and tracking execution analytics. The application simulates IBM Quantum services and provides real-time job tracking, status monitoring, and data visualization capabilities.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **React with TypeScript**: Modern React application using functional components and hooks\n- **Vite**: Build tool and development server for fast development experience\n- **Tailwind CSS + shadcn/ui**: Utility-first CSS framework with pre-built component library\n- **Framer Motion**: Animation library for smooth UI transitions and interactions\n- **React Query**: Server state management and data fetching with automatic caching\n- **React Router**: Client-side routing for navigation between pages\n\n## Backend Architecture\n- **Express.js**: RESTful API server handling quantum job operations\n- **TypeScript**: Full type safety across the entire application stack\n- **Memory Storage**: In-memory data storage with interfaces for future database integration\n- **Simulated IBM Quantum Integration**: Mock service simulating real IBM Quantum API behavior\n- **Real-time Updates**: Automatic job status transitions and live dashboard updates\n\n## Data Storage Solutions\n- **Drizzle ORM**: Database toolkit configured for PostgreSQL with schema definitions\n- **PostgreSQL**: Production database setup (currently using Neon serverless)\n- **In-memory Storage**: Development and demo mode using Map-based storage\n- **Schema Management**: Shared schema definitions between frontend and backend\n\n## Authentication and Authorization\n- **Client-side Authentication**: Simple token-based auth stored in localStorage\n- **Protected Routes**: Route guards preventing unauthorized access to dashboard\n- **Demo Mode**: Accepts any credentials for demonstration purposes\n- **Session Management**: User data persistence across browser sessions\n\n## External Dependencies\n- **IBM Quantum API Integration**: Service layer for connecting to IBM Quantum backends\n- **Neon Database**: Serverless PostgreSQL hosting for production deployments\n- **Recharts**: Data visualization library for analytics charts and graphs\n- **Date-fns**: Date manipulation and formatting utilities\n- **Axios**: HTTP client for external API communications\n\nThe application follows a monorepo structure with shared types and schemas, enabling type-safe communication between frontend and backend. The architecture supports both development simulation and production quantum computing integration.","size_bytes":2779},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // Quantum-themed colors\n        \"quantum-blue\": \"var(--quantum-blue)\",\n        \"quantum-purple\": \"var(--quantum-purple)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        pulse: {\n          \"0%, 100%\": {\n            opacity: \"1\",\n          },\n          \"50%\": {\n            opacity: \"0.5\",\n          },\n        },\n        fadeIn: {\n          \"0%\": { opacity: \"0\" },\n          \"100%\": { opacity: \"1\" },\n        },\n        slideUp: {\n          \"0%\": { \n            transform: \"translateY(10px)\", \n            opacity: \"0\" \n          },\n          \"100%\": { \n            transform: \"translateY(0)\", \n            opacity: \"1\" \n          },\n        },\n        scaleIn: {\n          \"0%\": { \n            transform: \"scale(0.9)\", \n            opacity: \"0\" \n          },\n          \"100%\": { \n            transform: \"scale(1)\", \n            opacity: \"1\" \n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"pulse-slow\": \"pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n        \"fade-in\": \"fadeIn 0.5s ease-in-out\",\n        \"slide-up\": \"slideUp 0.3s ease-out\",\n        \"scale-in\": \"scaleIn 0.2s ease-out\",\n      },\n      backdropBlur: {\n        xs: \"2px\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3860},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    strictPort: true,\n    allowedHosts: true,\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1054},"server/advanced-analytics-service.ts":{"content":"import type { \n  CollaborationMetric, InsertCollaborationMetric,\n  QuantumInsight, InsertQuantumInsight,\n  Workspace, Project, Job, UserProfile, ChallengeParticipant,\n  LiveCollaborationSession, Achievement, UserAchievement\n} from '@shared/schema';\nimport { randomUUID } from 'crypto';\nimport { aiCollaborationService } from './ai-collaboration-service';\n\nexport class AdvancedAnalyticsService {\n  private collaborationMetrics: Map<string, CollaborationMetric> = new Map();\n  private quantumInsights: Map<string, QuantumInsight> = new Map();\n\n  constructor() {\n    // Initialize periodic analytics generation\n    setInterval(() => {\n      this.generatePeriodicInsights();\n    }, 5 * 60 * 1000); // Every 5 minutes\n  }\n\n  // Collaboration Analytics\n  async generateCollaborationMetrics(\n    workspace: Workspace,\n    members: UserProfile[],\n    projects: Project[],\n    sessions: LiveCollaborationSession[]\n  ): Promise<{\n    teamEfficiency: number;\n    communicationScore: number;\n    innovationIndex: number;\n    collaborationTrends: Array<{ metric: string; value: number; trend: 'up' | 'down' | 'stable' }>;\n    individualContributions: Array<{ userId: string; userName: string; score: number; strengths: string[] }>;\n    recommendations: Array<{ type: string; title: string; description: string; priority: 'low' | 'medium' | 'high' }>;\n  }> {\n    \n    // Calculate team efficiency based on project completion rates\n    const completedProjects = projects.filter(p => p.status === 'completed').length;\n    const totalProjects = projects.length;\n    const teamEfficiency = totalProjects > 0 ? (completedProjects / totalProjects) * 100 : 0;\n\n    // Calculate communication score based on session activity\n    const activeSessions = sessions.filter(s => s.status === 'active').length;\n    const totalSessionTime = sessions.reduce((sum, s) => {\n      if (s.endedAt && s.startedAt) {\n        return sum + (s.endedAt.getTime() - s.startedAt.getTime());\n      }\n      return sum;\n    }, 0);\n    const avgSessionDuration = sessions.length > 0 ? totalSessionTime / sessions.length : 0;\n    const communicationScore = Math.min(100, (activeSessions * 20) + (avgSessionDuration / (60 * 60 * 1000)) * 10);\n\n    // Calculate innovation index based on unique approaches and breakthroughs\n    const uniqueBackends = new Set(projects.map(p => p.backend)).size;\n    const complexProjects = projects.filter(p => p.tags?.includes('advanced') || p.tags?.includes('research')).length;\n    const innovationIndex = Math.min(100, (uniqueBackends * 15) + (complexProjects * 20) + (workspace.progress * 0.5));\n\n    // Analyze collaboration trends\n    const collaborationTrends = [\n      {\n        metric: 'Team Efficiency',\n        value: teamEfficiency,\n        trend: teamEfficiency > 70 ? 'up' as const : teamEfficiency > 40 ? 'stable' as const : 'down' as const\n      },\n      {\n        metric: 'Communication Frequency',\n        value: communicationScore,\n        trend: activeSessions > 2 ? 'up' as const : 'stable' as const\n      },\n      {\n        metric: 'Innovation Activity',\n        value: innovationIndex,\n        trend: complexProjects > 1 ? 'up' as const : 'stable' as const\n      }\n    ];\n\n    // Analyze individual contributions\n    const individualContributions = await this.analyzeIndividualContributions(members, projects, sessions);\n\n    // Generate recommendations\n    const recommendations = await this.generateTeamRecommendations(\n      workspace, \n      { teamEfficiency, communicationScore, innovationIndex },\n      individualContributions\n    );\n\n    return {\n      teamEfficiency,\n      communicationScore,\n      innovationIndex,\n      collaborationTrends,\n      individualContributions,\n      recommendations,\n    };\n  }\n\n  private async analyzeIndividualContributions(\n    members: UserProfile[],\n    projects: Project[],\n    sessions: LiveCollaborationSession[]\n  ): Promise<Array<{ userId: string; userName: string; score: number; strengths: string[] }>> {\n    \n    return members.map(member => {\n      let score = 50; // Base score\n      const strengths: string[] = [];\n\n      // Analyze project ownership and collaboration\n      const ownedProjects = projects.filter(p => p.ownerId === member.userId);\n      const collaboratedProjects = projects.filter(p => \n        p.ownerId !== member.userId && \n        // Simplified - would check actual collaboration records\n        Math.random() > 0.5\n      );\n\n      if (ownedProjects.length > 0) {\n        score += ownedProjects.length * 10;\n        strengths.push('Project Leadership');\n      }\n\n      if (collaboratedProjects.length > 0) {\n        score += collaboratedProjects.length * 5;\n        strengths.push('Team Collaboration');\n      }\n\n      // Analyze session participation\n      const hostingSessions = sessions.filter(s => s.hostUserId === member.userId);\n      if (hostingSessions.length > 0) {\n        score += hostingSessions.length * 8;\n        strengths.push('Session Leadership');\n      }\n\n      // Analyze skill contribution based on user profile\n      if (member.skills && member.skills.length > 3) {\n        score += 15;\n        strengths.push('Technical Expertise');\n      }\n\n      if (member.experience === 'advanced' || member.experience === 'expert') {\n        score += 20;\n        strengths.push('Experience & Mentorship');\n      }\n\n      if (member.isMentor) {\n        score += 10;\n        strengths.push('Knowledge Sharing');\n      }\n\n      return {\n        userId: member.userId,\n        userName: member.displayName,\n        score: Math.min(100, score),\n        strengths,\n      };\n    });\n  }\n\n  private async generateTeamRecommendations(\n    workspace: Workspace,\n    metrics: { teamEfficiency: number; communicationScore: number; innovationIndex: number },\n    contributions: Array<{ userId: string; userName: string; score: number; strengths: string[] }>\n  ): Promise<Array<{ type: string; title: string; description: string; priority: 'low' | 'medium' | 'high' }>> {\n    \n    const recommendations = [];\n\n    // Efficiency recommendations\n    if (metrics.teamEfficiency < 50) {\n      recommendations.push({\n        type: 'efficiency',\n        title: 'Improve Project Completion Rate',\n        description: 'Consider breaking down large projects into smaller milestones and implementing daily standup meetings.',\n        priority: 'high' as const,\n      });\n    }\n\n    // Communication recommendations\n    if (metrics.communicationScore < 40) {\n      recommendations.push({\n        type: 'communication',\n        title: 'Enhance Team Communication',\n        description: 'Schedule regular video calls and consider using more collaborative tools for real-time work.',\n        priority: 'medium' as const,\n      });\n    }\n\n    // Innovation recommendations\n    if (metrics.innovationIndex < 30) {\n      recommendations.push({\n        type: 'innovation',\n        title: 'Encourage Innovation',\n        description: 'Explore new quantum algorithms and consider hackathon-style innovation sessions.',\n        priority: 'medium' as const,\n      });\n    }\n\n    // Individual contribution balance\n    const avgContribution = contributions.reduce((sum, c) => sum + c.score, 0) / contributions.length;\n    const lowContributors = contributions.filter(c => c.score < avgContribution * 0.7);\n    \n    if (lowContributors.length > 0) {\n      recommendations.push({\n        type: 'team_balance',\n        title: 'Balance Team Contributions',\n        description: 'Some team members may need additional support or clearer role definitions to maximize their contributions.',\n        priority: 'medium' as const,\n      });\n    }\n\n    // Workspace-specific recommendations based on progress\n    if (workspace.progress < 30) {\n      recommendations.push({\n        type: 'progress',\n        title: 'Accelerate Project Progress',\n        description: 'Current progress is below expected levels. Consider reallocating resources or adjusting project scope.',\n        priority: 'high' as const,\n      });\n    }\n\n    return recommendations;\n  }\n\n  // Quantum Computing Insights\n  async generateQuantumInsights(\n    projects: Project[],\n    jobs: Job[],\n    workspace: Workspace\n  ): Promise<{\n    performanceInsights: Array<{\n      type: 'performance' | 'optimization' | 'error_pattern' | 'breakthrough';\n      title: string;\n      description: string;\n      severity: 'info' | 'warning' | 'critical' | 'breakthrough';\n      data: any;\n    }>;\n    algorithmAnalysis: {\n      mostUsedAlgorithms: Array<{ name: string; usage: number; successRate: number }>;\n      performanceComparisons: Array<{ algorithm: string; avgRuntime: number; fidelity: number }>;\n      optimizationOpportunities: Array<{ area: string; potential: string; effort: 'low' | 'medium' | 'high' }>;\n    };\n    hardwareUtilization: {\n      backendUsage: Array<{ backend: string; jobs: number; efficiency: number }>;\n      resourceOptimization: Array<{ recommendation: string; impact: string }>;\n      costAnalysis: { totalJobs: number; estimatedCost: number; optimizationPotential: number };\n    };\n    collaborationImpact: {\n      teamAlgorithmDevelopment: number;\n      knowledgeSharingIndex: number;\n      crossPollination: Array<{ fromProject: string; toProject: string; insight: string }>;\n    };\n  }> {\n    \n    // Analyze performance patterns\n    const performanceInsights = await this.analyzePerformancePatterns(jobs);\n    \n    // Analyze algorithms\n    const algorithmAnalysis = await this.analyzeAlgorithmUsage(projects, jobs);\n    \n    // Analyze hardware utilization\n    const hardwareUtilization = await this.analyzeHardwareUtilization(jobs);\n    \n    // Analyze collaboration impact on quantum work\n    const collaborationImpact = await this.analyzeCollaborationImpact(projects, jobs);\n\n    return {\n      performanceInsights,\n      algorithmAnalysis,\n      hardwareUtilization,\n      collaborationImpact,\n    };\n  }\n\n  private async analyzePerformancePatterns(jobs: Job[]): Promise<Array<{\n    type: 'performance' | 'optimization' | 'error_pattern' | 'breakthrough';\n    title: string;\n    description: string;\n    severity: 'info' | 'warning' | 'critical' | 'breakthrough';\n    data: any;\n  }>> {\n    const insights = [];\n\n    // Analyze error patterns\n    const failedJobs = jobs.filter(j => j.status === 'failed');\n    const errorPatterns: Record<string, number> = {};\n    \n    failedJobs.forEach(job => {\n      if (job.error) {\n        const errorType = this.categorizeError(job.error);\n        errorPatterns[errorType] = (errorPatterns[errorType] || 0) + 1;\n      }\n    });\n\n    const mostCommonError = Object.entries(errorPatterns)\n      .sort(([,a], [,b]) => b - a)[0];\n\n    if (mostCommonError && mostCommonError[1] > 3) {\n      insights.push({\n        type: 'error_pattern',\n        title: `Recurring ${mostCommonError[0]} Errors`,\n        description: `${mostCommonError[1]} jobs failed due to ${mostCommonError[0]} issues. This pattern suggests a systematic problem.`,\n        severity: 'warning',\n        data: { errorType: mostCommonError[0], count: mostCommonError[1] },\n      });\n    }\n\n    // Analyze performance improvements\n    const completedJobs = jobs.filter(j => j.status === 'done').sort((a, b) => \n      a.submissionTime.getTime() - b.submissionTime.getTime()\n    );\n\n    if (completedJobs.length >= 10) {\n      const recentJobs = completedJobs.slice(-5);\n      const earlierJobs = completedJobs.slice(0, 5);\n      \n      const recentAvgDuration = recentJobs.reduce((sum, j) => sum + (j.duration || 0), 0) / recentJobs.length;\n      const earlierAvgDuration = earlierJobs.reduce((sum, j) => sum + (j.duration || 0), 0) / earlierJobs.length;\n      \n      const improvement = ((earlierAvgDuration - recentAvgDuration) / earlierAvgDuration) * 100;\n      \n      if (improvement > 20) {\n        insights.push({\n          type: 'performance',\n          title: 'Significant Performance Improvement',\n          description: `Job execution time has improved by ${improvement.toFixed(1)}% over recent submissions.`,\n          severity: 'breakthrough',\n          data: { improvement, recentAvgDuration, earlierAvgDuration },\n        });\n      }\n    }\n\n    // Analyze circuit complexity trends\n    const complexityTrend = this.analyzeCircuitComplexity(completedJobs);\n    if (complexityTrend.trend === 'increasing' && complexityTrend.efficiency === 'maintained') {\n      insights.push({\n        type: 'breakthrough',\n        title: 'Advancing Circuit Complexity',\n        description: 'Team is successfully implementing more complex quantum circuits while maintaining efficiency.',\n        severity: 'breakthrough',\n        data: complexityTrend,\n      });\n    }\n\n    return insights;\n  }\n\n  private categorizeError(error: string): string {\n    if (error.toLowerCase().includes('timeout')) return 'Timeout';\n    if (error.toLowerCase().includes('calibration')) return 'Calibration';\n    if (error.toLowerCase().includes('coherence')) return 'Coherence';\n    if (error.toLowerCase().includes('gate')) return 'Gate Error';\n    if (error.toLowerCase().includes('measurement')) return 'Measurement';\n    return 'Other';\n  }\n\n  private analyzeCircuitComplexity(jobs: Job[]): {\n    trend: 'increasing' | 'decreasing' | 'stable';\n    efficiency: 'improving' | 'declining' | 'maintained';\n    avgDepth: number;\n    avgFidelity: number;\n  } {\n    // Simplified analysis - would be more sophisticated in real implementation\n    const avgQubits = jobs.reduce((sum, j) => sum + (j.qubits || 0), 0) / jobs.length;\n    const recentAvgQubits = jobs.slice(-5).reduce((sum, j) => sum + (j.qubits || 0), 0) / 5;\n    \n    return {\n      trend: recentAvgQubits > avgQubits * 1.2 ? 'increasing' : \n             recentAvgQubits < avgQubits * 0.8 ? 'decreasing' : 'stable',\n      efficiency: 'maintained', // Simplified\n      avgDepth: avgQubits * 2, // Simplified estimation\n      avgFidelity: 0.85, // Simplified estimation\n    };\n  }\n\n  private async analyzeAlgorithmUsage(projects: Project[], jobs: Job[]): Promise<{\n    mostUsedAlgorithms: Array<{ name: string; usage: number; successRate: number }>;\n    performanceComparisons: Array<{ algorithm: string; avgRuntime: number; fidelity: number }>;\n    optimizationOpportunities: Array<{ area: string; potential: string; effort: 'low' | 'medium' | 'high' }>;\n  }> {\n    \n    // Extract algorithm types from job names and project descriptions\n    const algorithmUsage: Record<string, { count: number; successful: number; totalRuntime: number }> = {};\n    \n    jobs.forEach(job => {\n      const algorithm = this.extractAlgorithmType(job.name || 'Unknown');\n      if (!algorithmUsage[algorithm]) {\n        algorithmUsage[algorithm] = { count: 0, successful: 0, totalRuntime: 0 };\n      }\n      \n      algorithmUsage[algorithm].count++;\n      if (job.status === 'done') {\n        algorithmUsage[algorithm].successful++;\n      }\n      algorithmUsage[algorithm].totalRuntime += job.duration || 0;\n    });\n\n    const mostUsedAlgorithms = Object.entries(algorithmUsage)\n      .map(([name, data]) => ({\n        name,\n        usage: data.count,\n        successRate: data.count > 0 ? (data.successful / data.count) * 100 : 0,\n      }))\n      .sort((a, b) => b.usage - a.usage)\n      .slice(0, 5);\n\n    const performanceComparisons = Object.entries(algorithmUsage)\n      .map(([algorithm, data]) => ({\n        algorithm,\n        avgRuntime: data.successful > 0 ? data.totalRuntime / data.successful : 0,\n        fidelity: this.estimateFidelity(algorithm), // Simplified estimation\n      }))\n      .filter(comp => comp.avgRuntime > 0)\n      .slice(0, 5);\n\n    const optimizationOpportunities = [\n      {\n        area: 'Circuit Depth Optimization',\n        potential: 'Reduce execution time by 15-30%',\n        effort: 'medium' as const,\n      },\n      {\n        area: 'Hardware-Specific Optimization',\n        potential: 'Improve fidelity by adapting to backend characteristics',\n        effort: 'high' as const,\n      },\n      {\n        area: 'Error Mitigation',\n        potential: 'Increase success rate by 10-20%',\n        effort: 'medium' as const,\n      },\n    ];\n\n    return {\n      mostUsedAlgorithms,\n      performanceComparisons,\n      optimizationOpportunities,\n    };\n  }\n\n  private extractAlgorithmType(jobName: string): string {\n    const name = jobName.toLowerCase();\n    if (name.includes('vqe')) return 'VQE';\n    if (name.includes('qaoa')) return 'QAOA';\n    if (name.includes('grover')) return 'Grover';\n    if (name.includes('shor')) return 'Shor';\n    if (name.includes('qft')) return 'QFT';\n    if (name.includes('teleportation')) return 'Teleportation';\n    if (name.includes('bell')) return 'Bell States';\n    if (name.includes('ml') || name.includes('machine')) return 'Quantum ML';\n    return 'Other';\n  }\n\n  private estimateFidelity(algorithm: string): number {\n    // Simplified fidelity estimation based on algorithm type\n    const fidelityMap: Record<string, number> = {\n      'VQE': 0.88,\n      'QAOA': 0.85,\n      'Grover': 0.90,\n      'Bell States': 0.95,\n      'QFT': 0.82,\n      'Teleportation': 0.87,\n      'Quantum ML': 0.80,\n      'Other': 0.85,\n    };\n    return fidelityMap[algorithm] || 0.85;\n  }\n\n  private async analyzeHardwareUtilization(jobs: Job[]): Promise<{\n    backendUsage: Array<{ backend: string; jobs: number; efficiency: number }>;\n    resourceOptimization: Array<{ recommendation: string; impact: string }>;\n    costAnalysis: { totalJobs: number; estimatedCost: number; optimizationPotential: number };\n  }> {\n    \n    // Analyze backend usage patterns\n    const backendUsage: Record<string, { jobs: number; successfulJobs: number; totalTime: number }> = {};\n    \n    jobs.forEach(job => {\n      if (!backendUsage[job.backend]) {\n        backendUsage[job.backend] = { jobs: 0, successfulJobs: 0, totalTime: 0 };\n      }\n      \n      backendUsage[job.backend].jobs++;\n      if (job.status === 'done') {\n        backendUsage[job.backend].successfulJobs++;\n      }\n      backendUsage[job.backend].totalTime += job.duration || 0;\n    });\n\n    const backendUsageArray = Object.entries(backendUsage)\n      .map(([backend, data]) => ({\n        backend,\n        jobs: data.jobs,\n        efficiency: data.jobs > 0 ? (data.successfulJobs / data.jobs) * 100 : 0,\n      }))\n      .sort((a, b) => b.jobs - a.jobs);\n\n    // Generate optimization recommendations\n    const resourceOptimization = [];\n    \n    const lowEfficiencyBackends = backendUsageArray.filter(b => b.efficiency < 70);\n    if (lowEfficiencyBackends.length > 0) {\n      resourceOptimization.push({\n        recommendation: `Reduce usage of low-efficiency backends: ${lowEfficiencyBackends.map(b => b.backend).join(', ')}`,\n        impact: 'Improve overall success rate by 15-25%',\n      });\n    }\n\n    const underutilizedBackends = backendUsageArray.filter(b => b.jobs < 3);\n    if (underutilizedBackends.length > 0) {\n      resourceOptimization.push({\n        recommendation: `Explore underutilized backends for specific use cases`,\n        impact: 'Reduce queue times and discover optimal hardware matches',\n      });\n    }\n\n    // Cost analysis (simplified)\n    const totalJobs = jobs.length;\n    const estimatedCost = totalJobs * 0.10; // Simplified cost per job\n    const optimizationPotential = lowEfficiencyBackends.length * 15; // Percentage\n\n    return {\n      backendUsage: backendUsageArray,\n      resourceOptimization,\n      costAnalysis: {\n        totalJobs,\n        estimatedCost,\n        optimizationPotential,\n      },\n    };\n  }\n\n  private async analyzeCollaborationImpact(projects: Project[], jobs: Job[]): Promise<{\n    teamAlgorithmDevelopment: number;\n    knowledgeSharingIndex: number;\n    crossPollination: Array<{ fromProject: string; toProject: string; insight: string }>;\n  }> {\n    \n    // Calculate team algorithm development score\n    const collaborativeProjects = projects.filter(p => \n      p.tags?.includes('collaborative') || \n      // Simplified check for multiple contributors\n      Math.random() > 0.6\n    );\n    const teamAlgorithmDevelopment = (collaborativeProjects.length / projects.length) * 100;\n\n    // Calculate knowledge sharing index based on project complexity progression\n    const projectComplexity = projects.map(p => ({\n      id: p.id,\n      complexity: (p.tags?.length || 0) + Math.random() * 10, // Simplified\n      createdAt: p.createdAt,\n    })).sort((a, b) => a.createdAt.getTime() - b.createdAt.getTime());\n\n    const complexityTrend = projectComplexity.length > 1 ? \n      projectComplexity[projectComplexity.length - 1].complexity - projectComplexity[0].complexity : 0;\n    const knowledgeSharingIndex = Math.max(0, Math.min(100, complexityTrend * 10));\n\n    // Identify cross-pollination opportunities\n    const crossPollination = [];\n    for (let i = 0; i < projects.length - 1; i++) {\n      for (let j = i + 1; j < projects.length; j++) {\n        const project1 = projects[i];\n        const project2 = projects[j];\n        \n        // Check for potential knowledge transfer\n        const sharedTags = project1.tags?.filter(tag => project2.tags?.includes(tag)) || [];\n        if (sharedTags.length > 0 && Math.random() > 0.7) {\n          crossPollination.push({\n            fromProject: project1.name,\n            toProject: project2.name,\n            insight: `Optimization techniques from ${sharedTags[0]} could benefit both projects`,\n          });\n        }\n      }\n    }\n\n    return {\n      teamAlgorithmDevelopment,\n      knowledgeSharingIndex,\n      crossPollination: crossPollination.slice(0, 3), // Limit to top 3\n    };\n  }\n\n  // Predictive Analytics\n  async generatePredictiveInsights(\n    workspace: Workspace,\n    historicalData: {\n      projects: Project[];\n      jobs: Job[];\n      collaborationMetrics: CollaborationMetric[];\n    }\n  ): Promise<{\n    projectSuccessPrediction: {\n      probability: number;\n      factors: Array<{ factor: string; impact: 'positive' | 'negative'; weight: number }>;\n      recommendations: string[];\n    };\n    teamPerformanceProjection: {\n      projectedEfficiency: number;\n      timeToCompletion: string;\n      riskFactors: Array<{ risk: string; probability: number; mitigation: string }>;\n    };\n    resourceDemandForecast: {\n      peakUsagePeriods: Array<{ period: string; demandLevel: 'low' | 'medium' | 'high' }>;\n      recommendedReservations: Array<{ backend: string; timeSlot: string; priority: number }>;\n    };\n  }> {\n    \n    const { projects, jobs, collaborationMetrics } = historicalData;\n\n    // Predict project success\n    const completedProjects = projects.filter(p => p.status === 'completed');\n    const failedProjects = projects.filter(p => p.status === 'failed');\n    const successRate = projects.length > 0 ? completedProjects.length / projects.length : 0;\n\n    const projectSuccessPrediction = {\n      probability: Math.min(95, successRate * 100 + workspace.progress * 0.3),\n      factors: [\n        { factor: 'Historical Success Rate', impact: 'positive' as const, weight: successRate },\n        { factor: 'Current Progress', impact: 'positive' as const, weight: workspace.progress / 100 },\n        { factor: 'Team Collaboration', impact: 'positive' as const, weight: 0.8 },\n      ],\n      recommendations: [\n        'Maintain current collaboration patterns',\n        'Consider additional code reviews for complex algorithms',\n        'Schedule regular progress checkpoints',\n      ],\n    };\n\n    // Project team performance\n    const avgProjectDuration = completedProjects.length > 0 ?\n      completedProjects.reduce((sum, p) => {\n        const duration = p.updatedAt.getTime() - p.createdAt.getTime();\n        return sum + duration;\n      }, 0) / completedProjects.length : 0;\n\n    const remainingWork = 100 - workspace.progress;\n    const projectedCompletion = avgProjectDuration * (remainingWork / 100);\n\n    const teamPerformanceProjection = {\n      projectedEfficiency: Math.min(100, (workspace.progress / Math.max(1, avgProjectDuration / (1000 * 60 * 60 * 24))) * 10),\n      timeToCompletion: this.formatDuration(projectedCompletion),\n      riskFactors: [\n        {\n          risk: 'Hardware Availability',\n          probability: 0.3,\n          mitigation: 'Schedule backup hardware reservations',\n        },\n        {\n          risk: 'Algorithm Complexity',\n          probability: 0.2,\n          mitigation: 'Break down complex tasks into smaller milestones',\n        },\n      ],\n    };\n\n    // Resource demand forecast\n    const resourceDemandForecast = {\n      peakUsagePeriods: [\n        { period: 'Weekday Mornings', demandLevel: 'high' as const },\n        { period: 'Weekend Evenings', demandLevel: 'low' as const },\n        { period: 'Weekday Afternoons', demandLevel: 'medium' as const },\n      ],\n      recommendedReservations: [\n        { backend: 'ibm_brisbane', timeSlot: 'Tomorrow 9:00 AM - 11:00 AM', priority: 90 },\n        { backend: 'ibm_cairo', timeSlot: 'Friday 2:00 PM - 4:00 PM', priority: 75 },\n      ],\n    };\n\n    return {\n      projectSuccessPrediction,\n      teamPerformanceProjection,\n      resourceDemandForecast,\n    };\n  }\n\n  private formatDuration(milliseconds: number): string {\n    const days = Math.floor(milliseconds / (1000 * 60 * 60 * 24));\n    const hours = Math.floor((milliseconds % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    \n    if (days > 0) {\n      return `${days} days, ${hours} hours`;\n    } else if (hours > 0) {\n      return `${hours} hours`;\n    } else {\n      return 'Less than 1 hour';\n    }\n  }\n\n  // Automated Insight Generation\n  private async generatePeriodicInsights(): Promise<void> {\n    // This would run periodically to generate new insights\n    // For now, it's a placeholder for the automated system\n    console.log('Generating periodic analytics insights...');\n  }\n\n  // Store insights in the system\n  async storeQuantumInsight(insight: Omit<QuantumInsight, 'id' | 'generatedAt'>): Promise<QuantumInsight> {\n    const quantumInsight: QuantumInsight = {\n      id: randomUUID(),\n      ...insight,\n      generatedAt: new Date(),\n    };\n\n    this.quantumInsights.set(quantumInsight.id, quantumInsight);\n    return quantumInsight;\n  }\n\n  async storeCollaborationMetric(metric: Omit<CollaborationMetric, 'id'>): Promise<CollaborationMetric> {\n    const collaborationMetric: CollaborationMetric = {\n      id: randomUUID(),\n      ...metric,\n    };\n\n    this.collaborationMetrics.set(collaborationMetric.id, collaborationMetric);\n    return collaborationMetric;\n  }\n\n  // Public API\n  getRecentInsights(limit: number = 10): QuantumInsight[] {\n    return Array.from(this.quantumInsights.values())\n      .sort((a, b) => b.generatedAt.getTime() - a.generatedAt.getTime())\n      .slice(0, limit);\n  }\n\n  getCollaborationMetrics(workspaceId: string, period: string = 'weekly'): CollaborationMetric[] {\n    return Array.from(this.collaborationMetrics.values())\n      .filter(metric => metric.workspaceId === workspaceId && metric.period === period)\n      .sort((a, b) => b.date.getTime() - a.date.getTime());\n  }\n}\n\nexport const advancedAnalyticsService = new AdvancedAnalyticsService();","size_bytes":26955},"server/ai-collaboration-service.ts":{"content":"import OpenAI from 'openai';\nimport type { \n  Workspace, Project, WorkspaceMember, ProjectCollaborator, Job, Backend,\n  AiRecommendation, InsertAiRecommendation, UserProfile, Challenge,\n  Experiment, CollaborationMetric, QuantumInsight\n} from '@shared/schema';\nimport { openaiService } from './openai-service';\n\nexport class AICollaborationService {\n  private client: OpenAI | undefined;\n  private isConfigured: boolean = false;\n\n  constructor() {\n    const apiKey = process.env.OPENAI_API_KEY;\n    if (apiKey) {\n      this.client = new OpenAI({ apiKey });\n      this.isConfigured = true;\n    }\n  }\n\n  // AI-Powered Team Matching and Recommendations\n  async generateTeamMatchingRecommendations(\n    user: UserProfile,\n    workspaces: Workspace[],\n    allUsers: UserProfile[]\n  ): Promise<Partial<AiRecommendation>[]> {\n    if (!this.isConfigured || !this.client) {\n      return this.getFallbackTeamRecommendations(user, workspaces);\n    }\n\n    try {\n      const prompt = `As an AI collaboration expert, analyze this user profile and recommend optimal team matches and collaborations:\n\nUser Profile:\n- Name: ${user.displayName}\n- Skills: ${user.skills?.join(', ') || 'No skills listed'}\n- Interests: ${user.interests?.join(', ') || 'No interests listed'}\n- Experience: ${user.experience}\n- Current Points: ${user.totalPoints}\n- Level: ${user.level}\n- Bio: ${user.bio || 'No bio'}\n\nAvailable Workspaces:\n${workspaces.map(w => `- ${w.name}: ${w.description} (Status: ${w.status})`).join('\\n')}\n\nAvailable Users for Collaboration:\n${allUsers.slice(0, 20).map(u => `- ${u.displayName}: Skills: ${u.skills?.join(', ') || 'None'}, Experience: ${u.experience}`).join('\\n')}\n\nGenerate 5 intelligent recommendations for:\n1. Best workspace matches based on skills/interests\n2. Ideal collaborators for quantum projects\n3. Mentorship opportunities (as mentor or mentee)\n4. Skill development suggestions\n5. Team formation for challenging projects\n\nReturn as JSON array with format:\n[{\n  \"type\": \"team_match|project_suggestion|mentorship|skill_development\",\n  \"title\": \"Brief recommendation title\",\n  \"description\": \"Detailed explanation with reasoning\",\n  \"confidence\": 85,\n  \"data\": {\"workspaceId\": \"optional\", \"userIds\": [\"optional\"], \"skills\": [\"optional\"]}\n}]`;\n\n      const response = await this.client!.chat.completions.create({\n        // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n        model: 'gpt-5',\n        messages: [{ role: 'user', content: prompt }],\n        response_format: { type: \"json_object\" },\n      });\n\n      const content = response.choices[0]?.message?.content;\n      if (content) {\n        const recommendations = JSON.parse(content);\n        return recommendations.map((rec: any) => ({\n          userId: user.userId,\n          type: rec.type,\n          title: rec.title,\n          description: rec.description,\n          confidence: rec.confidence,\n          data: rec.data,\n          status: 'pending',\n          expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days\n        }));\n      }\n    } catch (error) {\n      console.error('AI team matching error:', error);\n    }\n\n    return this.getFallbackTeamRecommendations(user, workspaces);\n  }\n\n  // Smart Project Suggestions\n  async generateProjectSuggestions(\n    workspace: Workspace,\n    members: WorkspaceMember[],\n    recentJobs: Job[],\n    availableBackends: Backend[]\n  ): Promise<Partial<AiRecommendation>[]> {\n    if (!this.isConfigured || !this.client) {\n      return this.getFallbackProjectSuggestions();\n    }\n\n    try {\n      const prompt = `As a quantum computing research expert, analyze this workspace and suggest innovative project ideas:\n\nWorkspace: ${workspace.name}\nDescription: ${workspace.description}\nProgress: ${workspace.progress}%\nStatus: ${workspace.status}\n\nTeam Members: ${members.length} total\nMember Roles: ${members.map(m => `${m.userName} (${m.role})`).join(', ')}\n\nRecent Jobs Analysis:\n${recentJobs.slice(0, 10).map(j => `- ${j.name}: ${j.backend}, ${j.qubits} qubits, Status: ${j.status}`).join('\\n')}\n\nAvailable Quantum Backends:\n${availableBackends.map(b => `- ${b.name}: ${b.qubits} qubits, Status: ${b.status}, Queue: ${b.queueLength}`).join('\\n')}\n\nGenerate 4 innovative project suggestions that:\n1. Build on current progress and team expertise\n2. Utilize available quantum hardware effectively\n3. Advance quantum computing research\n4. Create learning opportunities for team members\n\nReturn as JSON array with format:\n[{\n  \"type\": \"project_suggestion\",\n  \"title\": \"Project name\",\n  \"description\": \"Detailed project description, objectives, and expected outcomes\",\n  \"confidence\": 90,\n  \"data\": {\n    \"difficulty\": \"beginner|intermediate|advanced\",\n    \"estimatedDuration\": \"weeks\",\n    \"requiredSkills\": [\"skill1\", \"skill2\"],\n    \"recommendedBackend\": \"backend_name\",\n    \"expectedOutcomes\": [\"outcome1\", \"outcome2\"]\n  }\n}]`;\n\n      const response = await this.client!.chat.completions.create({\n        // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n        model: 'gpt-5',\n        messages: [{ role: 'user', content: prompt }],\n        response_format: { type: \"json_object\" },\n      });\n\n      const content = response.choices[0]?.message?.content;\n      if (content) {\n        const suggestions = JSON.parse(content);\n        return suggestions.map((sug: any) => ({\n          workspaceId: workspace.id,\n          type: sug.type,\n          title: sug.title,\n          description: sug.description,\n          confidence: sug.confidence,\n          data: sug.data,\n          status: 'pending',\n          expiresAt: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000), // 14 days\n        }));\n      }\n    } catch (error) {\n      console.error('AI project suggestions error:', error);\n    }\n\n    return this.getFallbackProjectSuggestions();\n  }\n\n  // Intelligent Resource Allocation\n  async generateResourceOptimizations(\n    workspaces: Workspace[],\n    jobs: Job[],\n    backends: Backend[]\n  ): Promise<Partial<AiRecommendation>[]> {\n    if (!this.isConfigured || !this.client) {\n      return this.getFallbackResourceOptimizations();\n    }\n\n    try {\n      const prompt = `As a quantum resource optimization expert, analyze current usage patterns and recommend improvements:\n\nActive Workspaces:\n${workspaces.filter(w => w.status === 'active').map(w => `- ${w.name}: ${w.progress}% complete`).join('\\n')}\n\nRecent Job Patterns:\n${jobs.slice(0, 20).map(j => `- ${j.backend}: ${j.qubits}q, ${j.shots} shots, ${j.status}, ${j.duration || 0}s`).join('\\n')}\n\nBackend Status:\n${backends.map(b => `- ${b.name}: ${b.qubits}q, ${b.queueLength} queued, ${b.averageWaitTime}s avg wait, ${b.uptime} uptime`).join('\\n')}\n\nAnalyze patterns and generate 3 optimization recommendations for:\n1. Hardware utilization efficiency\n2. Cost reduction strategies  \n3. Performance improvements\n\nReturn as JSON array with format:\n[{\n  \"type\": \"resource_optimization\",\n  \"title\": \"Optimization recommendation\",\n  \"description\": \"Detailed explanation and implementation steps\",\n  \"confidence\": 85,\n  \"data\": {\n    \"category\": \"cost|performance|efficiency\",\n    \"expectedSavings\": \"percentage or time\",\n    \"affectedWorkspaces\": [\"workspace_id\"],\n    \"implementation\": \"step by step guide\"\n  }\n}]`;\n\n      const response = await this.client!.chat.completions.create({\n        // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n        model: 'gpt-5',\n        messages: [{ role: 'user', content: prompt }],\n        response_format: { type: \"json_object\" },\n      });\n\n      const content = response.choices[0]?.message?.content;\n      if (content) {\n        const optimizations = JSON.parse(content);\n        return optimizations.map((opt: any) => ({\n          type: opt.type,\n          title: opt.title,\n          description: opt.description,\n          confidence: opt.confidence,\n          data: opt.data,\n          status: 'pending',\n          expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days\n        }));\n      }\n    } catch (error) {\n      console.error('AI resource optimization error:', error);\n    }\n\n    return this.getFallbackResourceOptimizations();\n  }\n\n  // Advanced Code Review and Optimization\n  async generateQuantumCodeReview(\n    code: string,\n    context: {\n      projectName: string;\n      backend: string;\n      qubits: number;\n      collaborators: string[];\n    }\n  ): Promise<{\n    overallScore: number;\n    suggestions: Array<{\n      type: 'optimization' | 'error' | 'best_practice' | 'collaboration';\n      severity: 'info' | 'warning' | 'critical';\n      line?: number;\n      title: string;\n      description: string;\n      suggestion: string;\n    }>;\n    collaborationInsights: Array<{\n      aspect: string;\n      insight: string;\n      recommendation: string;\n    }>;\n  }> {\n    if (!this.isConfigured || !this.client) {\n      return this.getFallbackCodeReview();\n    }\n\n    try {\n      const prompt = `As a senior quantum computing code reviewer with collaboration expertise, analyze this quantum code:\n\nProject: ${context.projectName}\nTarget Backend: ${context.backend}\nQubits: ${context.qubits}\nCollaborators: ${context.collaborators.join(', ')}\n\nCode:\n\\`\\`\\`\n${code}\n\\`\\`\\`\n\nProvide comprehensive analysis including:\n1. Overall code quality score (0-100)\n2. Specific improvement suggestions\n3. Collaboration insights for team development\n\nReturn as JSON with format:\n{\n  \"overallScore\": 85,\n  \"suggestions\": [\n    {\n      \"type\": \"optimization|error|best_practice|collaboration\",\n      \"severity\": \"info|warning|critical\",\n      \"line\": 10,\n      \"title\": \"Brief issue title\",\n      \"description\": \"What the issue is\",\n      \"suggestion\": \"How to fix or improve it\"\n    }\n  ],\n  \"collaborationInsights\": [\n    {\n      \"aspect\": \"Code Style|Documentation|Complexity\",\n      \"insight\": \"What this reveals about team collaboration\",\n      \"recommendation\": \"How to improve team collaboration\"\n    }\n  ]\n}`;\n\n      const response = await this.client!.chat.completions.create({\n        // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n        model: 'gpt-5',\n        messages: [{ role: 'user', content: prompt }],\n        response_format: { type: \"json_object\" },\n      });\n\n      const content = response.choices[0]?.message?.content;\n      if (content) {\n        return JSON.parse(content);\n      }\n    } catch (error) {\n      console.error('AI code review error:', error);\n    }\n\n    return this.getFallbackCodeReview();\n  }\n\n  // Experiment Design Assistant\n  async generateExperimentDesign(\n    hypothesis: string,\n    workspace: Workspace,\n    availableResources: {\n      backends: Backend[];\n      teamSkills: string[];\n      timeframe: string;\n    }\n  ): Promise<{\n    methodology: string;\n    experimentPlan: Array<{\n      phase: string;\n      duration: string;\n      tasks: string[];\n      resources: string[];\n    }>;\n    expectedOutcomes: string[];\n    riskAssessment: Array<{\n      risk: string;\n      probability: 'low' | 'medium' | 'high';\n      mitigation: string;\n    }>;\n    collaborationStrategy: {\n      roleAssignments: Array<{ role: string; skills: string[]; responsibilities: string[] }>;\n      communicationPlan: string;\n      milestones: Array<{ milestone: string; timeline: string; deliverables: string[] }>;\n    };\n  }> {\n    if (!this.isConfigured || !this.client) {\n      return this.getFallbackExperimentDesign();\n    }\n\n    try {\n      const prompt = `As a quantum research methodology expert, design a comprehensive experiment:\n\nHypothesis: ${hypothesis}\n\nWorkspace Context:\n- Name: ${workspace.name}\n- Description: ${workspace.description}\n- Current Progress: ${workspace.progress}%\n\nAvailable Resources:\n- Backends: ${availableResources.backends.map(b => `${b.name} (${b.qubits}q)`).join(', ')}\n- Team Skills: ${availableResources.teamSkills.join(', ')}\n- Timeframe: ${availableResources.timeframe}\n\nDesign a complete experiment including methodology, collaboration strategy, and risk management.\n\nReturn as JSON with the specified format.`;\n\n      const response = await this.client!.chat.completions.create({\n        // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n        model: 'gpt-5',\n        messages: [{ role: 'user', content: prompt }],\n        response_format: { type: \"json_object\" },\n      });\n\n      const content = response.choices[0]?.message?.content;\n      if (content) {\n        return JSON.parse(content);\n      }\n    } catch (error) {\n      console.error('AI experiment design error:', error);\n    }\n\n    return this.getFallbackExperimentDesign();\n  }\n\n  // Dynamic Learning Path Generation\n  async generateLearningPath(\n    user: UserProfile,\n    targetSkills: string[],\n    availableChallenges: Challenge[],\n    completedAchievements: string[]\n  ): Promise<{\n    path: Array<{\n      step: number;\n      title: string;\n      description: string;\n      type: 'challenge' | 'project' | 'collaboration' | 'mentorship';\n      difficulty: 'beginner' | 'intermediate' | 'advanced';\n      estimatedTime: string;\n      prerequisites: string[];\n      resources: string[];\n    }>;\n    estimatedDuration: string;\n    skillProgression: Array<{\n      skill: string;\n      currentLevel: 'novice' | 'beginner' | 'intermediate' | 'advanced' | 'expert';\n      targetLevel: 'novice' | 'beginner' | 'intermediate' | 'advanced' | 'expert';\n      milestones: string[];\n    }>;\n  }> {\n    if (!this.isConfigured || !this.client) {\n      return this.getFallbackLearningPath(targetSkills);\n    }\n\n    try {\n      const prompt = `As a quantum education expert, create a personalized learning path:\n\nUser Profile:\n- Current Skills: ${user.skills?.join(', ') || 'None'}\n- Experience Level: ${user.experience}\n- Completed Achievements: ${completedAchievements.length} total\n\nTarget Skills: ${targetSkills.join(', ')}\n\nAvailable Challenges:\n${availableChallenges.map(c => `- ${c.name}: ${c.difficulty} (${c.category})`).join('\\n')}\n\nCreate a structured learning path that progressively builds skills through practical challenges and collaborative projects.\n\nReturn as JSON with the specified format.`;\n\n      const response = await this.client!.chat.completions.create({\n        // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n        model: 'gpt-5',\n        messages: [{ role: 'user', content: prompt }],\n        response_format: { type: \"json_object\" },\n      });\n\n      const content = response.choices[0]?.message?.content;\n      if (content) {\n        return JSON.parse(content);\n      }\n    } catch (error) {\n      console.error('AI learning path error:', error);\n    }\n\n    return this.getFallbackLearningPath(targetSkills);\n  }\n\n  // Fallback methods for when AI is not available\n  private getFallbackTeamRecommendations(user: UserProfile, workspaces: Workspace[]): Partial<AiRecommendation>[] {\n    return [\n      {\n        userId: user.userId,\n        workspaceId: workspaces[0]?.id || null,\n        type: 'team_match',\n        title: 'Join Active Quantum ML Research',\n        description: 'Based on your profile, you would be a great fit for collaborative quantum machine learning projects.',\n        confidence: 80,\n        data: { workspaceId: workspaces[0]?.id },\n        status: 'pending',\n        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n      },\n      {\n        userId: user.userId,\n        workspaceId: null,\n        type: 'skill_development',\n        title: 'Enhance Quantum Algorithm Design',\n        description: 'Focus on QAOA and VQE implementations to strengthen your quantum optimization skills.',\n        confidence: 75,\n        data: { skills: ['QAOA', 'VQE', 'Quantum Optimization'] },\n        status: 'pending',\n        expiresAt: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000),\n      },\n    ];\n  }\n\n  private getFallbackProjectSuggestions(): Partial<AiRecommendation>[] {\n    return [\n      {\n        userId: 'system',\n        workspaceId: null,\n        type: 'project_suggestion',\n        title: 'Hybrid VQE-QAOA Implementation',\n        description: 'Combine Variational Quantum Eigensolver with Quantum Approximate Optimization Algorithm for enhanced performance on optimization problems.',\n        confidence: 85,\n        data: {\n          difficulty: 'intermediate',\n          estimatedDuration: '6-8 weeks',\n          requiredSkills: ['VQE', 'QAOA', 'Python', 'Qiskit'],\n          recommendedBackend: 'ibm_brisbane',\n          expectedOutcomes: ['Performance comparison study', 'Algorithm optimization', 'Research publication']\n        },\n        status: 'pending',\n        expiresAt: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000),\n      },\n    ];\n  }\n\n  private getFallbackResourceOptimizations(): Partial<AiRecommendation>[] {\n    return [\n      {\n        userId: 'system',\n        workspaceId: null,\n        type: 'resource_optimization',\n        title: 'Optimize Hardware Scheduling',\n        description: 'Implement intelligent job scheduling to reduce average wait times by 30% and improve resource utilization.',\n        confidence: 80,\n        data: {\n          category: 'efficiency',\n          expectedSavings: '30% time reduction',\n          implementation: 'Prioritize shorter jobs during peak hours, batch similar experiments'\n        },\n        status: 'pending',\n        expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n      },\n    ];\n  }\n\n  private getFallbackCodeReview() {\n    return {\n      overallScore: 75,\n      suggestions: [\n        {\n          type: 'optimization' as const,\n          severity: 'warning' as const,\n          title: 'Circuit Depth Optimization',\n          description: 'Circuit depth could be reduced for better fidelity on NISQ devices',\n          suggestion: 'Consider using native gate decomposition and circuit optimization techniques'\n        },\n        {\n          type: 'collaboration' as const,\n          severity: 'info' as const,\n          title: 'Add Documentation',\n          description: 'Code would benefit from more detailed comments for team collaboration',\n          suggestion: 'Add docstrings explaining quantum algorithm parameters and expected outcomes'\n        }\n      ],\n      collaborationInsights: [\n        {\n          aspect: 'Code Style',\n          insight: 'Code follows good practices but could use more team-oriented documentation',\n          recommendation: 'Establish team coding standards and documentation guidelines'\n        }\n      ]\n    };\n  }\n\n  private getFallbackExperimentDesign() {\n    return {\n      methodology: 'Standard quantum algorithm benchmarking with statistical analysis',\n      experimentPlan: [\n        {\n          phase: 'Preparation',\n          duration: '1 week',\n          tasks: ['Setup environment', 'Prepare test cases', 'Define metrics'],\n          resources: ['Development environment', 'Test data', 'Documentation']\n        },\n        {\n          phase: 'Execution',\n          duration: '2 weeks',\n          tasks: ['Run experiments', 'Collect data', 'Monitor progress'],\n          resources: ['Quantum hardware', 'Data storage', 'Monitoring tools']\n        }\n      ],\n      expectedOutcomes: ['Performance metrics', 'Comparative analysis', 'Optimization insights'],\n      riskAssessment: [\n        {\n          risk: 'Hardware availability',\n          probability: 'medium' as const,\n          mitigation: 'Schedule backup time slots and alternative backends'\n        }\n      ],\n      collaborationStrategy: {\n        roleAssignments: [\n          {\n            role: 'Lead Researcher',\n            skills: ['Quantum Algorithms', 'Data Analysis'],\n            responsibilities: ['Experiment design', 'Results analysis', 'Team coordination']\n          }\n        ],\n        communicationPlan: 'Daily standup meetings and weekly progress reviews',\n        milestones: [\n          {\n            milestone: 'Setup Complete',\n            timeline: '1 week',\n            deliverables: ['Environment ready', 'Test cases defined']\n          }\n        ]\n      }\n    };\n  }\n\n  private getFallbackLearningPath(targetSkills: string[]) {\n    return {\n      path: [\n        {\n          step: 1,\n          title: 'Quantum Fundamentals',\n          description: 'Master basic quantum mechanics and quantum computing principles',\n          type: 'challenge' as const,\n          difficulty: 'beginner' as const,\n          estimatedTime: '2 weeks',\n          prerequisites: [],\n          resources: ['Quantum Computing Textbook', 'Online Tutorials', 'Practice Problems']\n        },\n        {\n          step: 2,\n          title: 'First Quantum Algorithm',\n          description: 'Implement and understand your first quantum algorithm',\n          type: 'project' as const,\n          difficulty: 'intermediate' as const,\n          estimatedTime: '1 week',\n          prerequisites: ['Quantum Fundamentals'],\n          resources: ['Qiskit Documentation', 'Code Examples', 'Mentor Support']\n        }\n      ],\n      estimatedDuration: '3-4 weeks',\n      skillProgression: targetSkills.map(skill => ({\n        skill,\n        currentLevel: 'novice' as const,\n        targetLevel: 'intermediate' as const,\n        milestones: [`Basic ${skill} understanding`, `${skill} implementation`, `${skill} optimization`]\n      }))\n    };\n  }\n\n  isServiceConfigured(): boolean {\n    return this.isConfigured;\n  }\n}\n\nexport const aiCollaborationService = new AICollaborationService();","size_bytes":21681},"server/gamification-service.ts":{"content":"import type { \n  Achievement, InsertAchievement, UserAchievement, InsertUserAchievement,\n  Challenge, InsertChallenge, ChallengeParticipant, InsertChallengeParticipant,\n  UserProfile, Project, Job, Workspace, CollaborationMetric\n} from '@shared/schema';\nimport { randomUUID } from 'crypto';\nimport { aiCollaborationService } from './ai-collaboration-service';\n\nexport class GamificationService {\n  private achievements: Map<string, Achievement> = new Map();\n  private userAchievements: Map<string, UserAchievement> = new Map();\n  private challenges: Map<string, Challenge> = new Map();\n  private challengeParticipants: Map<string, ChallengeParticipant> = new Map();\n\n  constructor() {\n    this.initializeAchievements();\n    this.initializeChallenges();\n  }\n\n  private initializeAchievements() {\n    const achievements: Achievement[] = [\n      // Collaboration Achievements\n      {\n        id: 'first_collaboration',\n        name: 'First Steps Together',\n        description: 'Join your first collaborative workspace',\n        icon: '🤝',\n        category: 'collaboration',\n        points: 50,\n        rarity: 'common',\n        requirements: { action: 'join_workspace', count: 1 },\n      },\n      {\n        id: 'team_player',\n        name: 'Team Player',\n        description: 'Successfully collaborate on 5 projects',\n        icon: '👥',\n        category: 'collaboration',\n        points: 200,\n        rarity: 'uncommon',\n        requirements: { action: 'complete_collaborative_project', count: 5 },\n      },\n      {\n        id: 'mentor_master',\n        name: 'Mentor Master',\n        description: 'Help 10 team members solve quantum problems',\n        icon: '🎓',\n        category: 'mentoring',\n        points: 500,\n        rarity: 'rare',\n        requirements: { action: 'mentor_help', count: 10 },\n      },\n      {\n        id: 'quantum_einstein',\n        name: 'Quantum Einstein',\n        description: 'Lead a breakthrough discovery in quantum computing',\n        icon: '🧠',\n        category: 'innovation',\n        points: 1000,\n        rarity: 'legendary',\n        requirements: { action: 'breakthrough_discovery', count: 1 },\n      },\n\n      // Optimization Achievements\n      {\n        id: 'optimizer',\n        name: 'Circuit Optimizer',\n        description: 'Optimize quantum circuits to reduce depth by 50%',\n        icon: '⚡',\n        category: 'optimization',\n        points: 150,\n        rarity: 'uncommon',\n        requirements: { action: 'optimize_circuit', improvement: 50 },\n      },\n      {\n        id: 'efficiency_expert',\n        name: 'Efficiency Expert',\n        description: 'Improve team productivity by 30% through optimizations',\n        icon: '🚀',\n        category: 'optimization',\n        points: 300,\n        rarity: 'rare',\n        requirements: { action: 'productivity_improvement', percentage: 30 },\n      },\n\n      // Innovation Achievements\n      {\n        id: 'algorithm_creator',\n        name: 'Algorithm Creator',\n        description: 'Develop a novel quantum algorithm',\n        icon: '🔬',\n        category: 'innovation',\n        points: 750,\n        rarity: 'epic',\n        requirements: { action: 'create_algorithm', verified: true },\n      },\n      {\n        id: 'paper_publisher',\n        name: 'Research Pioneer',\n        description: 'Publish a research paper with your team',\n        icon: '📄',\n        category: 'innovation',\n        points: 600,\n        rarity: 'epic',\n        requirements: { action: 'publish_paper', status: 'accepted' },\n      },\n\n      // Learning Achievements\n      {\n        id: 'quick_learner',\n        name: 'Quick Learner',\n        description: 'Complete 3 challenges in one week',\n        icon: '🏃',\n        category: 'collaboration',\n        points: 100,\n        rarity: 'common',\n        requirements: { action: 'complete_challenges', count: 3, timeframe: '1_week' },\n      },\n      {\n        id: 'knowledge_sharer',\n        name: 'Knowledge Sharer',\n        description: 'Write 5 helpful knowledge base articles',\n        icon: '📚',\n        category: 'collaboration',\n        points: 250,\n        rarity: 'uncommon',\n        requirements: { action: 'write_articles', count: 5, min_likes: 10 },\n      },\n    ];\n\n    achievements.forEach(achievement => {\n      this.achievements.set(achievement.id, achievement);\n    });\n  }\n\n  private initializeChallenges() {\n    const challenges: Challenge[] = [\n      // Team Challenges\n      {\n        id: 'quantum_hackathon_2025',\n        name: 'Quantum Hackathon 2025',\n        description: 'Build innovative quantum applications in teams of 3-5 people',\n        type: 'team',\n        category: 'collaboration',\n        difficulty: 'intermediate',\n        requirements: {\n          team_size: [3, 5],\n          duration: '48_hours',\n          skills: ['Qiskit', 'Python', 'Quantum Algorithms'],\n        },\n        rewards: {\n          points: [1000, 750, 500], // 1st, 2nd, 3rd place\n          achievements: ['hackathon_winner', 'team_collaborator'],\n          prizes: ['Quantum Computing Certification', 'Conference Tickets'],\n        },\n        startDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 1 week from now\n        endDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000), // 2 weeks from now\n        status: 'active',\n        maxParticipants: 50,\n        currentParticipants: 0,\n      },\n\n      // Individual Challenges\n      {\n        id: 'vqe_mastery',\n        name: 'VQE Mastery Challenge',\n        description: 'Implement and optimize a Variational Quantum Eigensolver',\n        type: 'individual',\n        category: 'algorithm',\n        difficulty: 'advanced',\n        requirements: {\n          tasks: [\n            'Implement VQE algorithm',\n            'Optimize for hydrogen molecule',\n            'Achieve 99% accuracy',\n            'Document methodology',\n          ],\n          time_limit: '2_weeks',\n        },\n        rewards: {\n          points: 500,\n          achievements: ['vqe_expert'],\n          badges: ['Algorithm Specialist'],\n        },\n        startDate: new Date(),\n        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n        status: 'active',\n        maxParticipants: 100,\n        currentParticipants: 23,\n      },\n\n      // Global Challenges\n      {\n        id: 'quantum_optimization_global',\n        name: 'Global Quantum Optimization Challenge',\n        description: 'Collaborate worldwide to solve complex optimization problems',\n        type: 'global',\n        category: 'optimization',\n        difficulty: 'expert',\n        requirements: {\n          global_collaboration: true,\n          min_countries: 5,\n          problem_types: ['TSP', 'Portfolio Optimization', 'Logistics'],\n        },\n        rewards: {\n          points: 2000,\n          achievements: ['global_collaborator', 'optimization_master'],\n          recognition: 'Featured on Quantum Research Portal',\n        },\n        startDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000),\n        endDate: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000),\n        status: 'active',\n        maxParticipants: 1000,\n        currentParticipants: 156,\n      },\n    ];\n\n    challenges.forEach(challenge => {\n      this.challenges.set(challenge.id, challenge);\n    });\n  }\n\n  // Achievement System\n  async checkAndAwardAchievements(userId: string, action: string, context: any): Promise<UserAchievement[]> {\n    const awarded: UserAchievement[] = [];\n    const userAchievements = this.getUserAchievements(userId);\n    const earnedAchievementIds = new Set(userAchievements.map(ua => ua.achievementId));\n\n    for (const achievement of this.achievements.values()) {\n      if (earnedAchievementIds.has(achievement.id)) {\n        continue; // Already earned\n      }\n\n      if (await this.meetsRequirements(userId, achievement, action, context)) {\n        const userAchievement = await this.awardAchievement(userId, achievement.id, context);\n        awarded.push(userAchievement);\n      }\n    }\n\n    return awarded;\n  }\n\n  private async meetsRequirements(\n    userId: string,\n    achievement: Achievement,\n    action: string,\n    context: any\n  ): Promise<boolean> {\n    const requirements = achievement.requirements as any;\n\n    // Check if action matches\n    if (requirements.action && requirements.action !== action) {\n      return false;\n    }\n\n    // Check count requirements\n    if (requirements.count) {\n      const userCount = await this.getUserActionCount(userId, action);\n      if (userCount < requirements.count) {\n        return false;\n      }\n    }\n\n    // Check percentage/improvement requirements\n    if (requirements.improvement && context.improvement < requirements.improvement) {\n      return false;\n    }\n\n    if (requirements.percentage && context.percentage < requirements.percentage) {\n      return false;\n    }\n\n    // Check timeframe requirements\n    if (requirements.timeframe) {\n      const timeframeStart = this.getTimeframeStart(requirements.timeframe);\n      const recentActions = await this.getUserActionsInTimeframe(userId, action, timeframeStart);\n      if (recentActions < requirements.count) {\n        return false;\n      }\n    }\n\n    // Check verification requirements\n    if (requirements.verified && !context.verified) {\n      return false;\n    }\n\n    return true;\n  }\n\n  private async awardAchievement(userId: string, achievementId: string, context: any): Promise<UserAchievement> {\n    const userAchievement: UserAchievement = {\n      id: randomUUID(),\n      userId,\n      achievementId,\n      unlockedAt: new Date(),\n      data: context,\n    };\n\n    this.userAchievements.set(userAchievement.id, userAchievement);\n\n    // Award points to user\n    const achievement = this.achievements.get(achievementId);\n    if (achievement) {\n      await this.addPointsToUser(userId, achievement.points);\n    }\n\n    return userAchievement;\n  }\n\n  // Challenge System\n  async joinChallenge(userId: string, challengeId: string, workspaceId?: string): Promise<ChallengeParticipant> {\n    const challenge = this.challenges.get(challengeId);\n    if (!challenge) {\n      throw new Error('Challenge not found');\n    }\n\n    if (challenge.currentParticipants >= challenge.maxParticipants) {\n      throw new Error('Challenge is full');\n    }\n\n    const participant: ChallengeParticipant = {\n      id: randomUUID(),\n      challengeId,\n      userId,\n      workspaceId: workspaceId || null,\n      progress: 0,\n      score: 0,\n      status: 'in_progress',\n      joinedAt: new Date(),\n      completedAt: null,\n      data: {},\n    };\n\n    this.challengeParticipants.set(participant.id, participant);\n    challenge.currentParticipants++;\n\n    return participant;\n  }\n\n  async updateChallengeProgress(\n    participantId: string,\n    progress: number,\n    score?: number,\n    data?: any\n  ): Promise<ChallengeParticipant> {\n    const participant = this.challengeParticipants.get(participantId);\n    if (!participant) {\n      throw new Error('Participant not found');\n    }\n\n    participant.progress = Math.min(100, Math.max(0, progress));\n    if (score !== undefined) {\n      participant.score = score;\n    }\n    if (data) {\n      participant.data = { ...participant.data, ...data };\n    }\n\n    if (participant.progress >= 100 && participant.status === 'in_progress') {\n      participant.status = 'completed';\n      participant.completedAt = new Date();\n\n      // Award challenge completion achievements\n      await this.checkAndAwardAchievements(participant.userId!, 'complete_challenge', {\n        challengeId: participant.challengeId,\n        score: participant.score,\n        duration: participant.completedAt.getTime() - participant.joinedAt.getTime(),\n      });\n    }\n\n    return participant;\n  }\n\n  // Smart Challenge Recommendations\n  async generateChallengeRecommendations(user: UserProfile): Promise<Array<{\n    challenge: Challenge;\n    reason: string;\n    confidence: number;\n    estimatedDifficulty: 'perfect' | 'challenging' | 'stretch';\n  }>> {\n    const recommendations = [];\n    const userLevel = user.level || 1;\n    const userSkills = user.skills || [];\n    const userExperience = user.experience || 'beginner';\n\n    for (const challenge of this.challenges.values()) {\n      if (challenge.status !== 'active') continue;\n\n      let confidence = 50;\n      let reason = '';\n      let estimatedDifficulty: 'perfect' | 'challenging' | 'stretch' = 'perfect';\n\n      // Analyze skill match\n      const challengeSkills = (challenge.requirements as any).skills || [];\n      const skillMatch = challengeSkills.filter((skill: string) => \n        userSkills.some(userSkill => userSkill.toLowerCase().includes(skill.toLowerCase()))\n      ).length;\n\n      if (skillMatch > 0) {\n        confidence += skillMatch * 15;\n        reason += `Matches ${skillMatch} of your skills. `;\n      }\n\n      // Analyze difficulty vs experience\n      const difficultyMap = { beginner: 1, intermediate: 2, advanced: 3, expert: 4 };\n      const experienceMap = { beginner: 1, intermediate: 2, advanced: 3, expert: 4 };\n      \n      const challengeDifficulty = difficultyMap[challenge.difficulty as keyof typeof difficultyMap] || 2;\n      const userExperienceLevel = experienceMap[userExperience as keyof typeof experienceMap] || 1;\n\n      if (challengeDifficulty === userExperienceLevel) {\n        confidence += 20;\n        reason += 'Perfect difficulty match. ';\n        estimatedDifficulty = 'perfect';\n      } else if (challengeDifficulty === userExperienceLevel + 1) {\n        confidence += 10;\n        reason += 'Good challenge level. ';\n        estimatedDifficulty = 'challenging';\n      } else if (challengeDifficulty === userExperienceLevel + 2) {\n        confidence -= 10;\n        reason += 'Ambitious stretch goal. ';\n        estimatedDifficulty = 'stretch';\n      } else if (challengeDifficulty < userExperienceLevel) {\n        confidence -= 15;\n        reason += 'May be too easy. ';\n      }\n\n      // Consider challenge type preference\n      if (challenge.type === 'team' && userLevel > 5) {\n        confidence += 10;\n        reason += 'Great for collaboration. ';\n      }\n\n      // Only recommend if confidence is reasonable\n      if (confidence >= 40) {\n        recommendations.push({\n          challenge,\n          reason: reason.trim(),\n          confidence,\n          estimatedDifficulty,\n        });\n      }\n    }\n\n    return recommendations.sort((a, b) => b.confidence - a.confidence).slice(0, 5);\n  }\n\n  // Dynamic Team Formation for Challenges\n  async suggestTeamFormation(challengeId: string, availableUsers: UserProfile[]): Promise<Array<{\n    team: UserProfile[];\n    synergy: number;\n    strengths: string[];\n    recommendations: string[];\n  }>> {\n    const challenge = this.challenges.get(challengeId);\n    if (!challenge || challenge.type !== 'team') {\n      return [];\n    }\n\n    const requirements = challenge.requirements as any;\n    const teamSize = requirements.team_size || [3, 5];\n    const requiredSkills = requirements.skills || [];\n\n    const teamSuggestions = [];\n\n    // Generate multiple team combinations\n    for (let size = teamSize[0]; size <= teamSize[1]; size++) {\n      const combinations = this.generateTeamCombinations(availableUsers, size);\n      \n      for (const team of combinations.slice(0, 10)) { // Limit to prevent performance issues\n        const analysis = this.analyzeTeamSynergy(team, requiredSkills);\n        \n        if (analysis.synergy >= 60) { // Only suggest teams with good synergy\n          teamSuggestions.push(analysis);\n        }\n      }\n    }\n\n    return teamSuggestions\n      .sort((a, b) => b.synergy - a.synergy)\n      .slice(0, 5);\n  }\n\n  private generateTeamCombinations(users: UserProfile[], size: number): UserProfile[][] {\n    if (size === 1) return users.map(user => [user]);\n    if (size > users.length) return [];\n\n    const combinations: UserProfile[][] = [];\n    \n    for (let i = 0; i < users.length - size + 1; i++) {\n      const remaining = users.slice(i + 1);\n      const smallerCombinations = this.generateTeamCombinations(remaining, size - 1);\n      \n      for (const combination of smallerCombinations) {\n        combinations.push([users[i], ...combination]);\n      }\n    }\n\n    return combinations;\n  }\n\n  private analyzeTeamSynergy(team: UserProfile[], requiredSkills: string[]): {\n    team: UserProfile[];\n    synergy: number;\n    strengths: string[];\n    recommendations: string[];\n  } {\n    let synergy = 50; // Base synergy\n    const strengths: string[] = [];\n    const recommendations: string[] = [];\n\n    // Analyze skill coverage\n    const teamSkills = team.flatMap(member => member.skills || []);\n    const uniqueSkills = [...new Set(teamSkills)];\n    const skillCoverage = requiredSkills.filter(skill => \n      teamSkills.some(teamSkill => teamSkill.toLowerCase().includes(skill.toLowerCase()))\n    );\n\n    synergy += (skillCoverage.length / requiredSkills.length) * 30;\n    if (skillCoverage.length === requiredSkills.length) {\n      strengths.push('Complete skill coverage');\n    }\n\n    // Analyze experience diversity\n    const experienceLevels = team.map(member => member.experience || 'beginner');\n    const uniqueExperience = [...new Set(experienceLevels)];\n    if (uniqueExperience.length > 1) {\n      synergy += 15;\n      strengths.push('Diverse experience levels');\n    }\n\n    // Check for mentorship opportunities\n    const hasExpert = experienceLevels.includes('expert') || experienceLevels.includes('advanced');\n    const hasNovice = experienceLevels.includes('beginner') || experienceLevels.includes('intermediate');\n    if (hasExpert && hasNovice) {\n      synergy += 10;\n      strengths.push('Mentorship opportunities');\n    }\n\n    // Analyze collaboration history (simplified)\n    const totalPoints = team.reduce((sum, member) => sum + (member.totalPoints || 0), 0);\n    const avgPoints = totalPoints / team.length;\n    if (avgPoints > 1000) {\n      synergy += 10;\n      strengths.push('Experienced collaborators');\n    }\n\n    // Generate recommendations\n    const missingSkills = requiredSkills.filter(skill => \n      !teamSkills.some(teamSkill => teamSkill.toLowerCase().includes(skill.toLowerCase()))\n    );\n    \n    if (missingSkills.length > 0) {\n      recommendations.push(`Consider adding expertise in: ${missingSkills.join(', ')}`);\n    }\n\n    if (team.length < 4) {\n      recommendations.push('Consider adding one more member for better workload distribution');\n    }\n\n    return {\n      team,\n      synergy: Math.min(100, synergy),\n      strengths,\n      recommendations,\n    };\n  }\n\n  // Progress Tracking and Analytics\n  async getUserProgressAnalytics(userId: string): Promise<{\n    level: number;\n    totalPoints: number;\n    achievements: { total: number; byCategory: Record<string, number> };\n    challenges: { completed: number; inProgress: number; avgScore: number };\n    recentActivity: Array<{ type: string; description: string; points: number; date: Date }>;\n    nextMilestones: Array<{ title: string; progress: number; target: number }>;\n  }> {\n    const userAchievements = this.getUserAchievements(userId);\n    const userChallenges = this.getUserChallengeParticipations(userId);\n\n    const achievements = {\n      total: userAchievements.length,\n      byCategory: this.groupAchievementsByCategory(userAchievements),\n    };\n\n    const completedChallenges = userChallenges.filter(p => p.status === 'completed');\n    const inProgressChallenges = userChallenges.filter(p => p.status === 'in_progress');\n    const avgScore = completedChallenges.length > 0 \n      ? completedChallenges.reduce((sum, p) => sum + p.score, 0) / completedChallenges.length \n      : 0;\n\n    const challenges = {\n      completed: completedChallenges.length,\n      inProgress: inProgressChallenges.length,\n      avgScore,\n    };\n\n    // Calculate level and points (simplified calculation)\n    const totalPoints = userAchievements.reduce((sum, ua) => {\n      const achievement = this.achievements.get(ua.achievementId);\n      return sum + (achievement?.points || 0);\n    }, 0);\n\n    const level = Math.floor(totalPoints / 1000) + 1;\n\n    return {\n      level,\n      totalPoints,\n      achievements,\n      challenges,\n      recentActivity: [], // Would be populated from actual activity log\n      nextMilestones: this.calculateNextMilestones(totalPoints, userAchievements),\n    };\n  }\n\n  // Helper methods\n  private getUserAchievements(userId: string): UserAchievement[] {\n    return Array.from(this.userAchievements.values())\n      .filter(ua => ua.userId === userId);\n  }\n\n  private getUserChallengeParticipations(userId: string): ChallengeParticipant[] {\n    return Array.from(this.challengeParticipants.values())\n      .filter(cp => cp.userId === userId);\n  }\n\n  private groupAchievementsByCategory(userAchievements: UserAchievement[]): Record<string, number> {\n    const categories: Record<string, number> = {};\n    \n    userAchievements.forEach(ua => {\n      const achievement = this.achievements.get(ua.achievementId);\n      if (achievement) {\n        categories[achievement.category] = (categories[achievement.category] || 0) + 1;\n      }\n    });\n\n    return categories;\n  }\n\n  private calculateNextMilestones(currentPoints: number, userAchievements: UserAchievement[]): Array<{ title: string; progress: number; target: number }> {\n    const earnedIds = new Set(userAchievements.map(ua => ua.achievementId));\n    const availableAchievements = Array.from(this.achievements.values())\n      .filter(a => !earnedIds.has(a.id))\n      .sort((a, b) => a.points - b.points)\n      .slice(0, 3);\n\n    return availableAchievements.map(achievement => ({\n      title: achievement.name,\n      progress: 0, // Would calculate based on actual progress\n      target: achievement.points,\n    }));\n  }\n\n  private async getUserActionCount(userId: string, action: string): Promise<number> {\n    // This would query actual user activity data\n    // For now, return a placeholder\n    return 0;\n  }\n\n  private async getUserActionsInTimeframe(userId: string, action: string, since: Date): Promise<number> {\n    // This would query actual user activity data within timeframe\n    return 0;\n  }\n\n  private getTimeframeStart(timeframe: string): Date {\n    const now = new Date();\n    switch (timeframe) {\n      case '1_week':\n        return new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n      case '1_month':\n        return new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n      default:\n        return new Date(now.getTime() - 24 * 60 * 60 * 1000);\n    }\n  }\n\n  private async addPointsToUser(userId: string, points: number): Promise<void> {\n    // This would update the user's total points in the database\n    // For now, this is a placeholder\n  }\n\n  // Public API\n  getAllAchievements(): Achievement[] {\n    return Array.from(this.achievements.values());\n  }\n\n  getActiveChallenges(): Challenge[] {\n    return Array.from(this.challenges.values())\n      .filter(challenge => challenge.status === 'active');\n  }\n\n  getChallengeLeaderboard(challengeId: string): ChallengeParticipant[] {\n    return Array.from(this.challengeParticipants.values())\n      .filter(participant => participant.challengeId === challengeId)\n      .sort((a, b) => b.score - a.score)\n      .slice(0, 10);\n  }\n}\n\nexport const gamificationService = new GamificationService();","size_bytes":23178},"server/ibm-quantum.ts":{"content":"import axios from 'axios';\n\ninterface IBMQuantumJob {\n  id: string;\n  name?: string;\n  backend: string;\n  status: 'queued' | 'running' | 'completed' | 'failed' | 'cancelled';\n  created: string;\n  updated?: string;\n  runtime?: number;\n  qubits?: number;\n  shots?: number;\n  program?: string;\n  results?: any;\n  error?: string;\n}\n\ninterface IBMQuantumBackend {\n  name: string;\n  status: 'online' | 'offline' | 'maintenance';\n  pending_jobs: number;\n  quantum_volume?: number;\n  num_qubits: number;\n  basis_gates?: string[];\n  coupling_map?: number[][];\n}\n\nclass IBMQuantumService {\n  private apiKey: string;\n  private region: string;\n  private projectId: string;\n  private instanceId: string;\n  private baseUrl: string;\n  private runtimeUrl: string;\n  private bearerToken: string | null = null;\n  private tokenExpiry: number = 0;\n\n  constructor() {\n    this.apiKey = process.env.IBM_QUANTUM_API_TOKEN || '';\n    this.region = process.env.IBM_QUANTUM_REGION || 'us-east';\n    this.projectId = process.env.IBM_QUANTUM_PROJECT_ID || '';\n    this.instanceId = process.env.IBM_QUANTUM_INSTANCE_ID || '';\n    \n    // Use region-specific Qiskit Runtime endpoints\n    this.baseUrl = `https://${this.region}.quantum-computing.cloud.ibm.com/runtime`;\n    this.runtimeUrl = this.baseUrl;\n\n    if (!this.apiKey) {\n      console.warn('⚠️  IBM Quantum API token not found in environment variables');\n      console.warn('Please add IBM_QUANTUM_API_TOKEN to your .env file');\n      console.warn('Using simulated data for demonstration');\n    } else if (!this.projectId) {\n      console.warn('⚠️  IBM Quantum Project ID not found in environment variables');\n      console.warn('Please add IBM_QUANTUM_PROJECT_ID to your .env file');\n      console.warn('Project ID is required for Qiskit Runtime API access');\n    } else if (!this.instanceId) {\n      console.warn('⚠️  IBM Quantum Instance ID not found in environment variables');\n      console.warn('Please add IBM_QUANTUM_INSTANCE_ID to your .env file');\n      console.warn('Instance ID is required for proper authentication');\n    } else {\n      console.log('✅ IBM Quantum API configured successfully');\n      console.log(`🔗 Base URL: ${this.baseUrl}`);\n      console.log(`🏷️  Project ID: ${this.projectId}`);\n      console.log(`🌍 Region: ${this.region}`);\n    }\n  }\n\n  private async getBearerToken(): Promise<string> {\n    // If we have a valid token, return it\n    if (this.bearerToken && Date.now() < this.tokenExpiry) {\n      return this.bearerToken;\n    }\n\n    try {\n      console.log('🔑 Generating IBM Cloud Bearer token...');\n      const response = await axios.post('https://iam.cloud.ibm.com/identity/token', \n        `grant_type=urn:ibm:params:oauth:grant-type:apikey&apikey=${this.apiKey}`,\n        {\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'Accept': 'application/json'\n          }\n        }\n      );\n\n      this.bearerToken = response.data.access_token;\n      // Set expiry to 50 minutes (tokens typically last 60 minutes)\n      this.tokenExpiry = Date.now() + (50 * 60 * 1000);\n      \n      console.log('✅ Successfully generated Bearer token');\n      return this.bearerToken!\n    } catch (error: any) {\n      console.error('❌ Failed to generate Bearer token:', error.response?.data || error.message);\n      throw new Error('Failed to authenticate with IBM Cloud');\n    }\n  }\n\n  private async makeAuthenticatedRequest(url: string, method: 'GET' | 'POST' = 'GET', data?: any) {\n    if (!this.apiKey) {\n      throw new Error('IBM Quantum API key not configured');\n    }\n\n    try {\n      // Get valid Bearer token\n      const bearerToken = await this.getBearerToken();\n      \n      // Required headers for 2025 Qiskit Runtime API\n      const headers: any = {\n        'Authorization': `Bearer ${bearerToken}`,\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'User-Agent': 'Quantum-Dashboard/1.0'\n      };\n      \n      // Add project-specific headers when available\n      if (this.projectId) {\n        headers['X-Project-ID'] = this.projectId;\n      }\n      \n      // Add instance/service CRN when available\n      if (this.instanceId) {\n        headers['Service-CRN'] = this.instanceId;\n      }\n      console.log(`🌐 Making request to: ${url}`);\n      const response = await axios({\n        method,\n        url,\n        headers,\n        data,\n        timeout: 30000,\n        validateStatus: (status) => status < 500 // Allows for retries on specific status codes, but should be handled carefully\n      });\n\n      if (response.status >= 400) {\n        console.warn(`⚠️  API returned ${response.status}:`, response.data);\n        return { error: response.data, status: response.status };\n      }\n\n      console.log(`✅ Successfully fetched data from IBM Quantum (${response.status})`);\n      return response.data;\n    } catch (error: any) {\n      if (error.code === 'ECONNABORTED') {\n        console.error('⏱️  Request timeout to IBM Quantum API');\n        throw new Error('Request timeout - IBM Quantum API is not responding');\n      }\n\n      console.error(`❌ IBM Quantum API request failed:`, {\n        url,\n        status: error.response?.status,\n        message: error.message,\n        data: error.response?.data\n      });\n\n      throw new Error(`IBM Quantum API Error: ${error.response?.status || error.message}`);\n    }\n  }\n\n  async getJobs(limit: number = 50): Promise<IBMQuantumJob[]> {\n    if (!this.apiKey) {\n      console.warn('API key not available. Returning simulated jobs.');\n      return this.generateSampleJobs(limit);\n    }\n\n    try {\n      console.log(`📊 Fetching ${limit} jobs from IBM Quantum...`);\n\n      // Updated endpoints for 2025 Qiskit Runtime API\n      const endpoints = [\n        `${this.baseUrl}/projects/${this.projectId}/jobs?limit=${limit}`, // Primary project-scoped endpoint\n        `${this.baseUrl}/projects/${this.projectId}/jobs`, // Fallback without parameters\n        `${this.baseUrl}/jobs?limit=${limit}` // Global jobs endpoint (if project-scoped fails)\n      ];\n\n      let data: any = null;\n      let lastError: any = null;\n\n      for (const endpoint of endpoints) {\n        try {\n          console.log(`🔄 Trying endpoint: ${endpoint}`);\n          data = await this.makeAuthenticatedRequest(endpoint);\n          if (data && !data.error && (Array.isArray(data.jobs) || Array.isArray(data.data))) {\n            console.log(`✅ Successfully fetched from: ${endpoint}`);\n            break;\n          } else if (data && data.error) {\n            console.log(`⚠️  Endpoint ${endpoint} returned an API error:`, data.error);\n            lastError = new Error(`API Error: ${data.error.message || data.error}`);\n          } else if (!data) {\n            console.log(`⚠️  Endpoint ${endpoint} returned no data.`);\n            lastError = new Error('No data received from endpoint');\n          } else if (!Array.isArray(data.jobs) && !Array.isArray(data.data)) {\n            console.log(`⚠️  Endpoint ${endpoint} returned data in unexpected format.`);\n            lastError = new Error('Unexpected data format');\n          }\n        } catch (error) {\n          lastError = error;\n          console.log(`❌ Endpoint failed: ${endpoint}`, error instanceof Error ? error.message : error);\n          continue;\n        }\n      }\n\n      if (!data || data.error || (!Array.isArray(data.jobs) && !Array.isArray(data.data))) {\n        console.warn('⚠️  All IBM Quantum job endpoints failed or returned invalid data. Generating sample data for demo.');\n        return this.generateSampleJobs(limit);\n      }\n\n      const jobs = data.jobs || data.data || [];\n\n      if (!Array.isArray(jobs)) {\n        console.warn('⚠️  Unexpected data format from IBM Quantum:', typeof jobs);\n        return this.generateSampleJobs(limit);\n      }\n\n      console.log(`📈 Successfully processed ${jobs.length} real jobs from IBM Quantum`);\n\n      return jobs.map((job: any, index: number) => ({\n        id: job.id || `ibm_job_${Date.now()}_${index}`,\n        name: job.program?.id || job.program_id || job.name || `IBM Job ${job.id?.slice(-8) || index}`,\n        backend: job.backend?.name || job.backend_name || job.device || 'ibm_brisbane', // Use backend.name if available\n        status: this.mapStatus(job.status || job.state || 'queued'),\n        created: job.created || job.creation_date || new Date().toISOString(),\n        updated: job.updated || job.time_per_step?.COMPLETED || job.modified,\n        runtime: job.running_time || job.usage?.seconds || job.runtime,\n        qubits: job.params?.circuits?.[0]?.num_qubits || job.usage?.quantum_seconds || job.num_qubits || Math.floor(Math.random() * 127) + 5,\n        shots: job.params?.shots || job.usage?.shots || job.shots || 1024,\n        program: job.program?.id || job.program_id || 'quantum_circuit',\n        results: job.results,\n        error: job.error_message || job.failure?.error_message || job.error\n      }));\n    } catch (error) {\n      console.error('❌ Failed to fetch IBM Quantum jobs:', error);\n      return this.generateSampleJobs(limit);\n    }\n  }\n\n  async getBackends(): Promise<IBMQuantumBackend[]> {\n    if (!this.apiKey) {\n      console.warn('API key not available. Returning simulated backends.');\n      return this.generateSampleBackends();\n    }\n\n    try {\n      console.log('🖥️  Fetching backends from IBM Quantum...');\n\n      const endpoints = [\n        `${this.baseUrl}/backends`, // Primary Qiskit Runtime endpoint\n        `https://${this.region}.quantum-computing.cloud.ibm.com/runtime/backends`, // Explicit region endpoint\n        `https://quantum-computing.ibm.com/api/backends` // Public backends endpoint\n      ];\n\n      let data: any = null;\n\n      for (const endpoint of endpoints) {\n        try {\n          console.log(`🔄 Trying backends endpoint: ${endpoint}`);\n          data = await this.makeAuthenticatedRequest(endpoint);\n          if (data && !data.error && Array.isArray(data.backends)) {\n            console.log(`✅ Successfully fetched backends from: ${endpoint}`);\n            break;\n          } else if (data && data.error) {\n            console.log(`⚠️  Endpoint ${endpoint} returned an API error:`, data.error);\n          } else if (!data) {\n            console.log(`⚠️  Endpoint ${endpoint} returned no data.`);\n          } else if (!Array.isArray(data.backends)) {\n            console.log(`⚠️  Endpoint ${endpoint} returned data in unexpected format.`);\n          }\n        } catch (error) {\n          console.log(`❌ Backends endpoint failed: ${endpoint}`, error instanceof Error ? error.message : error);\n          continue;\n        }\n      }\n\n      if (!data || data.error || !Array.isArray(data.backends)) {\n        console.warn('⚠️  All backend endpoints failed or returned invalid data. Generating sample backends.');\n        return this.generateSampleBackends();\n      }\n\n      const backends = data.backends || [];\n\n      if (!Array.isArray(backends)) {\n        console.warn('⚠️  Unexpected backends data format:', typeof backends);\n        return this.generateSampleBackends();\n      }\n\n      console.log(`🖥️  Successfully processed ${backends.length} real backends from IBM Quantum`);\n\n      return backends.map((backend: any) => ({\n        name: backend.name || backend.backend_name || 'unknown_backend',\n        status: this.mapBackendStatus(backend.status || backend.operational),\n        pending_jobs: backend.pending_jobs || backend.length_queue || backend.queue_length || Math.floor(Math.random() * 10),\n        quantum_volume: backend.quantum_volume || backend.props?.quantum_volume,\n        num_qubits: backend.n_qubits || backend.num_qubits || backend.configuration?.n_qubits || Math.floor(Math.random() * 100) + 27,\n        basis_gates: backend.basis_gates || backend.configuration?.basis_gates || ['cx', 'id', 'rz', 'sx', 'x'],\n        coupling_map: backend.coupling_map || backend.configuration?.coupling_map\n      }));\n    } catch (error) {\n      console.error('❌ Failed to fetch IBM Quantum backends:', error);\n      return this.generateSampleBackends();\n    }\n  }\n\n  private generateSampleJobs(count: number): IBMQuantumJob[] {\n    console.log(`🔧 Generating ${count} sample IBM Quantum jobs for demo`);\n    const backends = ['ibm_brisbane', 'ibm_kyoto', 'ibm_osaka', 'ibm_cairo', 'ibm_sherbrooke'];\n    const statuses: Array<'queued' | 'running' | 'completed' | 'failed' | 'cancelled'> = ['queued', 'running', 'completed', 'failed', 'cancelled'];\n\n    return Array.from({ length: count }, (_, i) => {\n      const now = new Date();\n      const created = new Date(now.getTime() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString();\n      const status = statuses[Math.floor(Math.random() * statuses.length)];\n\n      return {\n        id: `ibm_sample_${Date.now()}_${i}`,\n        name: `IBM Quantum Circuit ${i + 1}`,\n        backend: backends[Math.floor(Math.random() * backends.length)],\n        status,\n        created,\n        updated: status !== 'queued' ? new Date(created).toISOString() : undefined,\n        runtime: status === 'completed' ? Math.floor(Math.random() * 300) + 30 : undefined,\n        qubits: Math.floor(Math.random() * 100) + 5,\n        shots: Math.pow(2, Math.floor(Math.random() * 6) + 10),\n        program: 'sample_quantum_circuit',\n        results: status === 'completed' ? { counts: { '000': 512, '111': 512 } } : undefined,\n        error: status === 'failed' ? 'Sample quantum circuit error for demo' : undefined\n      };\n    });\n  }\n\n  private generateSampleBackends(): IBMQuantumBackend[] {\n    console.log('🔧 Generating sample IBM Quantum backends for demo');\n    return [\n      { name: 'ibm_brisbane', status: 'online', pending_jobs: Math.floor(Math.random() * 5), num_qubits: 127, basis_gates: ['cx', 'id', 'rz', 'sx', 'x'], coupling_map: [] },\n      { name: 'ibm_kyoto', status: 'online', pending_jobs: Math.floor(Math.random() * 8), num_qubits: 127, basis_gates: ['cx', 'id', 'rz', 'sx', 'x'], coupling_map: [] },\n      { name: 'ibm_osaka', status: 'online', pending_jobs: Math.floor(Math.random() * 12), num_qubits: 127, basis_gates: ['cx', 'id', 'rz', 'sx', 'x'], coupling_map: [] },\n      { name: 'ibm_cairo', status: 'maintenance', pending_jobs: 0, num_qubits: 127, basis_gates: ['cx', 'id', 'rz', 'sx', 'x'], coupling_map: [] },\n      { name: 'ibm_sherbrooke', status: 'online', pending_jobs: Math.floor(Math.random() * 15), num_qubits: 133, basis_gates: ['cx', 'id', 'rz', 'sx', 'x'], coupling_map: [] }\n    ];\n  }\n\n  async getJobById(jobId: string): Promise<IBMQuantumJob | null> {\n    if (!this.apiKey) {\n      console.warn('API token not available. Cannot fetch job by ID.');\n      return null;\n    }\n    try {\n      console.log(`🔍 Fetching job details for: ${jobId}`);\n      const job = await this.makeAuthenticatedRequest(\n        `${this.runtimeUrl}/jobs/${jobId}`\n      );\n\n      if (job.error) {\n        console.warn(`⚠️  Error fetching job ${jobId}:`, job.error);\n        return null;\n      }\n\n      return {\n        id: job.id,\n        name: job.program?.id || 'Quantum Job',\n        backend: job.backend?.name || 'Unknown',\n        status: this.mapStatus(job.status),\n        created: job.created,\n        updated: job.updated,\n        runtime: job.running_time,\n        qubits: job.params?.circuits?.[0]?.num_qubits || Math.floor(Math.random() * 50) + 5,\n        shots: job.params?.shots || 1024,\n        program: job.program?.id || 'quantum_circuit',\n        results: job.results,\n        error: job.error_message\n      };\n    } catch (error) {\n      console.error(`❌ Failed to fetch IBM Quantum job ${jobId}:`, error);\n      return null;\n    }\n  }\n\n  private mapStatus(ibmStatus: string): 'queued' | 'running' | 'completed' | 'failed' | 'cancelled' {\n    switch (ibmStatus?.toLowerCase()) {\n      case 'queued': case 'pending': return 'queued';\n      case 'running': case 'validating': return 'running';\n      case 'completed': case 'done': return 'completed';\n      case 'failed': case 'error': return 'failed';\n      case 'cancelled': case 'canceled': return 'cancelled';\n      default: return 'queued';\n    }\n  }\n\n  private mapBackendStatus(ibmStatus: string | boolean | undefined): 'online' | 'offline' | 'maintenance' {\n    if (typeof ibmStatus === 'boolean') {\n      return ibmStatus ? 'online' : 'offline';\n    }\n    switch (ibmStatus?.toLowerCase()) {\n      case 'online': return 'online';\n      case 'maintenance': return 'maintenance';\n      case 'offline': return 'offline';\n      default: return 'offline'; // Default to offline if status is unknown or not provided\n    }\n  }\n\n  isConfigured(): boolean {\n    return !!(this.apiKey && this.projectId && this.instanceId);\n  }\n\n  getApiStatus(): string {\n    const parts = [];\n    if (!this.apiKey) parts.push('API Token missing');\n    if (!this.projectId) parts.push('Project ID missing');\n    if (!this.instanceId) parts.push('Instance ID missing');\n    \n    return parts.length === 0 ? '✅ Fully Configured' : `❌ Missing: ${parts.join(', ')}`;\n  }\n  \n  getConfigurationHelp(): string {\n    return `\n🔧 IBM Quantum Configuration Required:\n\nEnvironment Variables needed in your .env file:\n• IBM_QUANTUM_API_TOKEN=your_api_token_here\n• IBM_QUANTUM_PROJECT_ID=your_project_id_here  \n• IBM_QUANTUM_INSTANCE_ID=your_instance_id_here\n• IBM_QUANTUM_REGION=us-east (optional, defaults to us-east)\n\n📍 How to find these values:\n1. Go to https://quantum.ibm.com/\n2. Create an account and access IBM Quantum Experience\n3. API Token: Account Settings → API Token\n4. Project ID: Your workspace/project ID from the dashboard\n5. Instance ID: Your Quantum service instance ID from IBM Cloud\n\nCurrent Status: ${this.getApiStatus()}\n`;\n  }\n}\n\nexport const ibmQuantumService = new IBMQuantumService();","size_bytes":17822},"server/index.ts":{"content":"import { config } from \"dotenv\";\n// Load environment variables\nconfig();\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // Only setup Vite in development mode (after routes)\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // Use PORT from environment, default to 5000\n  const port = parseInt(process.env.PORT || \"5000\", 10);\n\n  // Cross-platform fix: Windows uses \"localhost\", others use \"0.0.0.0\"\n  const host = process.platform === \"win32\" ? \"localhost\" : \"0.0.0.0\";\n\n  server.listen(\n    { port, host },\n    () => {\n      log(`🚀 Server running at http://${host}:${port}`);\n    }\n  );\n})();\n","size_bytes":1976},"server/openai-service.ts":{"content":"import OpenAI from 'openai';\nimport type { Job, Backend } from '@shared/schema';\n\nclass OpenAIQuantumService {\n  private client: OpenAI | undefined;\n  private isConfigured: boolean = false;\n\n  constructor() {\n    const apiKey = process.env.OPENAI_API_KEY;\n    if (apiKey) {\n      this.client = new OpenAI({ apiKey });\n      this.isConfigured = true;\n      console.log('✅ OpenAI service configured for quantum analysis');\n    } else {\n      console.log('⚠️  OpenAI API key not found - AI features will be disabled');\n    }\n  }\n\n  async generateJobSuggestions(jobData: {\n    qubits: number;\n    shots: number;\n    backend: string;\n    program?: string;\n  }): Promise<{\n    circuitSuggestions: string[];\n    optimizationTips: string[];\n    backendRecommendations: string[];\n    estimatedRuntime: string;\n  }> {\n    if (!this.isConfigured) {\n      return this.getFallbackSuggestions();\n    }\n\n    try {\n      if (!this.client) {\n        return this.getFallbackSuggestions();\n      }\n\n      const prompt = `As a quantum computing expert, analyze this quantum job configuration and provide suggestions:\n\nQubits: ${jobData.qubits}\nShots: ${jobData.shots}\nBackend: ${jobData.backend}\nCircuit: ${jobData.program || 'Not provided'}\n\nPlease provide:\n1. Circuit improvement suggestions (max 3)\n2. Optimization tips for better performance (max 3)\n3. Backend recommendations if current choice isn't optimal (max 2)\n4. Estimated runtime category (Very Fast/Fast/Medium/Slow/Very Slow)\n\nFormat your response as JSON with keys: circuitSuggestions, optimizationTips, backendRecommendations, estimatedRuntime`;\n\n      const response = await this.client!.chat.completions.create({\n        model: 'gpt-4o-mini',\n        messages: [{ role: 'user', content: prompt }],\n        max_tokens: 800,\n        temperature: 0.7,\n      });\n\n      const content = response.choices[0]?.message?.content;\n      if (content) {\n        try {\n          return JSON.parse(content);\n        } catch (parseError) {\n          console.warn('Failed to parse AI response, using fallback');\n          return this.getFallbackSuggestions();\n        }\n      }\n    } catch (error) {\n      console.error('OpenAI API error:', error);\n    }\n\n    return this.getFallbackSuggestions();\n  }\n\n  async analyzeFailedJob(job: Job): Promise<{\n    possibleCauses: string[];\n    suggestions: string[];\n    circuitImprovements: string[];\n    preventionTips: string[];\n  }> {\n    if (!this.isConfigured) {\n      return this.getFallbackFailureAnalysis();\n    }\n\n    try {\n      if (!this.client) {\n        return this.getFallbackFailureAnalysis();\n      }\n\n      const prompt = `Analyze this failed quantum job and provide insights:\n\nJob ID: ${job.id}\nName: ${job.name}\nBackend: ${job.backend}\nQubits: ${job.qubits}\nShots: ${job.shots}\nError: ${job.error || 'No specific error message'}\nCircuit: ${job.program || 'Circuit not available'}\nDuration: ${job.duration || 0} seconds\n\nAs a quantum computing expert, provide:\n1. Most likely causes for the failure (max 3)\n2. Specific suggestions to fix the issue (max 3)\n3. Circuit improvements to prevent similar failures (max 3)\n4. General prevention tips (max 2)\n\nFormat as JSON with keys: possibleCauses, suggestions, circuitImprovements, preventionTips`;\n\n      const response = await this.client!.chat.completions.create({\n        model: 'gpt-4o-mini',\n        messages: [{ role: 'user', content: prompt }],\n        max_tokens: 1000,\n        temperature: 0.7,\n      });\n\n      const content = response.choices[0]?.message?.content;\n      if (content) {\n        try {\n          return JSON.parse(content);\n        } catch (parseError) {\n          console.warn('Failed to parse AI failure analysis, using fallback');\n          return this.getFallbackFailureAnalysis();\n        }\n      }\n    } catch (error) {\n      console.error('OpenAI API error:', error);\n    }\n\n    return this.getFallbackFailureAnalysis();\n  }\n\n  async generateCircuitCode(description: string, qubits: number): Promise<string> {\n    if (!this.isConfigured) {\n      return this.getFallbackCircuitCode(qubits);\n    }\n\n    try {\n      if (!this.client) {\n        return this.getFallbackCircuitCode(qubits);\n      }\n\n      const prompt = `Generate Qiskit quantum circuit code for: \"${description}\"\n      \nRequirements:\n- Use exactly ${qubits} qubits\n- Include necessary imports\n- Create a complete, runnable circuit\n- Add measurement instructions\n- Include helpful comments\n\nReturn only the Python/Qiskit code:`;\n\n      const response = await this.client!.chat.completions.create({\n        model: 'gpt-4o-mini',\n        messages: [{ role: 'user', content: prompt }],\n        max_tokens: 600,\n        temperature: 0.8,\n      });\n\n      const content = response.choices[0]?.message?.content;\n      if (content) {\n        // Extract code from response (remove markdown formatting if present)\n        return content.replace(/```python\\n?|```\\n?/g, '').trim();\n      }\n    } catch (error) {\n      console.error('OpenAI API error:', error);\n    }\n\n    return this.getFallbackCircuitCode(qubits);\n  }\n\n  private getFallbackSuggestions() {\n    return {\n      circuitSuggestions: [\n        \"Consider reducing circuit depth for better fidelity\",\n        \"Add error mitigation techniques like ZNE\",\n        \"Optimize gate placement to minimize crosstalk\"\n      ],\n      optimizationTips: [\n        \"Use fewer shots for faster execution in testing\",\n        \"Choose backends with better coherence times\",\n        \"Consider variational algorithms for complex problems\"\n      ],\n      backendRecommendations: [\n        \"ibm_brisbane for high-fidelity operations\",\n        \"ibm_kyoto for larger qubit counts\"\n      ],\n      estimatedRuntime: \"Medium\"\n    };\n  }\n\n  private getFallbackFailureAnalysis() {\n    return {\n      possibleCauses: [\n        \"Circuit depth exceeded decoherence time\",\n        \"Backend calibration issues during execution\",\n        \"Queue timeout or system maintenance\"\n      ],\n      suggestions: [\n        \"Reduce circuit complexity and depth\",\n        \"Try a different backend with better uptime\",\n        \"Implement error mitigation strategies\"\n      ],\n      circuitImprovements: [\n        \"Use native gate sets for the target backend\",\n        \"Minimize two-qubit gate operations\",\n        \"Add error correction codes where possible\"\n      ],\n      preventionTips: [\n        \"Monitor backend status before job submission\",\n        \"Test with fewer shots initially\"\n      ]\n    };\n  }\n\n  async chat(message: string): Promise<string> {\n    if (!this.isConfigured) {\n      return \"I'm sorry, but the AI assistant is not currently available. Please check if the OpenAI API key is configured properly.\";\n    }\n\n    try {\n      if (!this.client) {\n        return \"I'm sorry, but the AI assistant is not currently available. Please check if the OpenAI API key is configured properly.\";\n      }\n\n      const systemPrompt = `You are a helpful and knowledgeable AI assistant. Give clear, direct answers to user questions.\n\nKey guidelines:\n- Answer questions directly and concisely\n- Be helpful and informative \n- If asked about quantum computing, provide accurate technical information\n- If asked about the dashboard, explain features and functionality\n- For general questions, give straightforward, useful responses\n- Keep answers focused and to the point\n\nYou are integrated into a quantum computing job management dashboard that tracks IBM Quantum jobs, backends, and analytics. You can help users understand quantum computing concepts, explain dashboard features, or answer any other questions they have.`;\n\n      const response = await this.client!.chat.completions.create({\n        model: 'gpt-4o-mini',\n        messages: [\n          { role: 'system', content: systemPrompt },\n          { role: 'user', content: message }\n        ],\n        max_tokens: 800,\n        temperature: 0.7,\n      });\n\n      return response.choices[0]?.message?.content || \"I'm sorry, I couldn't generate a response at the moment.\";\n    } catch (error) {\n      console.error('OpenAI API error in chat:', error);\n      return \"I'm experiencing some technical difficulties right now. Please try again in a moment.\";\n    }\n  }\n\n  isServiceConfigured(): boolean {\n    return this.isConfigured;\n  }\n\n  private getFallbackCircuitCode(qubits: number): string {\n    return `from qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister\n\n# Create quantum and classical registers\nqreg = QuantumRegister(${qubits}, 'q')\ncreg = ClassicalRegister(${qubits}, 'c')\n\n# Create the quantum circuit\ncircuit = QuantumCircuit(qreg, creg)\n\n# Example: Create superposition state\nfor i in range(${qubits}):\n    circuit.h(qreg[i])\n\n# Add measurements\ncircuit.measure(qreg, creg)\n\nprint(circuit)`;\n  }\n\n  // Method to get detailed circuit improvement instructions\n  async getCircuitInstructions(job: Job): Promise<string> {\n    if (!this.isConfigured) {\n      return `\nAI Circuit Improvement Instructions for \"${job.name}\":\n\nBased on your quantum job configuration:\n- Qubits: ${job.qubits}\n- Shots: ${job.shots}\n- Backend: ${job.backend}\n\nHere are detailed circuit improvement instructions:\n\n1. Circuit Depth Optimization:\n   • Reduce gate depth by combining consecutive gates\n   • Use native gate sets for your target hardware\n   • Replace multi-qubit gates with hardware-efficient alternatives\n\n2. Error Mitigation Strategies:\n   • Implement dynamical decoupling sequences\n   • Use error correction codes for critical qubits\n   • Add redundancy for error-prone operations\n\n3. Noise-Resilient Design:\n   • Choose qubit mappings that minimize crosstalk\n   • Implement variational quantum algorithms with noise robustness\n   • Use short coherence gates and minimize idle times\n\n4. Hardware-Specific Optimizations:\n   • Optimize for ${job.backend} connectivity graph\n   • Use native gate implementations\n   • Account for specific error rates and calibration data\n\n5. Measurement Strategies:\n   • Use tomography for complete state characterization\n   • Implement partial measurements for reduced readout error\n   • Consider ancilla-assisted measurements for error detection\n\nApply these techniques systematically to improve your quantum circuit performance.\n      `;\n    }\n\n    try {\n      const prompt = `Provide detailed circuit improvement instructions for this quantum job:\n\nJob: ${job.name}\nQubits: ${job.qubits}\nShots: ${job.shots}\nBackend: ${job.backend}\nProgram: ${job.program?.substring(0, 200) || 'Not provided'}...\nStatus: ${job.status}\nError: ${job.error || 'None'}\n\nPlease provide comprehensive, actionable instructions on:\n1. Circuit optimization techniques\n2. Error mitigation strategies  \n3. Hardware-specific improvements\n4. Noise reduction methods\n5. Measurement optimization\n\nMake it practical and specific to this configuration.`;\n\n      const response = await this.client!.chat.completions.create({\n        model: 'gpt-4o-mini',\n        messages: [\n          {\n            role: 'system',\n            content: 'You are a quantum computing expert. Provide detailed, step-by-step instructions for improving quantum circuits. Focus on practical, implementable recommendations.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        max_tokens: 800,\n        temperature: 0.7\n      });\n\n      return response.choices[0].message.content || 'Unable to generate instructions';\n    } catch (error) {\n      console.error('Error getting circuit instructions:', error);\n      return 'Unable to generate AI-powered circuit instructions at this time.';\n    }\n  }\n\n  // Method to get guided circuit improvements\n  async getGuidedImprovements(job: Job): Promise<string[]> {\n    if (!this.isConfigured) {\n      return [\n        `Apply quantum error correction codes for ${job.qubits}-qubit systems`,\n        `Implement dynamical decoupling on ${job.backend} hardware`,\n        `Use variational quantum algorithms optimized for ${job.shots} shots`,\n        'Optimize gate scheduling to minimize decoherence',\n        'Add measurement error mitigation techniques'\n      ];\n    }\n\n    try {\n      const prompt = `Generate guided improvements for this quantum job:\n\nJob: ${job.name}\nConfiguration: ${job.qubits} qubits, ${job.shots} shots on ${job.backend}\nCurrent Status: ${job.status}\nProgram: ${job.program?.substring(0, 150) || 'Not provided'}\n\nProvide 4-6 specific improvement suggestions as a JSON array. Focus on:\n- Circuit optimization techniques\n- Hardware-specific improvements\n- Error mitigation methods\n- Performance enhancements\n\nReturn format: [\"improvement 1\", \"improvement 2\", ...]`;\n\n      const response = await this.client!.chat.completions.create({\n        model: 'gpt-4o-mini',\n        messages: [\n          {\n            role: 'system',\n            content: 'You are a quantum computing optimization expert. Provide specific, actionable improvements for quantum circuits. Return only a JSON array of improvement suggestions.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        max_tokens: 400,\n        temperature: 0.8\n      });\n\n      const content = response.choices[0].message.content;\n      try {\n        return JSON.parse(content || '[]');\n      } catch {\n        // If JSON parsing fails, split the response into lines\n        return content?.split('\\n').filter(line => line.trim().length > 0) || [];\n      }\n    } catch (error) {\n      console.error('Error getting guided improvements:', error);\n      return ['Unable to generate AI-powered guided improvements at this time.'];\n    }\n  }\n}\n\nexport const openaiService = new OpenAIQuantumService();","size_bytes":13638},"server/real-time-collaboration-service.ts":{"content":"import { WebSocketServer, WebSocket } from 'ws';\nimport type { Server } from 'http';\nimport type { \n  LiveCollaborationSession, InsertLiveCollaborationSession,\n  LiveEdit, InsertLiveEdit, Project, UserProfile, ChatMessage\n} from '@shared/schema';\nimport { randomUUID } from 'crypto';\n\ninterface CollaborationClient {\n  id: string;\n  ws: WebSocket;\n  userId: string;\n  userName: string;\n  sessionId: string;\n  projectId: string;\n  cursor?: { line: number; column: number };\n  isTyping: boolean;\n  lastActivity: Date;\n}\n\nexport class RealTimeCollaborationService {\n  private wss: WebSocketServer | null = null;\n  private clients: Map<string, CollaborationClient> = new Map();\n  private sessions: Map<string, LiveCollaborationSession> = new Map();\n  private documentStates: Map<string, { content: string; version: number; edits: LiveEdit[] }> = new Map();\n\n  initialize(server: Server) {\n    this.wss = new WebSocketServer({ \n      server, \n      path: '/ws/collaboration'\n    });\n\n    this.wss.on('connection', (ws, request) => {\n      this.handleConnection(ws, request);\n    });\n\n    console.log('🔄 Real-time collaboration service initialized');\n  }\n\n  private handleConnection(ws: WebSocket, request: any) {\n    const url = new URL(request.url!, `http://${request.headers.host}`);\n    const userId = url.searchParams.get('userId');\n    const userName = url.searchParams.get('userName');\n    const sessionId = url.searchParams.get('sessionId');\n    const projectId = url.searchParams.get('projectId');\n\n    if (!userId || !userName || !sessionId || !projectId) {\n      ws.close(1008, 'Missing required parameters');\n      return;\n    }\n\n    const clientId = randomUUID();\n    const client: CollaborationClient = {\n      id: clientId,\n      ws,\n      userId,\n      userName,\n      sessionId,\n      projectId,\n      isTyping: false,\n      lastActivity: new Date(),\n    };\n\n    this.clients.set(clientId, client);\n\n    // Send initial session state\n    this.sendToClient(client, {\n      type: 'session_joined',\n      sessionId,\n      participants: this.getSessionParticipants(sessionId),\n      documentState: this.getDocumentState(projectId),\n    });\n\n    // Notify other participants\n    this.broadcastToSession(sessionId, {\n      type: 'user_joined',\n      user: { id: userId, name: userName },\n      timestamp: new Date(),\n    }, clientId);\n\n    ws.on('message', (data) => {\n      try {\n        const message = JSON.parse(data.toString());\n        this.handleMessage(client, message);\n      } catch (error) {\n        console.error('Invalid message format:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      this.handleDisconnection(client);\n    });\n\n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n      this.handleDisconnection(client);\n    });\n  }\n\n  private handleMessage(client: CollaborationClient, message: any) {\n    client.lastActivity = new Date();\n\n    switch (message.type) {\n      case 'code_edit':\n        this.handleCodeEdit(client, message);\n        break;\n      case 'cursor_move':\n        this.handleCursorMove(client, message);\n        break;\n      case 'typing_start':\n        this.handleTypingStart(client);\n        break;\n      case 'typing_stop':\n        this.handleTypingStop(client);\n        break;\n      case 'voice_offer':\n      case 'voice_answer':\n      case 'voice_ice_candidate':\n        this.handleVoiceSignaling(client, message);\n        break;\n      case 'screen_share_start':\n        this.handleScreenShareStart(client, message);\n        break;\n      case 'screen_share_stop':\n        this.handleScreenShareStop(client);\n        break;\n      case 'chat_message':\n        this.handleChatMessage(client, message);\n        break;\n      case 'whiteboard_draw':\n        this.handleWhiteboardDraw(client, message);\n        break;\n      case 'circuit_edit':\n        this.handleCircuitEdit(client, message);\n        break;\n      default:\n        console.warn('Unknown message type:', message.type);\n    }\n  }\n\n  private handleCodeEdit(client: CollaborationClient, message: any) {\n    const { operation, position, content, version } = message;\n\n    // Create edit record\n    const edit: Partial<LiveEdit> = {\n      sessionId: client.sessionId,\n      userId: client.userId,\n      operation,\n      position,\n      content,\n    };\n\n    // Apply edit to document state\n    const docState = this.getDocumentState(client.projectId);\n    if (version !== docState.version) {\n      // Version conflict - send sync request\n      this.sendToClient(client, {\n        type: 'sync_required',\n        currentVersion: docState.version,\n        documentState: docState,\n      });\n      return;\n    }\n\n    // Apply edit and increment version\n    this.applyEdit(client.projectId, edit as LiveEdit);\n\n    // Broadcast edit to other participants\n    this.broadcastToSession(client.sessionId, {\n      type: 'code_edit_applied',\n      edit,\n      newVersion: docState.version + 1,\n      author: { id: client.userId, name: client.userName },\n    }, client.id);\n  }\n\n  private handleCursorMove(client: CollaborationClient, message: any) {\n    client.cursor = message.cursor;\n\n    this.broadcastToSession(client.sessionId, {\n      type: 'cursor_moved',\n      userId: client.userId,\n      userName: client.userName,\n      cursor: message.cursor,\n    }, client.id);\n  }\n\n  private handleTypingStart(client: CollaborationClient) {\n    if (!client.isTyping) {\n      client.isTyping = true;\n      this.broadcastToSession(client.sessionId, {\n        type: 'typing_started',\n        userId: client.userId,\n        userName: client.userName,\n      }, client.id);\n    }\n  }\n\n  private handleTypingStop(client: CollaborationClient) {\n    if (client.isTyping) {\n      client.isTyping = false;\n      this.broadcastToSession(client.sessionId, {\n        type: 'typing_stopped',\n        userId: client.userId,\n        userName: client.userName,\n      }, client.id);\n    }\n  }\n\n  private handleVoiceSignaling(client: CollaborationClient, message: any) {\n    // Forward WebRTC signaling messages to target participant\n    const targetUserId = message.targetUserId;\n    const targetClient = this.findClientByUserIdInSession(client.sessionId, targetUserId);\n\n    if (targetClient) {\n      this.sendToClient(targetClient, {\n        ...message,\n        fromUserId: client.userId,\n        fromUserName: client.userName,\n      });\n    }\n  }\n\n  private handleScreenShareStart(client: CollaborationClient, message: any) {\n    this.broadcastToSession(client.sessionId, {\n      type: 'screen_share_started',\n      userId: client.userId,\n      userName: client.userName,\n      streamId: message.streamId,\n    }, client.id);\n  }\n\n  private handleScreenShareStop(client: CollaborationClient) {\n    this.broadcastToSession(client.sessionId, {\n      type: 'screen_share_stopped',\n      userId: client.userId,\n      userName: client.userName,\n    }, client.id);\n  }\n\n  private handleChatMessage(client: CollaborationClient, message: any) {\n    const chatMessage = {\n      id: randomUUID(),\n      channelId: client.sessionId,\n      userId: client.userId,\n      userName: client.userName,\n      content: message.content,\n      type: message.messageType || 'text',\n      attachments: message.attachments,\n      timestamp: new Date(),\n    };\n\n    this.broadcastToSession(client.sessionId, {\n      type: 'chat_message_received',\n      message: chatMessage,\n    });\n  }\n\n  private handleWhiteboardDraw(client: CollaborationClient, message: any) {\n    this.broadcastToSession(client.sessionId, {\n      type: 'whiteboard_updated',\n      userId: client.userId,\n      userName: client.userName,\n      drawData: message.drawData,\n      timestamp: new Date(),\n    }, client.id);\n  }\n\n  private handleCircuitEdit(client: CollaborationClient, message: any) {\n    const { circuitData, operation } = message;\n\n    this.broadcastToSession(client.sessionId, {\n      type: 'circuit_updated',\n      userId: client.userId,\n      userName: client.userName,\n      circuitData,\n      operation,\n      timestamp: new Date(),\n    }, client.id);\n  }\n\n  private handleDisconnection(client: CollaborationClient) {\n    this.clients.delete(client.id);\n\n    // Notify other participants\n    this.broadcastToSession(client.sessionId, {\n      type: 'user_left',\n      user: { id: client.userId, name: client.userName },\n      timestamp: new Date(),\n    });\n\n    // Clean up typing state\n    if (client.isTyping) {\n      this.broadcastToSession(client.sessionId, {\n        type: 'typing_stopped',\n        userId: client.userId,\n        userName: client.userName,\n      });\n    }\n  }\n\n  private getSessionParticipants(sessionId: string) {\n    const participants = Array.from(this.clients.values())\n      .filter(client => client.sessionId === sessionId)\n      .map(client => ({\n        id: client.userId,\n        name: client.userName,\n        cursor: client.cursor,\n        isTyping: client.isTyping,\n        lastActivity: client.lastActivity,\n      }));\n\n    return participants;\n  }\n\n  private getDocumentState(projectId: string) {\n    if (!this.documentStates.has(projectId)) {\n      this.documentStates.set(projectId, {\n        content: '// Welcome to collaborative quantum circuit editing\\\\n// Start typing to see real-time collaboration!\\\\n',\n        version: 0,\n        edits: [],\n      });\n    }\n    return this.documentStates.get(projectId)!;\n  }\n\n  private applyEdit(projectId: string, edit: LiveEdit) {\n    const docState = this.getDocumentState(projectId);\n    \n    // Apply the edit to the content\n    switch (edit.operation) {\n      case 'insert':\n        if (edit.position !== undefined && edit.content) {\n          const lines = docState.content.split('\\\\n');\n          const lineIndex = Math.floor(edit.position);\n          const charIndex = edit.position % 1 * 1000; // Simplified position handling\n          \n          if (lineIndex < lines.length) {\n            const line = lines[lineIndex];\n            lines[lineIndex] = line.slice(0, charIndex) + edit.content + line.slice(charIndex);\n            docState.content = lines.join('\\\\n');\n          }\n        }\n        break;\n      case 'delete':\n        if (edit.position !== undefined && edit.content) {\n          const lines = docState.content.split('\\\\n');\n          const lineIndex = Math.floor(edit.position);\n          const charIndex = edit.position % 1 * 1000;\n          \n          if (lineIndex < lines.length) {\n            const line = lines[lineIndex];\n            const deleteLength = edit.content.length;\n            lines[lineIndex] = line.slice(0, charIndex) + line.slice(charIndex + deleteLength);\n            docState.content = lines.join('\\\\n');\n          }\n        }\n        break;\n      case 'replace':\n        // Handle replace operation\n        break;\n    }\n\n    docState.edits.push(edit);\n    docState.version++;\n  }\n\n  private findClientByUserIdInSession(sessionId: string, userId: string): CollaborationClient | undefined {\n    return Array.from(this.clients.values())\n      .find(client => client.sessionId === sessionId && client.userId === userId);\n  }\n\n  private sendToClient(client: CollaborationClient, data: any) {\n    if (client.ws.readyState === WebSocket.OPEN) {\n      client.ws.send(JSON.stringify(data));\n    }\n  }\n\n  private broadcastToSession(sessionId: string, data: any, excludeClientId?: string) {\n    const sessionClients = Array.from(this.clients.values())\n      .filter(client => client.sessionId === sessionId && client.id !== excludeClientId);\n\n    sessionClients.forEach(client => {\n      this.sendToClient(client, data);\n    });\n  }\n\n  // Public API methods\n  async createSession(sessionData: InsertLiveCollaborationSession): Promise<LiveCollaborationSession> {\n    const session: LiveCollaborationSession = {\n      id: randomUUID(),\n      ...sessionData,\n      startedAt: new Date(),\n      endedAt: null,\n    };\n\n    this.sessions.set(session.id, session);\n    return session;\n  }\n\n  async endSession(sessionId: string): Promise<void> {\n    const session = this.sessions.get(sessionId);\n    if (session) {\n      session.status = 'ended';\n      session.endedAt = new Date();\n\n      // Disconnect all clients in this session\n      const sessionClients = Array.from(this.clients.values())\n        .filter(client => client.sessionId === sessionId);\n\n      sessionClients.forEach(client => {\n        this.sendToClient(client, {\n          type: 'session_ended',\n          reason: 'Host ended the session',\n        });\n        client.ws.close(1000, 'Session ended');\n      });\n    }\n  }\n\n  getActiveSessions(): LiveCollaborationSession[] {\n    return Array.from(this.sessions.values())\n      .filter(session => session.status === 'active');\n  }\n\n  getSessionParticipantCount(sessionId: string): number {\n    return Array.from(this.clients.values())\n      .filter(client => client.sessionId === sessionId).length;\n  }\n\n  // AI-powered collaboration suggestions\n  async generateCollaborationSuggestions(sessionId: string): Promise<Array<{\n    type: 'workflow' | 'communication' | 'code_quality' | 'productivity';\n    title: string;\n    description: string;\n    priority: 'low' | 'medium' | 'high';\n  }>> {\n    const participants = this.getSessionParticipants(sessionId);\n    const suggestions = [];\n\n    // Check for productivity patterns\n    if (participants.length > 1) {\n      const activeParticipants = participants.filter(p => \n        new Date().getTime() - p.lastActivity.getTime() < 5 * 60 * 1000 // 5 minutes\n      );\n\n      if (activeParticipants.length < participants.length / 2) {\n        suggestions.push({\n          type: 'productivity' as const,\n          title: 'Low Engagement Detected',\n          description: 'Some team members appear inactive. Consider a quick sync or break.',\n          priority: 'medium' as const,\n        });\n      }\n    }\n\n    // Check for code quality patterns\n    const typingParticipants = participants.filter(p => p.isTyping);\n    if (typingParticipants.length > 2) {\n      suggestions.push({\n        type: 'workflow' as const,\n        title: 'Multiple Concurrent Edits',\n        description: 'Multiple people are editing simultaneously. Consider assigning specific sections.',\n        priority: 'medium' as const,\n      });\n    }\n\n    // Communication suggestions\n    if (participants.length > 3) {\n      suggestions.push({\n        type: 'communication' as const,\n        title: 'Large Team Session',\n        description: 'Consider using voice chat or breaking into smaller groups for more effective collaboration.',\n        priority: 'low' as const,\n      });\n    }\n\n    return suggestions;\n  }\n}\n\nexport const realTimeCollaborationService = new RealTimeCollaborationService();","size_bytes":14611},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertJobSchema, insertSessionSchema, insertWorkspaceSchema, \n  insertWorkspaceMemberSchema, insertProjectSchema, insertProjectCollaboratorSchema,\n  JobStatus, WorkspaceStatus, ProjectStatus \n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { ibmQuantumService } from \"./ibm-quantum\";\nimport { openaiService } from \"./openai-service\";\n\n// Enhanced quantum simulation for educational purposes\nfunction generateQuantumResults(jobData: any) {\n  const { levelId, circuitCode, backend } = jobData;\n  \n  // Simulate different quantum states based on circuit type\n  if (circuitCode.includes('Bell') || (circuitCode.includes('h(0)') && circuitCode.includes('cx(0'))) {\n    // Bell state: should show |00⟩ and |11⟩ with roughly equal probability\n    return {\n      counts: {\n        '00': Math.floor(Math.random() * 100 + 450), // ~45-55% of shots\n        '11': Math.floor(Math.random() * 100 + 450), // ~45-55% of shots\n        '01': Math.floor(Math.random() * 20 + 10),   // ~1-3% noise\n        '10': Math.floor(Math.random() * 20 + 10)    // ~1-3% noise\n      },\n      success_probability: 0.95,\n      educational_note: \"Perfect Bell state shows entanglement between qubits!\"\n    };\n  } else if (circuitCode.includes('h(')) {\n    // Superposition state: should show equal distribution\n    return {\n      counts: {\n        '0': Math.floor(Math.random() * 100 + 450),\n        '1': Math.floor(Math.random() * 100 + 450)\n      },\n      success_probability: 0.92,\n      educational_note: \"Hadamard gate creates perfect superposition!\"\n    };\n  } else if (circuitCode.includes('x(')) {\n    // X gate: should flip the state\n    return {\n      counts: {\n        '1': Math.floor(Math.random() * 50 + 950), // ~95-100% in |1⟩\n        '0': Math.floor(Math.random() * 50 + 0)    // ~0-5% in |0⟩\n      },\n      success_probability: 0.98,\n      educational_note: \"X gate successfully flipped the qubit state!\"\n    };\n  }\n  \n  // Default: computational basis state\n  return {\n    counts: {\n      '00': Math.floor(Math.random() * 50 + 950),\n      '01': Math.floor(Math.random() * 25 + 10),\n      '10': Math.floor(Math.random() * 25 + 10),\n      '11': Math.floor(Math.random() * 25 + 5)\n    },\n    success_probability: 0.88,\n    educational_note: \"Great job! Your quantum circuit executed successfully.\"\n  };\n}\n\n// Generate default counts for demo purposes\nfunction generateDefaultCounts(jobId: string) {\n  // Seed random with jobId for consistency\n  const seed = jobId.split('').reduce((a, b) => a + b.charCodeAt(0), 0);\n  \n  if (seed % 3 === 0) {\n    return { '00': 487, '11': 501, '01': 18, '10': 18 }; // Bell state\n  } else if (seed % 3 === 1) {\n    return { '0': 512, '1': 512 }; // Perfect superposition\n  } else {\n    return { '1': 967, '0': 57 }; // X gate result\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Jobs endpoints\n  app.get(\"/api/jobs\", async (req, res) => {\n    try {\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 10;\n      const offset = (page - 1) * limit;\n\n      const allJobs = await storage.getJobs();\n      const totalJobs = allJobs.length;\n      const paginatedJobs = allJobs.slice(offset, offset + limit);\n\n      res.json({\n        jobs: paginatedJobs,\n        pagination: {\n          currentPage: page,\n          totalPages: Math.ceil(totalJobs / limit),\n          totalJobs,\n          limit\n        }\n      });\n    } catch (error) {\n      console.error(\"Error fetching jobs:\", error);\n      res.status(500).json({ error: \"Failed to fetch jobs\" });\n    }\n  });\n\n  app.get(\"/api/jobs/search\", async (req, res) => {\n    try {\n      const query = req.query.q as string;\n      if (!query) {\n        return res.status(400).json({ error: \"Search query is required\" });\n      }\n      const jobs = await storage.searchJobs(query);\n      res.json(jobs);\n    } catch (error) {\n      console.error(\"Error searching jobs:\", error);\n      res.status(500).json({ error: \"Search failed\" });\n    }\n  });\n\n  app.get(\"/api/jobs/status/:status\", async (req, res) => {\n    try {\n      const status = req.params.status as JobStatus;\n      const jobs = await storage.getJobsByStatus(status);\n      res.json(jobs);\n    } catch (error) {\n      console.error(`Error fetching jobs by status ${status}:`, error);\n      res.status(500).json({ error: \"Failed to fetch jobs by status\" });\n    }\n  });\n\n  app.get(\"/api/jobs/:id\", async (req, res) => {\n    try {\n      const job = await storage.getJobById(req.params.id);\n      if (!job) {\n        return res.status(404).json({ error: \"Job not found\" });\n      }\n      res.json(job);\n    } catch (error) {\n      console.error(`Error fetching job with ID ${req.params.id}:`, error);\n      res.status(500).json({ error: \"Failed to fetch job\" });\n    }\n  });\n\n  app.post(\"/api/jobs\", async (req, res) => {\n    try {\n      const jobData = insertJobSchema.parse(req.body);\n      const job = await storage.createJob(jobData);\n      res.status(201).json(job);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      console.error(\"Error creating job:\", error);\n      res.status(500).json({ error: \"Failed to create job\" });\n    }\n  });\n\n  app.patch(\"/api/jobs/:id/status\", async (req, res) => {\n    try {\n      const { status, error } = req.body;\n      const job = await storage.updateJobStatus(req.params.id, status, error);\n      if (!job) {\n        return res.status(404).json({ error: \"Job not found\" });\n      }\n      res.json(job);\n    } catch (error) {\n      console.error(`Error updating status for job ${req.params.id}:`, error);\n      res.status(500).json({ error: \"Failed to update job status\" });\n    }\n  });\n\n  app.delete(\"/api/jobs/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteJob(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: \"Job not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      console.error(`Error deleting job ${req.params.id}:`, error);\n      res.status(500).json({ error: \"Failed to delete job\" });\n    }\n  });\n\n  // Sessions endpoints\n  app.get(\"/api/sessions\", async (req, res) => {\n    try {\n      const sessions = await storage.getSessions();\n      res.json(sessions);\n    } catch (error) {\n      console.error(\"Error fetching sessions:\", error);\n      res.status(500).json({ error: \"Failed to fetch sessions\" });\n    }\n  });\n\n  app.post(\"/api/sessions\", async (req, res) => {\n    try {\n      const sessionData = insertSessionSchema.parse(req.body);\n      const session = await storage.createSession(sessionData);\n      res.status(201).json(session);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      console.error(\"Error creating session:\", error);\n      res.status(500).json({ error: \"Failed to create session\" });\n    }\n  });\n\n  // Backends endpoints\n  app.get(\"/api/backends\", async (req, res) => {\n    try {\n      const backends = await storage.getBackends();\n      res.json(backends);\n    } catch (error) {\n      console.error(\"Error fetching backends:\", error);\n      res.status(500).json({ error: \"Failed to fetch backends\" });\n    }\n  });\n\n  // Analytics endpoints\n  app.get(\"/api/analytics/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getJobStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching job stats:\", error);\n      res.status(500).json({ error: \"Failed to fetch job stats\" });\n    }\n  });\n\n  app.get(\"/api/analytics/trends\", async (req, res) => {\n    try {\n      // Simple trend data generation\n      const jobs = await storage.getJobs();\n      const last7Days = Array.from({ length: 7 }, (_, i) => {\n        const date = new Date();\n        date.setDate(date.getDate() - (6 - i));\n        return date.toISOString().split('T')[0];\n      });\n\n      const trends = last7Days.map(date => {\n        const dayJobs = jobs.filter(job =>\n          job.submissionTime.toISOString().split('T')[0] === date\n        );\n        return {\n          date,\n          count: dayJobs.length,\n          label: new Date(date).toLocaleDateString('en-US', { weekday: 'short' })\n        };\n      });\n\n      res.json(trends);\n    } catch (error) {\n      console.error(\"Error fetching trends:\", error);\n      res.status(500).json({ error: \"Failed to fetch trends\" });\n    }\n  });\n\n  // IBM Quantum Sync Status\n  app.get(\"/api/sync/ibm/status\", async (req, res) => {\n    try {\n      res.json({\n        configured: ibmQuantumService.isConfigured(),\n        status: ibmQuantumService.getApiStatus(),\n        lastSync: new Date().toISOString(),\n        endpoints: {\n          runtime: \"https://runtime.quantum-computing.ibm.com\",\n          auth: \"https://auth.quantum-computing.ibm.com/api\"\n        }\n      });\n    } catch (error) {\n      console.error(\"Error checking IBM Quantum status:\", error);\n      res.status(500).json({ error: \"Failed to check IBM Quantum status\" });\n    }\n  });\n\n  // Sync with IBM Quantum\n  app.post('/api/sync/ibm', async (req, res) => {\n    try {\n      if (!ibmQuantumService.isConfigured()) {\n        console.log('IBM Quantum API not configured, using simulated data');\n        return res.json({ \n          message: 'Using simulated data for demonstration',\n          configured: false\n        });\n      }\n\n      // This would trigger a manual sync in a real implementation\n      console.log('Manual IBM Quantum sync requested');\n      res.json({ \n        message: 'Sync initiated successfully',\n        configured: true\n      });\n    } catch (error) {\n      console.error('Sync error:', error);\n      res.status(500).json({ error: 'Failed to sync with IBM Quantum' });\n    }\n  });\n\n\n  // Real-time IBM Quantum data\n  app.get(\"/api/ibm-quantum/live\", async (req, res) => {\n    try {\n      if (!ibmQuantumService.isConfigured()) {\n        return res.status(400).json({ \n          error: \"IBM Quantum API not configured\",\n          details: \"Please add IBM_QUANTUM_API_TOKEN to your .env file\"\n        });\n      }\n\n      const [jobs, backends] = await Promise.all([\n        ibmQuantumService.getJobs(50),\n        ibmQuantumService.getBackends()\n      ]);\n\n      res.json({\n        timestamp: new Date().toISOString(),\n        jobs: jobs.map(job => ({\n          id: job.id,\n          name: job.name,\n          backend: job.backend,\n          status: job.status,\n          created: job.created,\n          qubits: job.qubits,\n          shots: job.shots\n        })),\n        backends: backends.map(backend => ({\n          name: backend.name,\n          status: backend.status,\n          qubits: backend.num_qubits,\n          queue: backend.pending_jobs\n        })),\n        summary: {\n          totalJobs: jobs.length,\n          runningJobs: jobs.filter(j => j.status === 'running').length,\n          queuedJobs: jobs.filter(j => j.status === 'queued').length,\n          availableBackends: backends.filter(b => b.status === 'online').length\n        }\n      });\n    } catch (error) {\n      console.error(\"Error fetching live IBM Quantum data:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch live data from IBM Quantum\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Export endpoints\n  app.get(\"/api/export/csv\", async (req, res) => {\n    try {\n      const jobs = await storage.getJobs();\n      const csvHeaders = \"Job ID,Backend,Status,Submitted,Duration\\n\";\n      const csvData = jobs.map(job =>\n        `${job.id},${job.backend},${job.status},${job.submissionTime.toISOString()},${job.duration || 0}`\n      ).join('\\n');\n\n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"quantum_jobs.csv\"');\n      res.send(csvHeaders + csvData);\n    } catch (error) {\n      console.error(\"Error exporting jobs to CSV:\", error);\n      res.status(500).json({ error: \"Failed to export CSV\" });\n    }\n  });\n\n  app.get(\"/api/export/json\", async (req, res) => {\n    try {\n      const jobs = await storage.getJobs();\n      res.setHeader('Content-Type', 'application/json');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"quantum_jobs.json\"');\n      res.json(jobs);\n    } catch (error) {\n      console.error(\"Error exporting jobs to JSON:\", error);\n      res.status(500).json({ error: \"Failed to export JSON\" });\n    }\n  });\n\n  // ==================== TEAMWORK API ROUTES ====================\n\n  // Workspace endpoints\n  app.get(\"/api/workspaces\", async (req, res) => {\n    try {\n      const workspaces = await storage.getWorkspaces();\n      res.json(workspaces);\n    } catch (error) {\n      console.error(\"Error fetching workspaces:\", error);\n      res.status(500).json({ error: \"Failed to fetch workspaces\" });\n    }\n  });\n\n  app.get(\"/api/workspaces/search\", async (req, res) => {\n    try {\n      const query = req.query.q as string;\n      if (!query) {\n        return res.status(400).json({ error: \"Search query is required\" });\n      }\n      const workspaces = await storage.searchWorkspaces(query);\n      res.json(workspaces);\n    } catch (error) {\n      console.error(\"Error searching workspaces:\", error);\n      res.status(500).json({ error: \"Search failed\" });\n    }\n  });\n\n  app.get(\"/api/workspaces/:id\", async (req, res) => {\n    try {\n      const workspace = await storage.getWorkspaceById(req.params.id);\n      if (!workspace) {\n        return res.status(404).json({ error: \"Workspace not found\" });\n      }\n      res.json(workspace);\n    } catch (error) {\n      console.error(`Error fetching workspace with ID ${req.params.id}:`, error);\n      res.status(500).json({ error: \"Failed to fetch workspace\" });\n    }\n  });\n\n  app.post(\"/api/workspaces\", async (req, res) => {\n    try {\n      const workspaceData = insertWorkspaceSchema.parse(req.body);\n      const workspace = await storage.createWorkspace(workspaceData);\n      res.status(201).json(workspace);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      console.error(\"Error creating workspace:\", error);\n      res.status(500).json({ error: \"Failed to create workspace\" });\n    }\n  });\n\n  app.patch(\"/api/workspaces/:id\", async (req, res) => {\n    try {\n      const workspace = await storage.updateWorkspace(req.params.id, req.body);\n      if (!workspace) {\n        return res.status(404).json({ error: \"Workspace not found\" });\n      }\n      res.json(workspace);\n    } catch (error) {\n      console.error(`Error updating workspace ${req.params.id}:`, error);\n      res.status(500).json({ error: \"Failed to update workspace\" });\n    }\n  });\n\n  app.delete(\"/api/workspaces/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteWorkspace(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: \"Workspace not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      console.error(`Error deleting workspace ${req.params.id}:`, error);\n      res.status(500).json({ error: \"Failed to delete workspace\" });\n    }\n  });\n\n  // Workspace Member endpoints\n  app.get(\"/api/workspaces/:workspaceId/members\", async (req, res) => {\n    try {\n      const members = await storage.getWorkspaceMembers(req.params.workspaceId);\n      res.json(members);\n    } catch (error) {\n      console.error(\"Error fetching workspace members:\", error);\n      res.status(500).json({ error: \"Failed to fetch workspace members\" });\n    }\n  });\n\n  app.post(\"/api/workspaces/:workspaceId/members\", async (req, res) => {\n    try {\n      const memberData = insertWorkspaceMemberSchema.parse({\n        ...req.body,\n        workspaceId: req.params.workspaceId\n      });\n      const member = await storage.addWorkspaceMember(memberData);\n      res.status(201).json(member);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      console.error(\"Error adding workspace member:\", error);\n      res.status(500).json({ error: \"Failed to add workspace member\" });\n    }\n  });\n\n  app.patch(\"/api/workspace-members/:id\", async (req, res) => {\n    try {\n      const member = await storage.updateWorkspaceMember(req.params.id, req.body);\n      if (!member) {\n        return res.status(404).json({ error: \"Workspace member not found\" });\n      }\n      res.json(member);\n    } catch (error) {\n      console.error(`Error updating workspace member ${req.params.id}:`, error);\n      res.status(500).json({ error: \"Failed to update workspace member\" });\n    }\n  });\n\n  app.delete(\"/api/workspace-members/:id\", async (req, res) => {\n    try {\n      const success = await storage.removeWorkspaceMember(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: \"Workspace member not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      console.error(`Error removing workspace member ${req.params.id}:`, error);\n      res.status(500).json({ error: \"Failed to remove workspace member\" });\n    }\n  });\n\n  // Project endpoints\n  app.get(\"/api/projects\", async (req, res) => {\n    try {\n      const projects = await storage.getProjects();\n      res.json(projects);\n    } catch (error) {\n      console.error(\"Error fetching projects:\", error);\n      res.status(500).json({ error: \"Failed to fetch projects\" });\n    }\n  });\n\n  app.get(\"/api/projects/search\", async (req, res) => {\n    try {\n      const query = req.query.q as string;\n      if (!query) {\n        return res.status(400).json({ error: \"Search query is required\" });\n      }\n      const projects = await storage.searchProjects(query);\n      res.json(projects);\n    } catch (error) {\n      console.error(\"Error searching projects:\", error);\n      res.status(500).json({ error: \"Search failed\" });\n    }\n  });\n\n  app.get(\"/api/workspaces/:workspaceId/projects\", async (req, res) => {\n    try {\n      const projects = await storage.getProjectsByWorkspace(req.params.workspaceId);\n      res.json(projects);\n    } catch (error) {\n      console.error(\"Error fetching workspace projects:\", error);\n      res.status(500).json({ error: \"Failed to fetch workspace projects\" });\n    }\n  });\n\n  app.get(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const project = await storage.getProjectById(req.params.id);\n      if (!project) {\n        return res.status(404).json({ error: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      console.error(`Error fetching project with ID ${req.params.id}:`, error);\n      res.status(500).json({ error: \"Failed to fetch project\" });\n    }\n  });\n\n  app.post(\"/api/projects\", async (req, res) => {\n    try {\n      const projectData = insertProjectSchema.parse(req.body);\n      const project = await storage.createProject(projectData);\n      res.status(201).json(project);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      console.error(\"Error creating project:\", error);\n      res.status(500).json({ error: \"Failed to create project\" });\n    }\n  });\n\n  app.patch(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const project = await storage.updateProject(req.params.id, req.body);\n      if (!project) {\n        return res.status(404).json({ error: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      console.error(`Error updating project ${req.params.id}:`, error);\n      res.status(500).json({ error: \"Failed to update project\" });\n    }\n  });\n\n  app.delete(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteProject(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: \"Project not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      console.error(`Error deleting project ${req.params.id}:`, error);\n      res.status(500).json({ error: \"Failed to delete project\" });\n    }\n  });\n\n  // Project Collaborator endpoints\n  app.get(\"/api/projects/:projectId/collaborators\", async (req, res) => {\n    try {\n      const collaborators = await storage.getProjectCollaborators(req.params.projectId);\n      res.json(collaborators);\n    } catch (error) {\n      console.error(\"Error fetching project collaborators:\", error);\n      res.status(500).json({ error: \"Failed to fetch project collaborators\" });\n    }\n  });\n\n  app.post(\"/api/projects/:projectId/collaborators\", async (req, res) => {\n    try {\n      const collaboratorData = insertProjectCollaboratorSchema.parse({\n        ...req.body,\n        projectId: req.params.projectId\n      });\n      const collaborator = await storage.addProjectCollaborator(collaboratorData);\n      res.status(201).json(collaborator);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      console.error(\"Error adding project collaborator:\", error);\n      res.status(500).json({ error: \"Failed to add project collaborator\" });\n    }\n  });\n\n  app.patch(\"/api/project-collaborators/:id\", async (req, res) => {\n    try {\n      const collaborator = await storage.updateProjectCollaborator(req.params.id, req.body);\n      if (!collaborator) {\n        return res.status(404).json({ error: \"Project collaborator not found\" });\n      }\n      res.json(collaborator);\n    } catch (error) {\n      console.error(`Error updating project collaborator ${req.params.id}:`, error);\n      res.status(500).json({ error: \"Failed to update project collaborator\" });\n    }\n  });\n\n  app.delete(\"/api/project-collaborators/:id\", async (req, res) => {\n    try {\n      const success = await storage.removeProjectCollaborator(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: \"Project collaborator not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      console.error(`Error removing project collaborator ${req.params.id}:`, error);\n      res.status(500).json({ error: \"Failed to remove project collaborator\" });\n    }\n  });\n\n  // Quantum Quest job submission schema\n  const quantumJobSubmissionSchema = z.object({\n    levelId: z.string().min(1, \"Level ID is required\"),\n    circuitCode: z.string().min(1, \"Circuit code is required\"),\n    backend: z.string().default(\"ibm_qasm_simulator\"),\n    shots: z.number().int().min(1).max(100000).default(1024),\n    metadata: z.object({\n      challengeType: z.string(),\n      expectedResult: z.string(),\n      learningObjective: z.string()\n    }).optional()\n  });\n\n  // Quantum Quest job submission endpoint\n  app.post(\"/api/quantum/submit-job\", async (req, res) => {\n    try {\n      const validatedData = quantumJobSubmissionSchema.parse(req.body);\n      \n      // Create a quantum job entry\n      const quantumJob = {\n        id: `quest_${validatedData.levelId}_${Date.now()}`,\n        name: `Quantum Quest: ${validatedData.levelId}`,\n        status: \"queued\" as const,\n        backend: validatedData.backend,\n        qubits: 2,\n        shots: validatedData.shots,\n        program: validatedData.circuitCode,\n        tags: [\"quantum-quest\", validatedData.levelId],\n        results: {\n          metadata: {\n            ...validatedData.metadata,\n            source: \"quantum-quest\",\n            circuitCode: validatedData.circuitCode\n          }\n        }\n      };\n\n      // Add to job storage\n      const job = await storage.createJob(quantumJob);\n\n      \n      // Simulate realistic quantum job execution\n      setTimeout(async () => {\n        try {\n          const executionResults = generateQuantumResults(validatedData);\n          // Update job with results by updating the whole job record\n          const updatedJob = await storage.getJobById(job.id);\n          if (updatedJob) {\n            updatedJob.results = executionResults;\n            updatedJob.status = \"done\";\n            updatedJob.endTime = new Date();\n            updatedJob.duration = Math.floor(Math.random() * 3 + 2); // 2-5 seconds\n          }\n          await storage.updateJobStatus(job.id, \"done\");\n        } catch (error) {\n          await storage.updateJobStatus(job.id, \"failed\", \"Quantum execution simulation failed\");\n        }\n      }, Math.random() * 3000 + 2000); // 2-5 seconds realistic timing\n\n      res.json({ success: true, jobId: job.id, id: job.id, status: job.status });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      console.error(\"Failed to submit quantum quest job:\", error);\n      res.status(500).json({ error: \"Failed to submit quantum job\" });\n    }\n  });\n\n  // Enhanced quantum quest job status with realistic simulation\n  app.get(\"/api/quantum/jobs/:jobId\", async (req, res) => {\n    try {\n      const job = await storage.getJobById(req.params.jobId);\n      if (!job) {\n        return res.status(404).json({ error: \"Job not found\" });\n      }\n      \n      // Add quantum-specific fields for better educational experience\n      const jobResults = job.results as any || {};\n      const quantumJob = {\n        ...job,\n        jobId: job.id,\n        results: job.results ? jobResults : {\n          counts: generateDefaultCounts(req.params.jobId),\n          metadata: jobResults.metadata || {}\n        },\n        duration: job.duration || Math.random() * 2 + 0.5,\n        qubits: job.qubits || 2,\n        shots: job.shots || 1024\n      };\n      \n      res.json(quantumJob);\n    } catch (error) {\n      console.error(`Error fetching quantum job ${req.params.jobId}:`, error);\n      res.status(500).json({ error: \"Failed to fetch job status\" });\n    }\n  });\n\n  // ==================== AI ASSISTANT API ROUTES ====================\n  \n  // Generate job suggestions\n  app.post(\"/api/ai/job-suggestions\", async (req, res) => {\n    try {\n      const { qubits, shots, backend, program } = req.body;\n      const suggestions = await openaiService.generateJobSuggestions({\n        qubits: parseInt(qubits),\n        shots: parseInt(shots),\n        backend,\n        program\n      });\n      res.json(suggestions);\n    } catch (error) {\n      console.error(\"Error generating job suggestions:\", error);\n      res.status(500).json({ error: \"Failed to generate AI suggestions\" });\n    }\n  });\n\n  // Analyze failed job\n  app.post(\"/api/ai/analyze-failure/:jobId\", async (req, res) => {\n    try {\n      const job = await storage.getJobById(req.params.jobId);\n      if (!job) {\n        return res.status(404).json({ error: \"Job not found\" });\n      }\n      \n      if (job.status !== 'failed') {\n        return res.status(400).json({ error: \"Job has not failed\" });\n      }\n\n      const analysis = await openaiService.analyzeFailedJob(job);\n      res.json(analysis);\n    } catch (error) {\n      console.error(\"Error analyzing failed job:\", error);\n      res.status(500).json({ error: \"Failed to analyze failed job\" });\n    }\n  });\n\n  // Get circuit improvement instructions\n  app.post(\"/api/ai/circuit-instructions/:jobId\", async (req, res) => {\n    try {\n      const job = await storage.getJobById(req.params.jobId);\n      if (!job) {\n        return res.status(404).json({ error: \"Job not found\" });\n      }\n\n      const instructions = await openaiService.getCircuitInstructions(job);\n      res.json({ instructions });\n    } catch (error) {\n      console.error(\"Error getting circuit instructions:\", error);\n      res.status(500).json({ error: \"Failed to get circuit instructions\" });\n    }\n  });\n\n  // Get guided improvements\n  app.post(\"/api/ai/guided-improvements/:jobId\", async (req, res) => {\n    try {\n      const job = await storage.getJobById(req.params.jobId);\n      if (!job) {\n        return res.status(404).json({ error: \"Job not found\" });\n      }\n\n      const improvements = await openaiService.getGuidedImprovements(job);\n      res.json(improvements);\n    } catch (error) {\n      console.error(\"Error getting guided improvements:\", error);\n      res.status(500).json({ error: \"Failed to get guided improvements\" });\n    }\n  });\n\n  // Generate circuit code\n  app.post(\"/api/ai/generate-circuit\", async (req, res) => {\n    try {\n      const { description, qubits } = req.body;\n      const circuitCode = await openaiService.generateCircuitCode(description, parseInt(qubits));\n      res.json({ circuitCode });\n    } catch (error) {\n      console.error(\"Error generating circuit code:\", error);\n      res.status(500).json({ error: \"Failed to generate circuit code\" });\n    }\n  });\n\n  // General AI Chat endpoint\n  app.post(\"/api/ai/chat\", async (req, res) => {\n    try {\n      console.log(\"AI Chat endpoint hit with body:\", req.body);\n      const { message } = req.body;\n      if (!message) {\n        console.log(\"No message provided\");\n        return res.status(400).json({ error: \"Message is required\" });\n      }\n      \n      console.log(\"Calling OpenAI service with message:\", message);\n      const response = await openaiService.chat(message);\n      console.log(\"OpenAI service responded:\", response);\n      res.json({ response });\n    } catch (error) {\n      console.error(\"Error in AI chat:\", error);\n      res.status(500).json({ error: \"Failed to process chat message\" });\n    }\n  });\n\n  // Check AI service status\n  app.get(\"/api/ai/status\", async (req, res) => {\n    try {\n      res.json({\n        configured: openaiService.isServiceConfigured(),\n        status: openaiService.isServiceConfigured() ? \"✅ AI Assistant Ready\" : \"⚠️  OpenAI API not configured\",\n        features: [\n          \"Job creation suggestions\",\n          \"Failure analysis\",\n          \"Circuit code generation\",\n          \"Optimization recommendations\"\n        ]\n      });\n    } catch (error) {\n      console.error(\"Error checking AI status:\", error);\n      res.status(500).json({ error: \"Failed to check AI status\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":30122},"server/smart-notification-service.ts":{"content":"import type { \n  Notification, InsertNotification, UserProfile, Job, Project, \n  Workspace, Achievement, Challenge, ChallengeParticipant,\n  LiveCollaborationSession, ChatMessage\n} from '@shared/schema';\nimport { randomUUID } from 'crypto';\nimport { realTimeCollaborationService } from './real-time-collaboration-service';\nimport { gamificationService } from './gamification-service';\n\nexport class SmartNotificationService {\n  private notifications: Map<string, Notification> = new Map();\n  private userPreferences: Map<string, NotificationPreferences> = new Map();\n  private activeSubscriptions: Map<string, Set<string>> = new Map(); // userId -> Set of subscription types\n\n  constructor() {\n    // Initialize with default notification channels and preferences\n    this.initializeNotificationChannels();\n  }\n\n  private initializeNotificationChannels() {\n    // Set up periodic notification processing\n    setInterval(() => {\n      this.processContextualNotifications();\n    }, 30 * 1000); // Every 30 seconds\n\n    // Set up intelligent batching\n    setInterval(() => {\n      this.processBatchedNotifications();\n    }, 5 * 60 * 1000); // Every 5 minutes\n  }\n\n  // Context-Aware Notification Generation\n  async generateSmartNotifications(context: {\n    eventType: string;\n    data: any;\n    userId?: string;\n    workspaceId?: string;\n    urgency: 'low' | 'medium' | 'high' | 'critical';\n  }): Promise<Notification[]> {\n    const notifications: Notification[] = [];\n\n    switch (context.eventType) {\n      case 'job_completed':\n        notifications.push(...await this.generateJobCompletionNotifications(context));\n        break;\n      case 'collaboration_request':\n        notifications.push(...await this.generateCollaborationNotifications(context));\n        break;\n      case 'achievement_unlocked':\n        notifications.push(...await this.generateAchievementNotifications(context));\n        break;\n      case 'project_milestone':\n        notifications.push(...await this.generateProjectMilestoneNotifications(context));\n        break;\n      case 'team_insight':\n        notifications.push(...await this.generateTeamInsightNotifications(context));\n        break;\n      case 'hardware_available':\n        notifications.push(...await this.generateHardwareNotifications(context));\n        break;\n      case 'mentor_request':\n        notifications.push(...await this.generateMentorshipNotifications(context));\n        break;\n      case 'challenge_update':\n        notifications.push(...await this.generateChallengeNotifications(context));\n        break;\n      default:\n        console.warn(`Unknown event type: ${context.eventType}`);\n    }\n\n    // Store and route notifications\n    for (const notification of notifications) {\n      await this.storeAndRouteNotification(notification);\n    }\n\n    return notifications;\n  }\n\n  private async generateJobCompletionNotifications(context: any): Promise<Notification[]> {\n    const notifications: Notification[] = [];\n    const job = context.data as Job;\n\n    if (job.status === 'done') {\n      // Success notification for job owner\n      notifications.push({\n        id: randomUUID(),\n        userId: job.userId,\n        type: 'success',\n        title: `✅ Job \"${job.name}\" completed successfully!`,\n        message: `Your quantum job finished with ${job.shots} shots on ${job.backend}. View results to see the exciting outcomes!`,\n        data: {\n          jobId: job.id,\n          backend: job.backend,\n          runtime: job.duration,\n          action: 'view_results',\n        },\n        priority: 'medium',\n        channels: ['web', 'email'],\n        isRead: false,\n        scheduledFor: null,\n        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days\n        createdAt: new Date(),\n      });\n\n      // Notify collaborators if it's a team project\n      if (context.workspaceId) {\n        const workspaceMembers = await this.getWorkspaceMembers(context.workspaceId);\n        for (const member of workspaceMembers) {\n          if (member.userId !== job.userId) {\n            notifications.push({\n              id: randomUUID(),\n              userId: member.userId,\n              type: 'info',\n              title: `🎯 Team job completed by ${job.userId}`,\n              message: `\"${job.name}\" has finished running. Check out the results and contribute your insights!`,\n              data: {\n                jobId: job.id,\n                completedBy: job.userId,\n                workspaceId: context.workspaceId,\n                action: 'view_team_results',\n              },\n              priority: 'low',\n              channels: ['web'],\n              isRead: false,\n              scheduledFor: null,\n              expiresAt: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // 3 days\n              createdAt: new Date(),\n            });\n          }\n        }\n      }\n    } else if (job.status === 'failed') {\n      // Error notification with smart troubleshooting\n      const troubleshootingTips = await this.generateTroubleshootingTips(job.error || 'Unknown error');\n      \n      notifications.push({\n        id: randomUUID(),\n        userId: job.userId,\n        type: 'error',\n        title: `❌ Job \"${job.name}\" encountered an issue`,\n        message: `Don't worry! Here are some suggestions to resolve this: ${troubleshootingTips.slice(0, 2).join(', ')}`,\n        data: {\n          jobId: job.id,\n          error: job.error,\n          troubleshootingTips,\n          action: 'troubleshoot',\n        },\n        priority: 'high',\n        channels: ['web', 'email'],\n        isRead: false,\n        scheduledFor: null,\n        expiresAt: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000), // 14 days\n        createdAt: new Date(),\n      });\n    }\n\n    return notifications;\n  }\n\n  private async generateCollaborationNotifications(context: any): Promise<Notification[]> {\n    const notifications: Notification[] = [];\n    const { requesterId, targetUserId, projectId, type } = context.data;\n\n    // Collaboration request notification\n    notifications.push({\n      id: randomUUID(),\n      userId: targetUserId,\n      type: 'collaboration',\n      title: `🤝 Collaboration invitation`,\n      message: `${requesterId} would like to collaborate on an exciting quantum project. Join the team!`,\n      data: {\n        requesterId,\n        projectId,\n        collaborationType: type,\n        action: 'accept_collaboration',\n      },\n      priority: 'medium',\n      channels: ['web', 'email'],\n      isRead: false,\n      scheduledFor: null,\n      expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days\n      createdAt: new Date(),\n    });\n\n    return notifications;\n  }\n\n  private async generateAchievementNotifications(context: any): Promise<Notification[]> {\n    const notifications: Notification[] = [];\n    const { userId, achievementId } = context.data;\n\n    const achievement = await this.getAchievement(achievementId);\n    if (!achievement) return notifications;\n\n    // Achievement unlock notification\n    notifications.push({\n      id: randomUUID(),\n      userId,\n      type: 'achievement',\n      title: `🏆 Achievement Unlocked: ${achievement.name}!`,\n      message: `${achievement.description} You've earned ${achievement.points} points! Keep up the excellent work!`,\n      data: {\n        achievementId,\n        points: achievement.points,\n        rarity: achievement.rarity,\n        action: 'view_achievement',\n      },\n      priority: achievement.rarity === 'legendary' ? 'high' : 'medium',\n      channels: ['web', 'push'],\n      isRead: false,\n      scheduledFor: null,\n      expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days\n      createdAt: new Date(),\n    });\n\n    // Notify team members for significant achievements\n    if (achievement.rarity === 'epic' || achievement.rarity === 'legendary') {\n      const userWorkspaces = await this.getUserWorkspaces(userId);\n      for (const workspace of userWorkspaces) {\n        const members = await this.getWorkspaceMembers(workspace.id);\n        for (const member of members) {\n          if (member.userId !== userId) {\n            notifications.push({\n              id: randomUUID(),\n              userId: member.userId,\n              type: 'team_celebration',\n              title: `🎉 Team member achieved ${achievement.name}!`,\n              message: `${userId} just unlocked a ${achievement.rarity} achievement! Congratulate them on this amazing milestone!`,\n              data: {\n                achieverId: userId,\n                achievementId,\n                workspaceId: workspace.id,\n                action: 'congratulate',\n              },\n              priority: 'low',\n              channels: ['web'],\n              isRead: false,\n              scheduledFor: null,\n              expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days\n              createdAt: new Date(),\n            });\n          }\n        }\n      }\n    }\n\n    return notifications;\n  }\n\n  private async generateProjectMilestoneNotifications(context: any): Promise<Notification[]> {\n    const notifications: Notification[] = [];\n    const { projectId, milestone, progress, workspaceId } = context.data;\n\n    const project = await this.getProject(projectId);\n    if (!project) return notifications;\n\n    // Milestone notification for project owner\n    notifications.push({\n      id: randomUUID(),\n      userId: project.ownerId,\n      type: 'milestone',\n      title: `🚀 Project milestone reached!`,\n      message: `\"${project.name}\" has reached ${milestone}! Your project is ${progress}% complete. Keep pushing forward!`,\n      data: {\n        projectId,\n        milestone,\n        progress,\n        action: 'view_project',\n      },\n      priority: 'medium',\n      channels: ['web', 'push'],\n      isRead: false,\n      scheduledFor: null,\n      expiresAt: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000), // 14 days\n      createdAt: new Date(),\n    });\n\n    // Notify team members\n    if (workspaceId) {\n      const members = await this.getWorkspaceMembers(workspaceId);\n      for (const member of members) {\n        if (member.userId !== project.ownerId) {\n          notifications.push({\n            id: randomUUID(),\n            userId: member.userId,\n            type: 'team_progress',\n            title: `📈 Team project progress update`,\n            message: `Great news! \"${project.name}\" just hit ${milestone}. The team effort is paying off!`,\n            data: {\n              projectId,\n              milestone,\n              progress,\n              workspaceId,\n              action: 'view_team_project',\n            },\n            priority: 'low',\n            channels: ['web'],\n            isRead: false,\n            scheduledFor: null,\n            expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days\n            createdAt: new Date(),\n          });\n        }\n      }\n    }\n\n    return notifications;\n  }\n\n  private async generateTeamInsightNotifications(context: any): Promise<Notification[]> {\n    const notifications: Notification[] = [];\n    const { workspaceId, insightType, insight, targetUsers } = context.data;\n\n    for (const userId of targetUsers) {\n      let title = '';\n      let message = '';\n      let priority: 'low' | 'medium' | 'high' = 'medium';\n\n      switch (insightType) {\n        case 'optimization_opportunity':\n          title = '⚡ Optimization opportunity detected';\n          message = `AI analysis found a way to improve your team's performance: ${insight}`;\n          priority = 'medium';\n          break;\n        case 'collaboration_suggestion':\n          title = '🧠 Smart collaboration suggestion';\n          message = `Based on your team dynamics: ${insight}`;\n          priority = 'low';\n          break;\n        case 'breakthrough_prediction':\n          title = '🔬 Breakthrough opportunity ahead';\n          message = `Your team is positioned for a major discovery: ${insight}`;\n          priority = 'high';\n          break;\n        default:\n          title = '💡 Team insight';\n          message = insight;\n      }\n\n      notifications.push({\n        id: randomUUID(),\n        userId,\n        type: 'insight',\n        title,\n        message,\n        data: {\n          workspaceId,\n          insightType,\n          insight,\n          action: 'view_insight',\n        },\n        priority,\n        channels: ['web'],\n        isRead: false,\n        scheduledFor: null,\n        expiresAt: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000), // 14 days\n        createdAt: new Date(),\n      });\n    }\n\n    return notifications;\n  }\n\n  private async generateHardwareNotifications(context: any): Promise<Notification[]> {\n    const notifications: Notification[] = [];\n    const { backend, availability, targetUsers } = context.data;\n\n    for (const userId of targetUsers) {\n      notifications.push({\n        id: randomUUID(),\n        userId,\n        type: 'hardware',\n        title: `⚙️ ${backend} is now available!`,\n        message: `Perfect timing! The quantum backend you've been waiting for is ready. Submit your jobs now for faster processing.`,\n        data: {\n          backend,\n          availability,\n          action: 'submit_job',\n        },\n        priority: 'medium',\n        channels: ['web', 'push'],\n        isRead: false,\n        scheduledFor: null,\n        expiresAt: new Date(Date.now() + 2 * 60 * 60 * 1000), // 2 hours\n        createdAt: new Date(),\n      });\n    }\n\n    return notifications;\n  }\n\n  private async generateMentorshipNotifications(context: any): Promise<Notification[]> {\n    const notifications: Notification[] = [];\n    const { mentorId, menteeId, type, topic } = context.data;\n\n    if (type === 'request') {\n      // Mentor request notification\n      notifications.push({\n        id: randomUUID(),\n        userId: mentorId,\n        type: 'mentorship',\n        title: `🎓 Mentorship request`,\n        message: `A team member needs guidance on ${topic}. Share your expertise and help them grow!`,\n        data: {\n          menteeId,\n          topic,\n          action: 'accept_mentorship',\n        },\n        priority: 'medium',\n        channels: ['web', 'email'],\n        isRead: false,\n        scheduledFor: null,\n        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days\n        createdAt: new Date(),\n      });\n    } else if (type === 'accepted') {\n      // Mentorship accepted notification\n      notifications.push({\n        id: randomUUID(),\n        userId: menteeId,\n        type: 'mentorship',\n        title: `🤝 Mentorship accepted!`,\n        message: `Great news! Your mentor is ready to help you with ${topic}. Start your learning journey!`,\n        data: {\n          mentorId,\n          topic,\n          action: 'start_session',\n        },\n        priority: 'high',\n        channels: ['web', 'push'],\n        isRead: false,\n        scheduledFor: null,\n        expiresAt: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // 3 days\n        createdAt: new Date(),\n      });\n    }\n\n    return notifications;\n  }\n\n  private async generateChallengeNotifications(context: any): Promise<Notification[]> {\n    const notifications: Notification[] = [];\n    const { challengeId, participantId, updateType } = context.data;\n\n    const challenge = await this.getChallenge(challengeId);\n    if (!challenge) return notifications;\n\n    switch (updateType) {\n      case 'new_challenge':\n        // Notify all eligible users about new challenge\n        const eligibleUsers = await this.getEligibleUsersForChallenge(challengeId);\n        for (const userId of eligibleUsers) {\n          notifications.push({\n            id: randomUUID(),\n            userId,\n            type: 'challenge',\n            title: `🎯 New challenge: ${challenge.name}`,\n            message: `A perfect challenge for your skill level just launched! Join now and test your quantum skills.`,\n            data: {\n              challengeId,\n              difficulty: challenge.difficulty,\n              action: 'join_challenge',\n            },\n            priority: 'medium',\n            channels: ['web'],\n            isRead: false,\n            scheduledFor: null,\n            expiresAt: challenge.endDate,\n            createdAt: new Date(),\n          });\n        }\n        break;\n\n      case 'progress_milestone':\n        notifications.push({\n          id: randomUUID(),\n          userId: participantId!,\n          type: 'challenge',\n          title: `🏃 Challenge progress milestone!`,\n          message: `You're making excellent progress in \"${challenge.name}\"! Keep up the momentum!`,\n          data: {\n            challengeId,\n            progress: context.data.progress,\n            action: 'view_progress',\n          },\n          priority: 'low',\n          channels: ['web'],\n          isRead: false,\n          scheduledFor: null,\n          expiresAt: challenge.endDate,\n          createdAt: new Date(),\n        });\n        break;\n\n      case 'completion':\n        notifications.push({\n          id: randomUUID(),\n          userId: participantId!,\n          type: 'challenge',\n          title: `🏆 Challenge completed!`,\n          message: `Congratulations! You've successfully completed \"${challenge.name}\". Check your rewards!`,\n          data: {\n            challengeId,\n            score: context.data.score,\n            action: 'view_rewards',\n          },\n          priority: 'high',\n          channels: ['web', 'push'],\n          isRead: false,\n          scheduledFor: null,\n          expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days\n          createdAt: new Date(),\n        });\n        break;\n    }\n\n    return notifications;\n  }\n\n  // Intelligent Batching and Scheduling\n  private async processBatchedNotifications(): Promise<void> {\n    const now = new Date();\n    \n    // Group notifications by user and type for batching\n    const batchGroups: Record<string, Notification[]> = {};\n    \n    for (const notification of this.notifications.values()) {\n      if (notification.scheduledFor && notification.scheduledFor <= now && !notification.isRead) {\n        const key = `${notification.userId}_${notification.type}`;\n        if (!batchGroups[key]) {\n          batchGroups[key] = [];\n        }\n        batchGroups[key].push(notification);\n      }\n    }\n\n    // Process batched notifications\n    for (const [key, notifications] of Object.entries(batchGroups)) {\n      if (notifications.length > 1) {\n        await this.createBatchedNotification(notifications);\n      } else {\n        await this.sendSingleNotification(notifications[0]);\n      }\n    }\n  }\n\n  private async createBatchedNotification(notifications: Notification[]): Promise<void> {\n    const userId = notifications[0].userId;\n    const type = notifications[0].type;\n    \n    const batchedNotification: Notification = {\n      id: randomUUID(),\n      userId,\n      type: 'batch',\n      title: `📬 ${notifications.length} ${type} updates`,\n      message: `You have ${notifications.length} new ${type} notifications. Tap to view all updates.`,\n      data: {\n        batchedNotifications: notifications.map(n => n.id),\n        count: notifications.length,\n        action: 'view_batch',\n      },\n      priority: 'medium',\n      channels: ['web', 'push'],\n      isRead: false,\n      scheduledFor: null,\n      expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days\n      createdAt: new Date(),\n    };\n\n    await this.storeAndRouteNotification(batchedNotification);\n\n    // Mark original notifications as batched\n    for (const notification of notifications) {\n      notification.data = { ...notification.data, batched: true };\n    }\n  }\n\n  private async sendSingleNotification(notification: Notification): Promise<void> {\n    // Send through appropriate channels\n    for (const channel of notification.channels) {\n      await this.sendThroughChannel(notification, channel);\n    }\n  }\n\n  private async sendThroughChannel(notification: Notification, channel: string): Promise<void> {\n    switch (channel) {\n      case 'web':\n        // Real-time web notification (handled by frontend)\n        break;\n      case 'email':\n        // Email notification (would integrate with email service)\n        console.log(`Email notification sent to ${notification.userId}: ${notification.title}`);\n        break;\n      case 'push':\n        // Push notification (would integrate with push service)\n        console.log(`Push notification sent to ${notification.userId}: ${notification.title}`);\n        break;\n      default:\n        console.warn(`Unknown notification channel: ${channel}`);\n    }\n  }\n\n  // Context-Aware Processing\n  private async processContextualNotifications(): Promise<void> {\n    // Check for time-sensitive contexts\n    await this.checkDeadlineReminders();\n    await this.checkCollaborationOpportunities();\n    await this.checkPerformanceAnomalies();\n  }\n\n  private async checkDeadlineReminders(): Promise<void> {\n    const now = new Date();\n    const oneDayFromNow = new Date(now.getTime() + 24 * 60 * 60 * 1000);\n\n    // Check for upcoming challenge deadlines\n    const challenges = await this.getActiveChallenges();\n    for (const challenge of challenges) {\n      if (challenge.endDate <= oneDayFromNow && challenge.endDate > now) {\n        await this.generateSmartNotifications({\n          eventType: 'deadline_reminder',\n          data: { challengeId: challenge.id, timeRemaining: '24 hours' },\n          urgency: 'high',\n        });\n      }\n    }\n  }\n\n  private async checkCollaborationOpportunities(): Promise<void> {\n    // Look for users who might benefit from collaboration\n    // This would use AI analysis to identify collaboration patterns\n    console.log('Checking for collaboration opportunities...');\n  }\n\n  private async checkPerformanceAnomalies(): Promise<void> {\n    // Monitor for unusual patterns that might need attention\n    console.log('Checking for performance anomalies...');\n  }\n\n  // Troubleshooting Assistant\n  private async generateTroubleshootingTips(error: string): Promise<string[]> {\n    const tips = [];\n\n    if (error.toLowerCase().includes('timeout')) {\n      tips.push('Try reducing the number of shots or circuit complexity');\n      tips.push('Consider using a different backend with shorter queue times');\n      tips.push('Check if the backend is experiencing high traffic');\n    } else if (error.toLowerCase().includes('calibration')) {\n      tips.push('Wait for the next calibration cycle and retry');\n      tips.push('Try a different backend with recent calibration');\n      tips.push('Consider using error mitigation techniques');\n    } else if (error.toLowerCase().includes('gate')) {\n      tips.push('Review your circuit for unsupported gate operations');\n      tips.push('Check the backend\\'s gate set compatibility');\n      tips.push('Try decomposing complex gates into supported primitives');\n    } else {\n      tips.push('Review the job parameters and circuit design');\n      tips.push('Check the documentation for similar issues');\n      tips.push('Consider reaching out to the community for help');\n    }\n\n    return tips;\n  }\n\n  // Notification Management\n  private async storeAndRouteNotification(notification: Notification): Promise<void> {\n    this.notifications.set(notification.id, notification);\n\n    // Check user preferences and route accordingly\n    const preferences = this.getUserNotificationPreferences(notification.userId);\n    \n    if (this.shouldSendImmediately(notification, preferences)) {\n      await this.sendSingleNotification(notification);\n    } else {\n      // Schedule for batching\n      notification.scheduledFor = this.calculateScheduledTime(notification, preferences);\n    }\n  }\n\n  private getUserNotificationPreferences(userId: string): NotificationPreferences {\n    return this.userPreferences.get(userId) || {\n      enabledChannels: ['web', 'email'],\n      batchingEnabled: true,\n      batchingInterval: 60, // minutes\n      quietHours: { start: 22, end: 8 },\n      priorityThreshold: 'medium',\n    };\n  }\n\n  private shouldSendImmediately(notification: Notification, preferences: NotificationPreferences): boolean {\n    return notification.priority === 'critical' || \n           notification.priority === 'high' ||\n           notification.type === 'achievement' ||\n           !preferences.batchingEnabled;\n  }\n\n  private calculateScheduledTime(notification: Notification, preferences: NotificationPreferences): Date {\n    const now = new Date();\n    const scheduledTime = new Date(now.getTime() + preferences.batchingInterval * 60 * 1000);\n    \n    // Respect quiet hours\n    const hour = scheduledTime.getHours();\n    if (hour >= preferences.quietHours.start || hour <= preferences.quietHours.end) {\n      scheduledTime.setHours(preferences.quietHours.end + 1, 0, 0, 0);\n    }\n\n    return scheduledTime;\n  }\n\n  // Public API Methods\n  async getNotificationsForUser(userId: string, limit: number = 50): Promise<Notification[]> {\n    return Array.from(this.notifications.values())\n      .filter(n => n.userId === userId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime())\n      .slice(0, limit);\n  }\n\n  async markNotificationAsRead(notificationId: string): Promise<void> {\n    const notification = this.notifications.get(notificationId);\n    if (notification) {\n      notification.isRead = true;\n    }\n  }\n\n  async updateUserPreferences(userId: string, preferences: Partial<NotificationPreferences>): Promise<void> {\n    const current = this.getUserNotificationPreferences(userId);\n    this.userPreferences.set(userId, { ...current, ...preferences });\n  }\n\n  // Helper methods (these would integrate with actual storage)\n  private async getWorkspaceMembers(workspaceId: string): Promise<Array<{ userId: string }>> {\n    // Placeholder - would fetch from actual storage\n    return [{ userId: 'user1' }, { userId: 'user2' }];\n  }\n\n  private async getAchievement(achievementId: string): Promise<any> {\n    // Placeholder - would fetch from gamification service\n    return { name: 'Test Achievement', description: 'Test', points: 100, rarity: 'common' };\n  }\n\n  private async getUserWorkspaces(userId: string): Promise<Array<{ id: string }>> {\n    // Placeholder - would fetch from actual storage\n    return [{ id: 'workspace1' }];\n  }\n\n  private async getProject(projectId: string): Promise<any> {\n    // Placeholder - would fetch from actual storage\n    return { name: 'Test Project', ownerId: 'user1' };\n  }\n\n  private async getChallenge(challengeId: string): Promise<any> {\n    // Placeholder - would fetch from gamification service\n    return { name: 'Test Challenge', difficulty: 'intermediate', endDate: new Date() };\n  }\n\n  private async getEligibleUsersForChallenge(challengeId: string): Promise<string[]> {\n    // Placeholder - would determine eligibility based on user profiles\n    return ['user1', 'user2', 'user3'];\n  }\n\n  private async getActiveChallenges(): Promise<Array<{ id: string; endDate: Date }>> {\n    // Placeholder - would fetch from gamification service\n    return [];\n  }\n}\n\ninterface NotificationPreferences {\n  enabledChannels: string[];\n  batchingEnabled: boolean;\n  batchingInterval: number; // minutes\n  quietHours: { start: number; end: number }; // 24-hour format\n  priorityThreshold: 'low' | 'medium' | 'high';\n}\n\nexport const smartNotificationService = new SmartNotificationService();","size_bytes":27284},"server/storage.ts":{"content":"import { \n  type Job, type InsertJob, type Session, type InsertSession, type Backend, type InsertBackend, \n  type Workspace, type InsertWorkspace, type WorkspaceMember, type InsertWorkspaceMember,\n  type Project, type InsertProject, type ProjectCollaborator, type InsertProjectCollaborator,\n  JobStatus, SessionStatus, BackendStatus, WorkspaceStatus, ProjectStatus\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { ibmQuantumService } from \"./ibm-quantum\";\n\nexport interface IStorage {\n  // Jobs\n  getJobs(limit?: number, offset?: number): Promise<Job[]>;\n  getJobById(id: string): Promise<Job | undefined>;\n  createJob(job: InsertJob): Promise<Job>;\n  updateJobStatus(id: string, status: JobStatus, error?: string): Promise<Job | undefined>;\n  deleteJob(id: string): Promise<boolean>;\n  searchJobs(query: string): Promise<Job[]>;\n  getJobsByStatus(status: JobStatus): Promise<Job[]>;\n  getJobsByBackend(backend: string): Promise<Job[]>;\n\n  // Sessions\n  getSessions(): Promise<Session[]>;\n  getSessionById(id: string): Promise<Session | undefined>;\n  createSession(session: InsertSession): Promise<Session>;\n  updateSession(id: string, updates: Partial<Session>): Promise<Session | undefined>;\n  deleteSession(id: string): Promise<boolean>;\n\n  // Backends\n  getBackends(): Promise<Backend[]>;\n  getBackendById(id: string): Promise<Backend | undefined>;\n  createBackend(backend: InsertBackend): Promise<Backend>;\n  updateBackend(id: string, updates: Partial<Backend>): Promise<Backend | undefined>;\n\n  // Analytics\n  getJobStats(): Promise<{\n    totalJobs: number;\n    runningJobs: number;\n    queuedJobs: number;\n    completedJobs: number;\n    failedJobs: number;\n    successRate: number;\n  }>;\n\n  // Workspaces\n  getWorkspaces(): Promise<Workspace[]>;\n  getWorkspaceById(id: string): Promise<Workspace | undefined>;\n  createWorkspace(workspace: InsertWorkspace): Promise<Workspace>;\n  updateWorkspace(id: string, updates: Partial<Workspace>): Promise<Workspace | undefined>;\n  deleteWorkspace(id: string): Promise<boolean>;\n  searchWorkspaces(query: string): Promise<Workspace[]>;\n\n  // Workspace Members\n  getWorkspaceMembers(workspaceId: string): Promise<WorkspaceMember[]>;\n  addWorkspaceMember(member: InsertWorkspaceMember): Promise<WorkspaceMember>;\n  updateWorkspaceMember(id: string, updates: Partial<WorkspaceMember>): Promise<WorkspaceMember | undefined>;\n  removeWorkspaceMember(id: string): Promise<boolean>;\n\n  // Projects\n  getProjects(): Promise<Project[]>;\n  getProjectById(id: string): Promise<Project | undefined>;\n  getProjectsByWorkspace(workspaceId: string): Promise<Project[]>;\n  createProject(project: InsertProject): Promise<Project>;\n  updateProject(id: string, updates: Partial<Project>): Promise<Project | undefined>;\n  deleteProject(id: string): Promise<boolean>;\n  searchProjects(query: string): Promise<Project[]>;\n\n  // Project Collaborators\n  getProjectCollaborators(projectId: string): Promise<ProjectCollaborator[]>;\n  addProjectCollaborator(collaborator: InsertProjectCollaborator): Promise<ProjectCollaborator>;\n  updateProjectCollaborator(id: string, updates: Partial<ProjectCollaborator>): Promise<ProjectCollaborator | undefined>;\n  removeProjectCollaborator(id: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private jobs: Map<string, Job>;\n  private sessions: Map<string, Session>;\n  private backends: Map<string, Backend>;\n  private workspaces: Map<string, Workspace>;\n  private workspaceMembers: Map<string, WorkspaceMember>;\n  private projects: Map<string, Project>;\n  private projectCollaborators: Map<string, ProjectCollaborator>;\n  private simulationInterval: NodeJS.Timeout | null = null;\n  private lastIBMSync = 0;\n  private readonly IBM_SYNC_INTERVAL = 30000; // 30 seconds\n\n  constructor() {\n    this.jobs = new Map();\n    this.sessions = new Map();\n    this.backends = new Map();\n    this.workspaces = new Map();\n    this.workspaceMembers = new Map();\n    this.projects = new Map();\n    this.projectCollaborators = new Map();\n    this.initializeData();\n    this.initializeSampleJobs();\n\n    // Start simulation timer for demo data\n    setInterval(() => {\n      this.simulateJobStatusChanges();\n    }, 5000);\n\n    // Sync with IBM Quantum every 30 seconds if configured\n    if (ibmQuantumService.isConfigured()) {\n      setInterval(() => {\n        this.syncWithIBMQuantum();\n      }, this.IBM_SYNC_INTERVAL);\n    }\n  }\n\n  private async syncWithIBMQuantum() {\n    try {\n      const now = Date.now();\n      if (now - this.lastIBMSync < this.IBM_SYNC_INTERVAL) {\n        return;\n      }\n\n      console.log('Syncing with IBM Quantum...');\n\n      // Fetch real jobs from IBM Quantum\n      const ibmJobs = await ibmQuantumService.getJobs(50);\n\n      // Convert IBM jobs to our format\n      for (const ibmJob of ibmJobs) {\n        const job: Job = {\n          id: `ibm_${ibmJob.id}`,\n          name: ibmJob.name || 'IBM Quantum Job',\n          backend: ibmJob.backend,\n          status: this.mapIBMStatus(ibmJob.status),\n          queuePosition: ibmJob.status === 'queued' ? Math.floor(Math.random() * 10) + 1 : null,\n          submissionTime: new Date(ibmJob.created),\n          startTime: ibmJob.status === 'running' || ibmJob.status === 'completed' ?\n                    new Date(ibmJob.created) : null,\n          endTime: ibmJob.status === 'completed' || ibmJob.status === 'failed' ?\n                  new Date(ibmJob.updated || ibmJob.created) : null,\n          duration: ibmJob.runtime || null,\n          qubits: ibmJob.qubits || 5,\n          shots: ibmJob.shots || 1024,\n          program: `// IBM Quantum Job\\n${ibmJob.program || 'quantum_circuit'}`,\n          results: ibmJob.results || null,\n          error: ibmJob.error || null,\n          tags: ['ibm', 'real'],\n          sessionId: 'ibm_session_1',\n        };\n\n        this.jobs.set(job.id, job);\n      }\n\n      // Fetch real backends from IBM Quantum\n      const ibmBackends = await ibmQuantumService.getBackends();\n\n      for (const ibmBackend of ibmBackends) {\n        const backend: Backend = {\n          id: `ibm_${ibmBackend.name}`,\n          name: ibmBackend.name,\n          status: ibmBackend.status === 'online' ? 'available' :\n                 ibmBackend.status === 'maintenance' ? 'maintenance' : 'busy',\n          qubits: ibmBackend.num_qubits,\n          queueLength: ibmBackend.pending_jobs,\n          averageWaitTime: ibmBackend.pending_jobs * 45, // Estimate\n          uptime: ibmBackend.status === 'online' ? '99.5%' : '0%',\n          lastUpdate: new Date(),\n        };\n\n        this.backends.set(backend.id, backend);\n      }\n\n      this.lastIBMSync = now;\n      console.log(`Synced ${ibmJobs.length} jobs and ${ibmBackends.length} backends from IBM Quantum`);\n\n    } catch (error) {\n      console.error('Failed to sync with IBM Quantum:', error);\n    }\n  }\n\n  private mapIBMStatus(ibmStatus: string): JobStatus {\n    switch (ibmStatus) {\n      case 'queued': return 'queued';\n      case 'running': return 'running';\n      case 'completed': return 'done';\n      case 'failed': return 'failed';\n      case 'cancelled': return 'cancelled';\n      default: return 'queued';\n    }\n  }\n\n  private startJobSimulation() {\n    // Simulate job status changes every 15-30 seconds\n    this.simulationInterval = setInterval(() => {\n      this.simulateJobStatusChanges();\n    }, 20000 + Math.random() * 10000);\n  }\n\n  private initializeData() {\n    // Initialize with some backends\n    const backendData: InsertBackend[] = [\n      {\n        name: \"ibm_cairo\",\n        status: \"available\",\n        qubits: 127,\n        queueLength: 2,\n        averageWaitTime: 45,\n        uptime: \"99.8%\",\n      },\n      {\n        name: \"ibm_osaka\",\n        status: \"busy\",\n        qubits: 127,\n        queueLength: 12,\n        averageWaitTime: 320,\n        uptime: \"99.2%\",\n      },\n      {\n        name: \"ibm_kyoto\",\n        status: \"available\",\n        qubits: 127,\n        queueLength: 1,\n        averageWaitTime: 25,\n        uptime: \"98.9%\",\n      },\n      {\n        name: \"ibm_brisbane\",\n        status: \"available\",\n        qubits: 127,\n        queueLength: 0,\n        averageWaitTime: 15,\n        uptime: \"99.5%\",\n      },\n      {\n        name: \"ibm_sherbrooke\",\n        status: \"busy\",\n        qubits: 133,\n        queueLength: 6,\n        averageWaitTime: 180,\n        uptime: \"99.1%\",\n      },\n      {\n        name: \"ibm_nazca\",\n        status: \"maintenance\",\n        qubits: 127,\n        queueLength: 0,\n        averageWaitTime: 0,\n        uptime: \"0%\",\n      },\n    ];\n\n    backendData.forEach(backend => {\n      const id = backend.name;\n      this.backends.set(id, {\n        id,\n        name: backend.name,\n        status: backend.status,\n        qubits: backend.qubits,\n        queueLength: backend.queueLength ?? 0,\n        averageWaitTime: backend.averageWaitTime ?? 0,\n        uptime: backend.uptime ?? \"0%\",\n        lastUpdate: new Date(),\n      });\n    });\n\n    // Initialize with some sessions\n    const sessionData: InsertSession[] = [\n      {\n        name: \"Quantum Machine Learning Research\",\n        status: \"active\",\n      },\n      {\n        name: \"Optimization Algorithms\",\n        status: \"active\",\n      },\n      {\n        name: \"Error Correction Testing\",\n        status: \"active\",\n      },\n      {\n        name: \"QAOA Implementation\",\n        status: \"inactive\",\n      },\n    ];\n\n    sessionData.forEach((session, index) => {\n      const id = `session_${index + 1}`;\n      this.sessions.set(id, {\n        ...session,\n        id,\n        createdAt: new Date(Date.now() - (index + 1) * 3600000),\n        lastActivity: new Date(Date.now() - (index + 1) * 600000),\n        jobCount: Math.floor(Math.random() * 12) + 3,\n      });\n    });\n\n    // Initialize with realistic sample jobs\n    this.initializeSampleJobs();\n  }\n\n  private initializeSampleJobs() {\n    const backends = [\"ibm_cairo\", \"ibm_osaka\", \"ibm_kyoto\", \"ibm_brisbane\", \"ibm_sherbrooke\"];\n    const statuses: JobStatus[] = [\"done\", \"running\", \"queued\", \"failed\", \"cancelled\"];\n    const jobNames = [\n      \"VQE Optimization\",\n      \"QAOA Circuit Test\",\n      \"Quantum ML Training\",\n      \"Error Mitigation Study\",\n      \"Bell State Preparation\",\n      \"Quantum Fourier Transform\",\n      \"Grover's Algorithm\",\n      \"Quantum Teleportation\",\n      \"Shor's Algorithm Demo\",\n      \"Random Circuit Sampling\",\n      \"Quantum Supremacy Test\",\n      \"Variational Classifier\",\n      \"Quantum Chemistry Sim\",\n      \"Error Correction Test\",\n      \"NISQ Algorithm Eval\"\n    ];\n\n    // Create 45 realistic sample jobs with various timestamps\n    for (let i = 0; i < 45; i++) {\n      const backend = backends[Math.floor(Math.random() * backends.length)];\n      const name = jobNames[Math.floor(Math.random() * jobNames.length)];\n\n      // Distribute jobs across different time periods for trends\n      const hoursAgo = Math.floor(Math.random() * 168); // Last 7 days\n      const submissionTime = new Date(Date.now() - hoursAgo * 3600000);\n\n      let status: JobStatus;\n      let startTime: Date | null = null;\n      let endTime: Date | null = null;\n      let duration: number | null = null;\n      let queuePosition: number | null = null;\n      let error: string | null = null;\n\n      // Determine status based on age (newer jobs more likely to be running/queued)\n      if (hoursAgo < 2) {\n        // Recent jobs: running or queued\n        status = Math.random() < 0.6 ? \"running\" : \"queued\";\n      } else if (hoursAgo < 12) {\n        // Recent jobs: mostly done, some running\n        const rand = Math.random();\n        if (rand < 0.7) status = \"done\";\n        else if (rand < 0.85) status = \"running\";\n        else if (rand < 0.95) status = \"failed\";\n        else status = \"cancelled\";\n      } else {\n        // Older jobs: mostly completed\n        const rand = Math.random();\n        if (rand < 0.8) status = \"done\";\n        else if (rand < 0.9) status = \"failed\";\n        else status = \"cancelled\";\n      }\n\n      // Set timing based on status\n      if (status === \"queued\") {\n        queuePosition = Math.floor(Math.random() * 15) + 1;\n      } else if (status === \"running\") {\n        startTime = new Date(submissionTime.getTime() + Math.random() * 3600000);\n      } else if (status === \"done\" || status === \"failed\") {\n        startTime = new Date(submissionTime.getTime() + Math.random() * 1800000);\n        endTime = new Date(startTime.getTime() + Math.random() * 1800000 + 30000);\n        duration = Math.floor((endTime.getTime() - startTime.getTime()) / 1000);\n      }\n\n      if (status === \"failed\") {\n        error = \"Quantum circuit execution timeout\";\n      }\n\n      const job: Job = {\n        id: `job_${(Date.now() + i).toString(36)}`,\n        name,\n        backend,\n        status,\n        queuePosition,\n        submissionTime,\n        startTime,\n        endTime,\n        duration,\n        qubits: Math.floor(Math.random() * 100) + 5,\n        shots: Math.pow(2, Math.floor(Math.random() * 10) + 10), // 1024 to 1M shots\n        program: `// ${name}\\nqc = QuantumCircuit(${Math.floor(Math.random() * 20) + 2})\\n// Implementation details...`,\n        results: status === \"done\" ? { counts: { \"00\": 512, \"11\": 512 } } : null,\n        error,\n        tags: Math.random() < 0.7 ? [\n          [\"research\", \"optimization\", \"ml\", \"demo\"][Math.floor(Math.random() * 4)]\n        ] : null,\n        sessionId: `session_${Math.floor(Math.random() * 3) + 1}`,\n      };\n\n      this.jobs.set(job.id, job);\n    }\n  }\n\n  private simulateJobStatusChanges() {\n    const queuedJobs = Array.from(this.jobs.values()).filter(job => job.status === \"queued\");\n    const runningJobs = Array.from(this.jobs.values()).filter(job => job.status === \"running\");\n\n    // Move some queued jobs to running (simulate job starts)\n    if (queuedJobs.length > 0 && Math.random() < 0.4) {\n      const job = queuedJobs[Math.floor(Math.random() * queuedJobs.length)];\n      job.status = \"running\";\n      job.startTime = new Date();\n      job.queuePosition = null;\n      this.jobs.set(job.id, job);\n    }\n\n    // Complete some running jobs (simulate job completion)\n    if (runningJobs.length > 0 && Math.random() < 0.3) {\n      const job = runningJobs[Math.floor(Math.random() * runningJobs.length)];\n      job.endTime = new Date();\n      if (job.startTime) {\n        job.duration = Math.floor((job.endTime.getTime() - new Date(job.startTime).getTime()) / 1000);\n      }\n      // 85% success rate\n      job.status = Math.random() < 0.85 ? \"done\" : \"failed\";\n      if (job.status === \"failed\") {\n        job.error = \"Quantum circuit execution error\";\n      } else {\n        job.results = { counts: { \"00\": 512, \"01\": 256, \"10\": 128, \"11\": 128 } };\n      }\n      this.jobs.set(job.id, job);\n    }\n\n    // Occasionally add new jobs to keep things interesting\n    if (Math.random() < 0.2) {\n      this.addRandomJob();\n    }\n\n    // Update backend queue lengths based on current queued jobs\n    this.updateBackendQueues();\n  }\n\n  private addRandomJob() {\n    const backends = [\"ibm_cairo\", \"ibm_osaka\", \"ibm_kyoto\", \"ibm_brisbane\", \"ibm_sherbrooke\"];\n    const jobNames = [\n      \"Real-time VQE Run\",\n      \"Live QAOA Test\",\n      \"Dynamic ML Training\",\n      \"Fresh Error Study\",\n      \"New Bell State Prep\",\n      \"Live Circuit Test\",\n      \"Runtime Algorithm\",\n      \"Active Quantum Task\"\n    ];\n\n    const backend = backends[Math.floor(Math.random() * backends.length)];\n    const name = jobNames[Math.floor(Math.random() * jobNames.length)];\n\n    const job: Job = {\n      id: `job_${Date.now().toString(36)}`,\n      name,\n      backend,\n      status: \"queued\",\n      queuePosition: Array.from(this.jobs.values()).filter(j => j.backend === backend && j.status === \"queued\").length + 1,\n      submissionTime: new Date(),\n      startTime: null,\n      endTime: null,\n      duration: null,\n      qubits: Math.floor(Math.random() * 50) + 10,\n      shots: Math.pow(2, Math.floor(Math.random() * 6) + 10),\n      program: `// ${name}\\nqc = QuantumCircuit(${Math.floor(Math.random() * 10) + 2})\\n// Live execution...`,\n      results: null,\n      error: null,\n      tags: [[\"live\", \"real-time\", \"active\"][Math.floor(Math.random() * 3)]],\n      sessionId: `session_${Math.floor(Math.random() * 3) + 1}`,\n    };\n\n    this.jobs.set(job.id, job);\n  }\n\n  private updateBackendQueues() {\n    this.backends.forEach(backend => {\n      const queuedJobs = Array.from(this.jobs.values()).filter(job =>\n        job.backend === backend.name && job.status === \"queued\"\n      );\n      backend.queueLength = queuedJobs.length;\n      backend.lastUpdate = new Date();\n      this.backends.set(backend.id, backend);\n    });\n  }\n\n  async getJobs(limit = 100, offset = 0): Promise<Job[]> {\n    const allJobs = Array.from(this.jobs.values())\n      .sort((a, b) => new Date(b.submissionTime).getTime() - new Date(a.submissionTime).getTime());\n    return allJobs.slice(offset, offset + limit);\n  }\n\n  async getJobById(id: string): Promise<Job | undefined> {\n    return this.jobs.get(id);\n  }\n\n  async createJob(insertJob: InsertJob): Promise<Job> {\n    const id = `job_${randomUUID().slice(0, 8)}`;\n    const job: Job = {\n      id,\n      name: insertJob.name ?? null,\n      backend: insertJob.backend,\n      status: insertJob.status,\n      queuePosition: insertJob.status === 'queued' ? await this.getNextQueuePosition(insertJob.backend) : null,\n      submissionTime: new Date(),\n      startTime: null,\n      endTime: null,\n      duration: null,\n      qubits: insertJob.qubits,\n      shots: insertJob.shots,\n      program: insertJob.program,\n      results: null,\n      error: null,\n      tags: insertJob.tags ?? null,\n      sessionId: insertJob.sessionId ?? null,\n    };\n\n    this.jobs.set(id, job);\n    return job;\n  }\n\n  private async getNextQueuePosition(backend: string): Promise<number> {\n    const queuedJobs = Array.from(this.jobs.values())\n      .filter(job => job.backend === backend && job.status === 'queued');\n    return queuedJobs.length + 1;\n  }\n\n  async updateJobStatus(id: string, status: JobStatus, error?: string): Promise<Job | undefined> {\n    const job = this.jobs.get(id);\n    if (!job) return undefined;\n\n    const now = new Date();\n    const updatedJob: Job = {\n      ...job,\n      status,\n      error: error || null,\n    };\n\n    if (status === 'running' && job.status === 'queued') {\n      updatedJob.startTime = now;\n      updatedJob.queuePosition = null;\n    } else if ((status === 'done' || status === 'failed') && job.status === 'running') {\n      updatedJob.endTime = now;\n      if (job.startTime) {\n        updatedJob.duration = Math.floor((now.getTime() - new Date(job.startTime).getTime()) / 1000);\n      }\n    }\n\n    this.jobs.set(id, updatedJob);\n    return updatedJob;\n  }\n\n  async deleteJob(id: string): Promise<boolean> {\n    return this.jobs.delete(id);\n  }\n\n  async searchJobs(query: string): Promise<Job[]> {\n    const searchTerm = query.toLowerCase();\n    return Array.from(this.jobs.values()).filter(job =>\n      job.id.toLowerCase().includes(searchTerm) ||\n      job.backend.toLowerCase().includes(searchTerm) ||\n      job.status.toLowerCase().includes(searchTerm) ||\n      job.name?.toLowerCase().includes(searchTerm) ||\n      job.tags?.some(tag => tag.toLowerCase().includes(searchTerm))\n    );\n  }\n\n  async getJobsByStatus(status: JobStatus): Promise<Job[]> {\n    return Array.from(this.jobs.values()).filter(job => job.status === status);\n  }\n\n  async getJobsByBackend(backend: string): Promise<Job[]> {\n    return Array.from(this.jobs.values()).filter(job => job.backend === backend);\n  }\n\n  async getSessions(): Promise<Session[]> {\n    return Array.from(this.sessions.values())\n      .sort((a, b) => new Date(b.lastActivity).getTime() - new Date(a.lastActivity).getTime());\n  }\n\n  async getSessionById(id: string): Promise<Session | undefined> {\n    return this.sessions.get(id);\n  }\n\n  async createSession(insertSession: InsertSession): Promise<Session> {\n    const id = `session_${randomUUID().slice(0, 8)}`;\n    const session: Session = {\n      ...insertSession,\n      id,\n      createdAt: new Date(),\n      lastActivity: new Date(),\n      jobCount: 0,\n    };\n\n    this.sessions.set(id, session);\n    return session;\n  }\n\n  async updateSession(id: string, updates: Partial<Session>): Promise<Session | undefined> {\n    const session = this.sessions.get(id);\n    if (!session) return undefined;\n\n    const updatedSession = { ...session, ...updates };\n    this.sessions.set(id, updatedSession);\n    return updatedSession;\n  }\n\n  async deleteSession(id: string): Promise<boolean> {\n    return this.sessions.delete(id);\n  }\n\n  async getBackends(): Promise<Backend[]> {\n    return Array.from(this.backends.values());\n  }\n\n  async getBackendById(id: string): Promise<Backend | undefined> {\n    return this.backends.get(id);\n  }\n\n  async createBackend(insertBackend: InsertBackend): Promise<Backend> {\n    const id = insertBackend.name;\n    const backend: Backend = {\n      id,\n      name: insertBackend.name,\n      status: insertBackend.status,\n      qubits: insertBackend.qubits,\n      queueLength: insertBackend.queueLength ?? 0,\n      averageWaitTime: insertBackend.averageWaitTime ?? 0,\n      uptime: insertBackend.uptime ?? \"0%\",\n      lastUpdate: new Date(),\n    };\n\n    this.backends.set(id, backend);\n    return backend;\n  }\n\n  async updateBackend(id: string, updates: Partial<Backend>): Promise<Backend | undefined> {\n    const backend = this.backends.get(id);\n    if (!backend) return undefined;\n\n    const updatedBackend = { ...backend, ...updates, lastUpdate: new Date() };\n    this.backends.set(id, updatedBackend);\n    return updatedBackend;\n  }\n\n  async getJobStats(): Promise<{\n    totalJobs: number;\n    runningJobs: number;\n    queuedJobs: number;\n    completedJobs: number;\n    failedJobs: number;\n    successRate: number;\n  }> {\n    const allJobs = Array.from(this.jobs.values());\n    const totalJobs = allJobs.length;\n    const runningJobs = allJobs.filter(job => job.status === 'running').length;\n    const queuedJobs = allJobs.filter(job => job.status === 'queued').length;\n    const completedJobs = allJobs.filter(job => job.status === 'done').length;\n    const failedJobs = allJobs.filter(job => job.status === 'failed').length;\n    const successRate = (completedJobs + failedJobs) > 0 ? (completedJobs / (completedJobs + failedJobs)) * 100 : 0;\n\n    return {\n      totalJobs,\n      runningJobs,\n      queuedJobs,\n      completedJobs,\n      failedJobs,\n      successRate: Math.round(successRate * 10) / 10,\n    };\n  }\n\n  // Workspace methods\n  async getWorkspaces(): Promise<Workspace[]> {\n    return Array.from(this.workspaces.values())\n      .sort((a, b) => new Date(b.lastActivity || 0).getTime() - new Date(a.lastActivity || 0).getTime());\n  }\n\n  async getWorkspaceById(id: string): Promise<Workspace | undefined> {\n    return this.workspaces.get(id);\n  }\n\n  async createWorkspace(insertWorkspace: InsertWorkspace): Promise<Workspace> {\n    const id = `ws_${randomUUID().slice(0, 8)}`;\n    const workspace: Workspace = {\n      id,\n      name: insertWorkspace.name,\n      description: insertWorkspace.description || null,\n      status: insertWorkspace.status,\n      privacy: insertWorkspace.privacy,\n      ownerId: insertWorkspace.ownerId,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      lastActivity: new Date(),\n      progress: insertWorkspace.progress || 0,\n      settings: insertWorkspace.settings || null,\n    };\n\n    this.workspaces.set(id, workspace);\n    return workspace;\n  }\n\n  async updateWorkspace(id: string, updates: Partial<Workspace>): Promise<Workspace | undefined> {\n    const workspace = this.workspaces.get(id);\n    if (!workspace) return undefined;\n\n    const updatedWorkspace = { \n      ...workspace, \n      ...updates, \n      updatedAt: new Date(),\n      lastActivity: new Date()\n    };\n    this.workspaces.set(id, updatedWorkspace);\n    return updatedWorkspace;\n  }\n\n  async deleteWorkspace(id: string): Promise<boolean> {\n    // Also delete related members and projects\n    const members = Array.from(this.workspaceMembers.values()).filter(m => m.workspaceId === id);\n    const projects = Array.from(this.projects.values()).filter(p => p.workspaceId === id);\n    \n    members.forEach(member => this.workspaceMembers.delete(member.id));\n    \n    for (const project of projects) {\n      // Delete project collaborators\n      const collaborators = Array.from(this.projectCollaborators.values()).filter(c => c.projectId === project.id);\n      collaborators.forEach(collaborator => this.projectCollaborators.delete(collaborator.id));\n      this.projects.delete(project.id);\n    }\n\n    return this.workspaces.delete(id);\n  }\n\n  async searchWorkspaces(query: string): Promise<Workspace[]> {\n    const searchTerm = query.toLowerCase();\n    return Array.from(this.workspaces.values()).filter(workspace =>\n      workspace.name.toLowerCase().includes(searchTerm) ||\n      workspace.description?.toLowerCase().includes(searchTerm) ||\n      workspace.status.toLowerCase().includes(searchTerm)\n    );\n  }\n\n  // Workspace Member methods\n  async getWorkspaceMembers(workspaceId: string): Promise<WorkspaceMember[]> {\n    return Array.from(this.workspaceMembers.values())\n      .filter(member => member.workspaceId === workspaceId)\n      .sort((a, b) => new Date(a.joinedAt).getTime() - new Date(b.joinedAt).getTime());\n  }\n\n  async addWorkspaceMember(insertMember: InsertWorkspaceMember): Promise<WorkspaceMember> {\n    const id = `wm_${randomUUID().slice(0, 8)}`;\n    const member: WorkspaceMember = {\n      id,\n      workspaceId: insertMember.workspaceId,\n      userId: insertMember.userId,\n      userName: insertMember.userName,\n      userEmail: insertMember.userEmail || null,\n      role: insertMember.role,\n      joinedAt: new Date(),\n      permissions: insertMember.permissions || null,\n    };\n\n    this.workspaceMembers.set(id, member);\n    return member;\n  }\n\n  async updateWorkspaceMember(id: string, updates: Partial<WorkspaceMember>): Promise<WorkspaceMember | undefined> {\n    const member = this.workspaceMembers.get(id);\n    if (!member) return undefined;\n\n    const updatedMember = { ...member, ...updates };\n    this.workspaceMembers.set(id, updatedMember);\n    return updatedMember;\n  }\n\n  async removeWorkspaceMember(id: string): Promise<boolean> {\n    return this.workspaceMembers.delete(id);\n  }\n\n  // Project methods\n  async getProjects(): Promise<Project[]> {\n    return Array.from(this.projects.values())\n      .sort((a, b) => new Date(b.lastModified || 0).getTime() - new Date(a.lastModified || 0).getTime());\n  }\n\n  async getProjectById(id: string): Promise<Project | undefined> {\n    return this.projects.get(id);\n  }\n\n  async getProjectsByWorkspace(workspaceId: string): Promise<Project[]> {\n    return Array.from(this.projects.values())\n      .filter(project => project.workspaceId === workspaceId)\n      .sort((a, b) => new Date(b.lastModified || 0).getTime() - new Date(a.lastModified || 0).getTime());\n  }\n\n  async createProject(insertProject: InsertProject): Promise<Project> {\n    const id = `proj_${randomUUID().slice(0, 8)}`;\n    const project: Project = {\n      id,\n      name: insertProject.name,\n      description: insertProject.description || null,\n      workspaceId: insertProject.workspaceId,\n      ownerId: insertProject.ownerId,\n      status: insertProject.status,\n      backend: insertProject.backend || null,\n      circuitCode: insertProject.circuitCode || null,\n      configuration: insertProject.configuration || null,\n      results: insertProject.results || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      lastModified: new Date(),\n      runtime: insertProject.runtime || null,\n      isPublic: insertProject.isPublic || false,\n      tags: insertProject.tags || null,\n    };\n\n    this.projects.set(id, project);\n    return project;\n  }\n\n  async updateProject(id: string, updates: Partial<Project>): Promise<Project | undefined> {\n    const project = this.projects.get(id);\n    if (!project) return undefined;\n\n    const updatedProject = { \n      ...project, \n      ...updates, \n      updatedAt: new Date(),\n      lastModified: new Date()\n    };\n    this.projects.set(id, updatedProject);\n    return updatedProject;\n  }\n\n  async deleteProject(id: string): Promise<boolean> {\n    // Delete related collaborators\n    const collaborators = Array.from(this.projectCollaborators.values()).filter(c => c.projectId === id);\n    collaborators.forEach(collaborator => this.projectCollaborators.delete(collaborator.id));\n    \n    return this.projects.delete(id);\n  }\n\n  async searchProjects(query: string): Promise<Project[]> {\n    const searchTerm = query.toLowerCase();\n    return Array.from(this.projects.values()).filter(project =>\n      project.name.toLowerCase().includes(searchTerm) ||\n      project.description?.toLowerCase().includes(searchTerm) ||\n      project.status.toLowerCase().includes(searchTerm) ||\n      project.backend?.toLowerCase().includes(searchTerm) ||\n      project.tags?.some(tag => tag.toLowerCase().includes(searchTerm))\n    );\n  }\n\n  // Project Collaborator methods\n  async getProjectCollaborators(projectId: string): Promise<ProjectCollaborator[]> {\n    return Array.from(this.projectCollaborators.values())\n      .filter(collaborator => collaborator.projectId === projectId)\n      .sort((a, b) => new Date(a.addedAt).getTime() - new Date(b.addedAt).getTime());\n  }\n\n  async addProjectCollaborator(insertCollaborator: InsertProjectCollaborator): Promise<ProjectCollaborator> {\n    const id = `pc_${randomUUID().slice(0, 8)}`;\n    const collaborator: ProjectCollaborator = {\n      id,\n      projectId: insertCollaborator.projectId,\n      userId: insertCollaborator.userId,\n      userName: insertCollaborator.userName,\n      role: insertCollaborator.role,\n      addedAt: new Date(),\n      permissions: insertCollaborator.permissions || null,\n    };\n\n    this.projectCollaborators.set(id, collaborator);\n    return collaborator;\n  }\n\n  async updateProjectCollaborator(id: string, updates: Partial<ProjectCollaborator>): Promise<ProjectCollaborator | undefined> {\n    const collaborator = this.projectCollaborators.get(id);\n    if (!collaborator) return undefined;\n\n    const updatedCollaborator = { ...collaborator, ...updates };\n    this.projectCollaborators.set(id, updatedCollaborator);\n    return updatedCollaborator;\n  }\n\n  async removeProjectCollaborator(id: string): Promise<boolean> {\n    return this.projectCollaborators.delete(id);\n  }\n}\n\nexport const storage = new MemStorage();","size_bytes":30435},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    // Skip API routes - let them be handled by Express routes\n    if (url.startsWith('/api/')) {\n      return next();\n    }\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2389},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, jsonb, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const jobs = pgTable(\"jobs\", {\n  id: varchar(\"id\").primaryKey(),\n  name: text(\"name\"),\n  backend: text(\"backend\").notNull(),\n  status: text(\"status\").notNull(), // queued, running, done, failed, cancelled\n  queuePosition: integer(\"queue_position\"),\n  submissionTime: timestamp(\"submission_time\").notNull().default(sql`now()`),\n  startTime: timestamp(\"start_time\"),\n  endTime: timestamp(\"end_time\"),\n  duration: integer(\"duration\"), // in seconds\n  qubits: integer(\"qubits\"),\n  shots: integer(\"shots\"),\n  program: text(\"program\"),\n  results: jsonb(\"results\"),\n  error: text(\"error\"),\n  tags: jsonb(\"tags\").$type<string[]>(),\n  sessionId: varchar(\"session_id\"),\n});\n\nexport const sessions = pgTable(\"sessions\", {\n  id: varchar(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  status: text(\"status\").notNull(), // active, inactive, expired\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  lastActivity: timestamp(\"last_activity\").notNull().default(sql`now()`),\n  jobCount: integer(\"job_count\").default(0),\n});\n\nexport const backends = pgTable(\"backends\", {\n  id: varchar(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  status: text(\"status\").notNull(), // available, busy, maintenance, offline\n  qubits: integer(\"qubits\").notNull(),\n  queueLength: integer(\"queue_length\").default(0),\n  averageWaitTime: integer(\"average_wait_time\"), // in seconds\n  uptime: text(\"uptime\"),\n  lastUpdate: timestamp(\"last_update\").default(sql`now()`),\n});\n\nexport const workspaces = pgTable(\"workspaces\", {\n  id: varchar(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  status: text(\"status\").notNull(), // active, paused, completed, archived\n  privacy: text(\"privacy\").notNull(), // public, private\n  ownerId: varchar(\"owner_id\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n  lastActivity: timestamp(\"last_activity\").default(sql`now()`),\n  progress: integer(\"progress\").default(0), // percentage 0-100\n  settings: jsonb(\"settings\"),\n});\n\nexport const workspaceMembers = pgTable(\"workspace_members\", {\n  id: varchar(\"id\").primaryKey(),\n  workspaceId: varchar(\"workspace_id\").notNull(),\n  userId: varchar(\"user_id\").notNull(),\n  userName: text(\"user_name\").notNull(),\n  userEmail: text(\"user_email\"),\n  role: text(\"role\").notNull(), // owner, admin, member, viewer\n  joinedAt: timestamp(\"joined_at\").notNull().default(sql`now()`),\n  permissions: jsonb(\"permissions\"),\n});\n\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  workspaceId: varchar(\"workspace_id\").notNull(),\n  ownerId: varchar(\"owner_id\").notNull(),\n  status: text(\"status\").notNull(), // draft, running, completed, failed, paused\n  backend: text(\"backend\"),\n  circuitCode: text(\"circuit_code\"),\n  configuration: jsonb(\"configuration\"),\n  results: jsonb(\"results\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n  lastModified: timestamp(\"last_modified\").default(sql`now()`),\n  runtime: integer(\"runtime\"), // in minutes\n  isPublic: boolean(\"is_public\").default(false),\n  tags: jsonb(\"tags\").$type<string[]>(),\n});\n\nexport const projectCollaborators = pgTable(\"project_collaborators\", {\n  id: varchar(\"id\").primaryKey(),\n  projectId: varchar(\"project_id\").notNull(),\n  userId: varchar(\"user_id\").notNull(),\n  userName: text(\"user_name\").notNull(),\n  role: text(\"role\").notNull(), // owner, editor, viewer\n  addedAt: timestamp(\"added_at\").notNull().default(sql`now()`),\n  permissions: jsonb(\"permissions\"),\n});\n\nexport const insertJobSchema = createInsertSchema(jobs).omit({\n  id: true,\n  submissionTime: true,\n  startTime: true,\n  endTime: true,\n  duration: true,\n  results: true,\n}).extend({\n  name: z.string().optional(),\n  qubits: z.number().min(1).max(1000),\n  shots: z.number().min(1).max(100000),\n  program: z.string().min(1),\n  tags: z.array(z.string()).optional(),\n});\n\nexport const insertSessionSchema = createInsertSchema(sessions).omit({\n  id: true,\n  createdAt: true,\n  lastActivity: true,\n  jobCount: true,\n});\n\nexport const insertBackendSchema = createInsertSchema(backends).omit({\n  id: true,\n  lastUpdate: true,\n});\n\nexport const insertWorkspaceSchema = createInsertSchema(workspaces).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  lastActivity: true,\n}).extend({\n  name: z.string().min(1).max(100),\n  description: z.string().optional(),\n  privacy: z.enum([\"public\", \"private\"]).default(\"private\"),\n  progress: z.number().min(0).max(100).default(0),\n});\n\nexport const insertWorkspaceMemberSchema = createInsertSchema(workspaceMembers).omit({\n  id: true,\n  joinedAt: true,\n}).extend({\n  role: z.enum([\"owner\", \"admin\", \"member\", \"viewer\"]).default(\"member\"),\n});\n\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  lastModified: true,\n}).extend({\n  name: z.string().min(1).max(100),\n  description: z.string().optional(),\n  status: z.enum([\"draft\", \"running\", \"completed\", \"failed\", \"paused\"]).default(\"draft\"),\n  isPublic: z.boolean().default(false),\n  tags: z.array(z.string()).optional(),\n});\n\nexport const insertProjectCollaboratorSchema = createInsertSchema(projectCollaborators).omit({\n  id: true,\n  addedAt: true,\n}).extend({\n  role: z.enum([\"owner\", \"editor\", \"viewer\"]).default(\"editor\"),\n});\n\nexport type Job = typeof jobs.$inferSelect;\nexport type InsertJob = z.infer<typeof insertJobSchema>;\nexport type Session = typeof sessions.$inferSelect;\nexport type InsertSession = z.infer<typeof insertSessionSchema>;\nexport type Backend = typeof backends.$inferSelect;\nexport type InsertBackend = z.infer<typeof insertBackendSchema>;\nexport type Workspace = typeof workspaces.$inferSelect;\nexport type InsertWorkspace = z.infer<typeof insertWorkspaceSchema>;\nexport type WorkspaceMember = typeof workspaceMembers.$inferSelect;\nexport type InsertWorkspaceMember = z.infer<typeof insertWorkspaceMemberSchema>;\nexport type Project = typeof projects.$inferSelect;\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type ProjectCollaborator = typeof projectCollaborators.$inferSelect;\nexport type InsertProjectCollaborator = z.infer<typeof insertProjectCollaboratorSchema>;\n\n// Advanced Feature Types\nexport type AiRecommendation = typeof aiRecommendations.$inferSelect;\nexport type InsertAiRecommendation = z.infer<typeof insertAiRecommendationSchema>;\nexport type LiveCollaborationSession = typeof liveCollaborationSessions.$inferSelect;\nexport type InsertLiveCollaborationSession = z.infer<typeof insertLiveCollaborationSessionSchema>;\nexport type LiveEdit = typeof liveEdits.$inferSelect;\nexport type InsertLiveEdit = z.infer<typeof insertLiveEditSchema>;\nexport type Achievement = typeof achievements.$inferSelect;\nexport type InsertAchievement = z.infer<typeof insertAchievementSchema>;\nexport type UserAchievement = typeof userAchievements.$inferSelect;\nexport type InsertUserAchievement = z.infer<typeof insertUserAchievementSchema>;\nexport type Challenge = typeof challenges.$inferSelect;\nexport type InsertChallenge = z.infer<typeof insertChallengeSchema>;\nexport type ChallengeParticipant = typeof challengeParticipants.$inferSelect;\nexport type InsertChallengeParticipant = z.infer<typeof insertChallengeParticipantSchema>;\nexport type CollaborationMetric = typeof collaborationMetrics.$inferSelect;\nexport type InsertCollaborationMetric = z.infer<typeof insertCollaborationMetricSchema>;\nexport type QuantumInsight = typeof quantumInsights.$inferSelect;\nexport type InsertQuantumInsight = z.infer<typeof insertQuantumInsightSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type KnowledgeArticle = typeof knowledgeArticles.$inferSelect;\nexport type InsertKnowledgeArticle = z.infer<typeof insertKnowledgeArticleSchema>;\nexport type Experiment = typeof experiments.$inferSelect;\nexport type InsertExperiment = z.infer<typeof insertExperimentSchema>;\nexport type HardwareReservation = typeof hardwareReservations.$inferSelect;\nexport type InsertHardwareReservation = z.infer<typeof insertHardwareReservationSchema>;\nexport type HardwareOptimization = typeof hardwareOptimizations.$inferSelect;\nexport type InsertHardwareOptimization = z.infer<typeof insertHardwareOptimizationSchema>;\nexport type CommunityEvent = typeof communityEvents.$inferSelect;\nexport type InsertCommunityEvent = z.infer<typeof insertCommunityEventSchema>;\nexport type EventParticipant = typeof eventParticipants.$inferSelect;\nexport type InsertEventParticipant = z.infer<typeof insertEventParticipantSchema>;\nexport type ResearchPaper = typeof researchPapers.$inferSelect;\nexport type InsertResearchPaper = z.infer<typeof insertResearchPaperSchema>;\nexport type ChatChannel = typeof chatChannels.$inferSelect;\nexport type InsertChatChannel = z.infer<typeof insertChatChannelSchema>;\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\nexport type UserProfile = typeof userProfiles.$inferSelect;\nexport type InsertUserProfile = z.infer<typeof insertUserProfileSchema>;\nexport type MentorshipPair = typeof mentorshipPairs.$inferSelect;\nexport type InsertMentorshipPair = z.infer<typeof insertMentorshipPairSchema>;\n\n\nexport type JobStatus = \"queued\" | \"running\" | \"done\" | \"failed\" | \"cancelled\";\nexport type SessionStatus = \"active\" | \"inactive\" | \"expired\";\nexport type BackendStatus = \"available\" | \"busy\" | \"maintenance\" | \"offline\";\nexport type WorkspaceStatus = \"active\" | \"paused\" | \"completed\" | \"archived\";\nexport type WorkspacePrivacy = \"public\" | \"private\";\nexport type WorkspaceMemberRole = \"owner\" | \"admin\" | \"member\" | \"viewer\";\nexport type ProjectStatus = \"draft\" | \"running\" | \"completed\" | \"failed\" | \"paused\";\nexport type ProjectCollaboratorRole = \"owner\" | \"editor\" | \"viewer\";\n\n// Advanced Teamwork Features Schema Extensions\n\n// AI Collaboration Intelligence\nexport const aiRecommendations = pgTable(\"ai_recommendations\", {\n  id: varchar(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull(),\n  workspaceId: varchar(\"workspace_id\"),\n  type: text(\"type\").notNull(), // team_match, project_suggestion, optimization, resource_allocation\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  confidence: integer(\"confidence\").notNull(), // 0-100\n  data: jsonb(\"data\"), // recommendation-specific data\n  status: text(\"status\").notNull().default(\"pending\"), // pending, applied, dismissed\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  expiresAt: timestamp(\"expires_at\"),\n});\n\n// Real-time Collaboration\nexport const liveCollaborationSessions = pgTable(\"live_collaboration_sessions\", {\n  id: varchar(\"id\").primaryKey(),\n  projectId: varchar(\"project_id\").notNull(),\n  type: text(\"type\").notNull(), // circuit_edit, whiteboard, voice_chat, screen_share\n  hostUserId: varchar(\"host_user_id\").notNull(),\n  participants: jsonb(\"participants\").$type<string[]>(),\n  data: jsonb(\"data\"), // session-specific data\n  status: text(\"status\").notNull().default(\"active\"), // active, paused, ended\n  startedAt: timestamp(\"started_at\").notNull().default(sql`now()`),\n  endedAt: timestamp(\"ended_at\"),\n});\n\nexport const liveEdits = pgTable(\"live_edits\", {\n  id: varchar(\"id\").primaryKey(),\n  sessionId: varchar(\"session_id\").notNull(),\n  userId: varchar(\"user_id\").notNull(),\n  operation: text(\"operation\").notNull(), // insert, delete, update, move\n  position: integer(\"position\"),\n  content: text(\"content\"),\n  timestamp: timestamp(\"timestamp\").notNull().default(sql`now()`),\n});\n\n// Gamification System\nexport const achievements = pgTable(\"achievements\", {\n  id: varchar(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  icon: text(\"icon\").notNull(),\n  category: text(\"category\").notNull(), // collaboration, optimization, innovation, mentoring\n  points: integer(\"points\").notNull(),\n  rarity: text(\"rarity\").notNull(), // common, uncommon, rare, epic, legendary\n  requirements: jsonb(\"requirements\"), // achievement requirements\n});\n\nexport const userAchievements = pgTable(\"user_achievements\", {\n  id: varchar(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull(),\n  achievementId: varchar(\"achievement_id\").notNull(),\n  unlockedAt: timestamp(\"unlocked_at\").notNull().default(sql`now()`),\n  data: jsonb(\"data\"), // achievement-specific data\n});\n\nexport const challenges = pgTable(\"challenges\", {\n  id: varchar(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  type: text(\"type\").notNull(), // individual, team, global\n  category: text(\"category\").notNull(), // algorithm, optimization, collaboration\n  difficulty: text(\"difficulty\").notNull(), // beginner, intermediate, advanced, expert\n  requirements: jsonb(\"requirements\"),\n  rewards: jsonb(\"rewards\"),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  status: text(\"status\").notNull().default(\"active\"), // active, completed, expired\n  maxParticipants: integer(\"max_participants\"),\n  currentParticipants: integer(\"current_participants\").default(0),\n});\n\nexport const challengeParticipants = pgTable(\"challenge_participants\", {\n  id: varchar(\"id\").primaryKey(),\n  challengeId: varchar(\"challenge_id\").notNull(),\n  userId: varchar(\"user_id\"),\n  workspaceId: varchar(\"workspace_id\"),\n  progress: integer(\"progress\").default(0), // 0-100\n  score: integer(\"score\").default(0),\n  status: text(\"status\").notNull().default(\"in_progress\"), // in_progress, completed, failed\n  joinedAt: timestamp(\"joined_at\").notNull().default(sql`now()`),\n  completedAt: timestamp(\"completed_at\"),\n  data: jsonb(\"data\"),\n});\n\n// Advanced Analytics\nexport const collaborationMetrics = pgTable(\"collaboration_metrics\", {\n  id: varchar(\"id\").primaryKey(),\n  workspaceId: varchar(\"workspace_id\").notNull(),\n  userId: varchar(\"user_id\"),\n  metricType: text(\"metric_type\").notNull(), // communication, productivity, innovation, leadership\n  value: integer(\"value\").notNull(),\n  period: text(\"period\").notNull(), // daily, weekly, monthly\n  date: timestamp(\"date\").notNull(),\n  data: jsonb(\"data\"),\n});\n\nexport const quantumInsights = pgTable(\"quantum_insights\", {\n  id: varchar(\"id\").primaryKey(),\n  workspaceId: varchar(\"workspace_id\").notNull(),\n  projectId: varchar(\"project_id\"),\n  insightType: text(\"insight_type\").notNull(), // performance, optimization, error_pattern, breakthrough\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  severity: text(\"severity\").notNull(), // info, warning, critical, breakthrough\n  actionRequired: boolean(\"action_required\").default(false),\n  data: jsonb(\"data\"),\n  generatedAt: timestamp(\"generated_at\").notNull().default(sql`now()`),\n  acknowledgedBy: jsonb(\"acknowledged_by\").$type<string[]>(),\n});\n\n// Smart Notifications\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull(),\n  type: text(\"type\").notNull(), // ai_suggestion, collaboration_invite, achievement, insight, hardware_ready\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  priority: text(\"priority\").notNull().default(\"medium\"), // low, medium, high, urgent\n  category: text(\"category\").notNull(),\n  actionUrl: text(\"action_url\"),\n  actionLabel: text(\"action_label\"),\n  data: jsonb(\"data\"),\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  readAt: timestamp(\"read_at\"),\n});\n\n// Knowledge Sharing\nexport const knowledgeArticles = pgTable(\"knowledge_articles\", {\n  id: varchar(\"id\").primaryKey(),\n  workspaceId: varchar(\"workspace_id\").notNull(),\n  authorId: varchar(\"author_id\").notNull(),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  summary: text(\"summary\"),\n  tags: jsonb(\"tags\").$type<string[]>(),\n  category: text(\"category\").notNull(), // tutorial, research, best_practices, troubleshooting\n  difficulty: text(\"difficulty\").notNull(), // beginner, intermediate, advanced\n  status: text(\"status\").notNull().default(\"draft\"), // draft, published, archived\n  version: integer(\"version\").default(1),\n  collaborators: jsonb(\"collaborators\").$type<string[]>(),\n  views: integer(\"views\").default(0),\n  likes: integer(\"likes\").default(0),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n  publishedAt: timestamp(\"published_at\"),\n});\n\nexport const experiments = pgTable(\"experiments\", {\n  id: varchar(\"id\").primaryKey(),\n  workspaceId: varchar(\"workspace_id\").notNull(),\n  leaderId: varchar(\"leader_id\").notNull(),\n  name: text(\"name\").notNull(),\n  hypothesis: text(\"hypothesis\").notNull(),\n  methodology: text(\"methodology\"),\n  expectedOutcome: text(\"expected_outcome\"),\n  actualOutcome: text(\"actual_outcome\"),\n  status: text(\"status\").notNull().default(\"planning\"), // planning, active, analyzing, completed, failed\n  progress: integer(\"progress\").default(0), // 0-100\n  teamMembers: jsonb(\"team_members\").$type<string[]>(),\n  data: jsonb(\"data\"), // experiment-specific data\n  results: jsonb(\"results\"),\n  insights: jsonb(\"insights\"),\n  nextSteps: text(\"next_steps\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n  completedAt: timestamp(\"completed_at\"),\n});\n\n// Advanced Hardware Management\nexport const hardwareReservations = pgTable(\"hardware_reservations\", {\n  id: varchar(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull(),\n  workspaceId: varchar(\"workspace_id\").notNull(),\n  backendId: varchar(\"backend_id\").notNull(),\n  purpose: text(\"purpose\").notNull(),\n  priority: text(\"priority\").notNull().default(\"normal\"), // low, normal, high, urgent\n  estimatedDuration: integer(\"estimated_duration\").notNull(), // minutes\n  actualDuration: integer(\"actual_duration\"),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, confirmed, active, completed, cancelled, failed\n  scheduledStart: timestamp(\"scheduled_start\").notNull(),\n  scheduledEnd: timestamp(\"scheduled_end\").notNull(),\n  actualStart: timestamp(\"actual_start\"),\n  actualEnd: timestamp(\"actual_end\"),\n  autoBackup: boolean(\"auto_backup\").default(true),\n  backupBackends: jsonb(\"backup_backends\").$type<string[]>(),\n  requirements: jsonb(\"requirements\"),\n  results: jsonb(\"results\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const hardwareOptimizations = pgTable(\"hardware_optimizations\", {\n  id: varchar(\"id\").primaryKey(),\n  workspaceId: varchar(\"workspace_id\").notNull(),\n  backendId: varchar(\"backend_id\").notNull(),\n  optimizationType: text(\"optimization_type\").notNull(), // cost, performance, reliability, efficiency\n  description: text(\"description\").notNull(),\n  parameters: jsonb(\"parameters\"),\n  expectedImprovement: integer(\"expected_improvement\"), // percentage\n  actualImprovement: integer(\"actual_improvement\"),\n  status: text(\"status\").notNull().default(\"suggested\"), // suggested, testing, implemented, rejected\n  implementedAt: timestamp(\"implemented_at\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\n// Community Features\nexport const communityEvents = pgTable(\"community_events\", {\n  id: varchar(\"id\").primaryKey(),\n  organizerId: varchar(\"organizer_id\").notNull(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  type: text(\"type\").notNull(), // workshop, hackathon, conference, meetup, collaboration\n  category: text(\"category\").notNull(), // learning, research, networking, competition\n  maxParticipants: integer(\"max_participants\"),\n  currentParticipants: integer(\"current_participants\").default(0),\n  isPublic: boolean(\"is_public\").default(true),\n  skillLevel: text(\"skill_level\").notNull(), // beginner, intermediate, advanced, all\n  prerequisites: jsonb(\"prerequisites\"),\n  agenda: jsonb(\"agenda\"),\n  resources: jsonb(\"resources\"),\n  location: text(\"location\"), // virtual, physical address, or hybrid\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  registrationDeadline: timestamp(\"registration_deadline\"),\n  status: text(\"status\").notNull().default(\"upcoming\"), // upcoming, active, completed, cancelled\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const eventParticipants = pgTable(\"event_participants\", {\n  id: varchar(\"id\").primaryKey(),\n  eventId: varchar(\"event_id\").notNull(),\n  userId: varchar(\"user_id\").notNull(),\n  role: text(\"role\").notNull().default(\"participant\"), // participant, speaker, mentor, organizer\n  status: text(\"status\").notNull().default(\"registered\"), // registered, attended, no_show, cancelled\n  registeredAt: timestamp(\"registered_at\").notNull().default(sql`now()`),\n  checkedInAt: timestamp(\"checked_in_at\"),\n  feedback: jsonb(\"feedback\"),\n});\n\nexport const researchPapers = pgTable(\"research_papers\", {\n  id: varchar(\"id\").primaryKey(),\n  workspaceId: varchar(\"workspace_id\").notNull(),\n  leadAuthorId: varchar(\"lead_author_id\").notNull(),\n  title: text(\"title\").notNull(),\n  abstract: text(\"abstract\").notNull(),\n  content: text(\"content\").notNull(),\n  coAuthors: jsonb(\"co_authors\").$type<string[]>(),\n  keywords: jsonb(\"keywords\").$type<string[]>(),\n  references: jsonb(\"references\"),\n  figures: jsonb(\"figures\"),\n  status: text(\"status\").notNull().default(\"draft\"), // draft, review, revision, published, rejected\n  venue: text(\"venue\"), // conference, journal, preprint\n  submissionDate: timestamp(\"submission_date\"),\n  reviewStatus: text(\"review_status\"), // pending, in_review, accepted, rejected, revision_requested\n  reviewFeedback: jsonb(\"review_feedback\"),\n  citations: integer(\"citations\").default(0),\n  downloads: integer(\"downloads\").default(0),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n  publishedAt: timestamp(\"published_at\"),\n});\n\n// Chat and Communication\nexport const chatChannels = pgTable(\"chat_channels\", {\n  id: varchar(\"id\").primaryKey(),\n  workspaceId: varchar(\"workspace_id\").notNull(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  type: text(\"type\").notNull().default(\"general\"), // general, research, hardware, random, ai_assistant\n  isPrivate: boolean(\"is_private\").default(false),\n  members: jsonb(\"members\").$type<string[]>(),\n  moderators: jsonb(\"moderators\").$type<string[]>(),\n  settings: jsonb(\"settings\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  createdBy: varchar(\"created_by\").notNull(),\n});\n\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey(),\n  channelId: varchar(\"channel_id\").notNull(),\n  userId: varchar(\"user_id\").notNull(),\n  content: text(\"content\").notNull(),\n  type: text(\"type\").notNull().default(\"text\"), // text, code, file, system, ai_response\n  replyToId: varchar(\"reply_to_id\"),\n  attachments: jsonb(\"attachments\"),\n  reactions: jsonb(\"reactions\"),\n  isEdited: boolean(\"is_edited\").default(false),\n  isDeleted: boolean(\"is_deleted\").default(false),\n  sentAt: timestamp(\"sent_at\").notNull().default(sql`now()`),\n  editedAt: timestamp(\"edited_at\"),\n  deletedAt: timestamp(\"deleted_at\"),\n});\n\n// User Profiles and Skills\nexport const userProfiles = pgTable(\"user_profiles\", {\n  id: varchar(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().unique(),\n  displayName: text(\"display_name\").notNull(),\n  bio: text(\"bio\"),\n  avatar: text(\"avatar\"),\n  title: text(\"title\"), // Quantum Researcher, PhD Student, etc.\n  organization: text(\"organization\"),\n  location: text(\"location\"),\n  website: text(\"website\"),\n  skills: jsonb(\"skills\").$type<string[]>(),\n  interests: jsonb(\"interests\").$type<string[]>(),\n  experience: text(\"experience\"), // beginner, intermediate, advanced, expert\n  isPublic: boolean(\"is_public\").default(true),\n  isMentor: boolean(\"is_mentor\").default(false),\n  mentorshipAreas: jsonb(\"mentorship_areas\").$type<string[]>(),\n  totalPoints: integer(\"total_points\").default(0),\n  level: integer(\"level\").default(1),\n  streak: integer(\"streak\").default(0), // consecutive days active\n  lastActiveAt: timestamp(\"last_active_at\").default(sql`now()`),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\n// Mentorship System\nexport const mentorshipPairs = pgTable(\"mentorship_pairs\", {\n  id: varchar(\"id\").primaryKey(),\n  mentorId: varchar(\"mentor_id\").notNull(),\n  menteeId: varchar(\"mentee_id\").notNull(),\n  focus: text(\"focus\").notNull(), // quantum_algorithms, hardware, research_methods, etc.\n  status: text(\"status\").notNull().default(\"pending\"), // pending, active, completed, cancelled\n  duration: integer(\"duration\"), // months\n  goals: jsonb(\"goals\"),\n  progress: jsonb(\"progress\"),\n  feedback: jsonb(\"feedback\"),\n  startedAt: timestamp(\"started_at\").default(sql`now()`),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\n// Insert schemas for advanced teamwork features\nexport const insertAiRecommendationSchema = createInsertSchema(aiRecommendations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertLiveCollaborationSessionSchema = createInsertSchema(liveCollaborationSessions).omit({\n  id: true,\n  startedAt: true,\n});\n\nexport const insertLiveEditSchema = createInsertSchema(liveEdits).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertAchievementSchema = createInsertSchema(achievements).omit({\n  id: true,\n});\n\nexport const insertUserAchievementSchema = createInsertSchema(userAchievements).omit({\n  id: true,\n  unlockedAt: true,\n});\n\nexport const insertChallengeSchema = createInsertSchema(challenges).omit({\n  id: true,\n});\n\nexport const insertChallengeParticipantSchema = createInsertSchema(challengeParticipants).omit({\n  id: true,\n  joinedAt: true,\n});\n\nexport const insertCollaborationMetricSchema = createInsertSchema(collaborationMetrics).omit({\n  id: true,\n});\n\nexport const insertQuantumInsightSchema = createInsertSchema(quantumInsights).omit({\n  id: true,\n  generatedAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertKnowledgeArticleSchema = createInsertSchema(knowledgeArticles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertExperimentSchema = createInsertSchema(experiments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertHardwareReservationSchema = createInsertSchema(hardwareReservations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertHardwareOptimizationSchema = createInsertSchema(hardwareOptimizations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCommunityEventSchema = createInsertSchema(communityEvents).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEventParticipantSchema = createInsertSchema(eventParticipants).omit({\n  id: true,\n  registeredAt: true,\n});\n\nexport const insertResearchPaperSchema = createInsertSchema(researchPapers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertChatChannelSchema = createInsertSchema(chatChannels).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({\n  id: true,\n  sentAt: true,\n});\n\nexport const insertUserProfileSchema = createInsertSchema(userProfiles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMentorshipPairSchema = createInsertSchema(mentorshipPairs).omit({\n  id: true,\n  createdAt: true,\n});\n","size_bytes":28244},"client/src/App.tsx":{"content":"import { QueryClientProvider } from \"@tanstack/react-query\";\nimport { BrowserRouter as Router, Routes, Route, Navigate } from \"react-router-dom\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ui/theme-provider\";\nimport Landing from \"@/pages/landing\";\nimport Login from \"@/pages/login\";\nimport Signup from \"@/pages/signup\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Teamwork from \"@/pages/teamwork\";\nimport QuantumQuest from \"@/pages/quantum-quest\";\nimport NotFound from \"@/pages/not-found\";\n\n// Protected Route Component\nfunction ProtectedRoute({ children }: { children: React.ReactNode }) {\n  const isAuthenticated = !!localStorage.getItem('auth-token');\n  \n  if (!isAuthenticated) {\n    return <Navigate to=\"/\" replace />;\n  }\n  \n  return <>{children}</>;\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\" storageKey=\"quantum-dashboard-theme\">\n        <TooltipProvider>\n          <Toaster />\n          <Router>\n            <Routes>\n              <Route path=\"/\" element={<Landing />} />\n              <Route path=\"/login\" element={<Login />} />\n              <Route path=\"/signup\" element={<Signup />} />\n              <Route \n                path=\"/dashboard\" \n                element={\n                  <ProtectedRoute>\n                    <Dashboard />\n                  </ProtectedRoute>\n                } \n              />\n              <Route \n                path=\"/teamwork\" \n                element={\n                  <ProtectedRoute>\n                    <Teamwork />\n                  </ProtectedRoute>\n                } \n              />\n              <Route \n                path=\"/quantum-quest\" \n                element={\n                  <ProtectedRoute>\n                    <QuantumQuest />\n                  </ProtectedRoute>\n                } \n              />\n              <Route path=\"*\" element={<NotFound />} />\n            </Routes>\n          </Router>\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":2221},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Smooth scrolling */\nhtml {\n  scroll-behavior: smooth;\n}\n\n/* Custom scrollbar styles for notification panel */\n.notification-scroll::-webkit-scrollbar {\n  width: 6px;\n}\n\n.notification-scroll::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n.notification-scroll::-webkit-scrollbar-thumb {\n  background: #cbd5e1;\n  border-radius: 3px;\n}\n\n.notification-scroll::-webkit-scrollbar-thumb:hover {\n  background: #94a3b8;\n}\n\n.dark .notification-scroll::-webkit-scrollbar-thumb {\n  background: #475569;\n}\n\n.dark .notification-scroll::-webkit-scrollbar-thumb:hover {\n  background: #64748b;\n}\n\n/* Quantum-themed animations */\n@keyframes quantum-glow {\n  0%, 100% {\n    box-shadow: 0 0 5px rgba(59, 130, 246, 0.5);\n  }\n  50% {\n    box-shadow: 0 0 20px rgba(59, 130, 246, 0.8), 0 0 30px rgba(147, 51, 234, 0.6);\n  }\n}\n\n.quantum-glow {\n  animation: quantum-glow 2s ease-in-out infinite;\n}\n\n@keyframes float {\n  0%, 100% {\n    transform: translateY(0px);\n  }\n  50% {\n    transform: translateY(-10px);\n  }\n}\n\n.floating {\n  animation: float 3s ease-in-out infinite;\n}\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: 'IBM Plex Sans', 'Open Sans', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'IBM Plex Mono', 'Menlo', monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Quantum theme colors */\n  --quantum-blue: #0066ff;\n  --quantum-purple: #6366f1;\n  --quantum-cyan: #06b6d4;\n  --quantum-pink: #ec4899;\n  --quantum-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  --quantum-glow: 0 0 20px rgba(102, 102, 234, 0.3);\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: 'IBM Plex Sans', 'Open Sans', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'IBM Plex Mono', 'Menlo', monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n\n  /* Dark mode quantum colors */\n  --quantum-blue: hsl(215 100% 60%);\n  --quantum-purple: hsl(260 78% 70%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  /* Custom scrollbar styles */\n  ::-webkit-scrollbar {\n    width: 8px;\n    height: 8px;\n  }\n\n  ::-webkit-scrollbar-track {\n    @apply bg-gray-100 dark:bg-gray-800;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    @apply bg-gray-300 dark:bg-gray-600 rounded-full;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    @apply bg-gray-400 dark:bg-gray-500;\n  }\n}\n\n@layer utilities {\n  /* Enhanced glassmorphism utilities */\n  .glass {\n    @apply backdrop-blur-md bg-white/70 dark:bg-gray-800/70;\n  }\n\n  .glass-strong {\n    @apply backdrop-blur-lg bg-white/80 dark:bg-gray-800/80;\n  }\n\n  .glass-border {\n    @apply border border-gray-200/50 dark:border-gray-700/50;\n  }\n\n  /* Enhanced animations */\n  .animate-pulse-slow {\n    animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n\n  .animate-fade-in {\n    animation: fadeIn 0.5s ease-in-out;\n  }\n\n  .animate-slide-up {\n    animation: slideUp 0.3s ease-out;\n  }\n\n  .animate-scale-in {\n    animation: scaleIn 0.2s ease-out;\n  }\n\n  .animate-glow {\n    animation: glow 2s ease-in-out infinite alternate;\n  }\n\n  /* Quantum-themed gradient backgrounds */\n  .quantum-gradient {\n    background: linear-gradient(135deg, var(--quantum-blue), var(--quantum-purple));\n  }\n\n  .quantum-gradient-subtle {\n    background: linear-gradient(135deg, \n      hsl(215 100% 53% / 0.1), \n      hsl(260 78% 62% / 0.1)\n    );\n  }\n\n  .quantum-gradient-hover:hover {\n    background: linear-gradient(135deg, \n      hsl(215 100% 53% / 0.15), \n      hsl(260 78% 62% / 0.15)\n    );\n    transition: background 0.3s ease;\n  }\n\n  /* Beautiful hover effects */\n  .hover-lift:hover {\n    transform: translateY(-2px);\n    transition: transform 0.2s ease;\n    box-shadow: 0 8px 25px -8px rgba(0, 0, 0, 0.2);\n  }\n\n  .hover-glow:hover {\n    box-shadow: 0 0 20px hsl(var(--quantum-blue) / 0.3);\n    transition: box-shadow 0.3s ease;\n  }\n\n  /* Status indicators with enhanced styling */\n  .status-indicator {\n    @apply relative overflow-hidden;\n  }\n\n  .status-indicator::before {\n    content: '';\n    @apply absolute inset-0 bg-gradient-to-r opacity-0 transition-opacity duration-300;\n  }\n\n  .status-indicator.running::before {\n    @apply from-green-400/20 to-blue-400/20 opacity-100;\n    animation: shimmer 2s ease-in-out infinite;\n  }\n\n  .status-indicator.queued::before {\n    @apply from-yellow-400/20 to-orange-400/20 opacity-100;\n  }\n\n  .status-indicator.completed::before {\n    @apply from-blue-400/20 to-purple-400/20 opacity-100;\n  }\n\n  /* Enhanced borders and shadows */\n  .border-quantum {\n    border-image: linear-gradient(135deg, var(--quantum-blue), var(--quantum-purple)) 1;\n  }\n\n  .shadow-quantum {\n    box-shadow: 0 4px 20px hsl(var(--quantum-blue) / 0.1), \n                0 1px 3px hsl(var(--quantum-purple) / 0.1);\n  }\n\n  .shadow-quantum-lg {\n    box-shadow: 0 10px 40px hsl(var(--quantum-blue) / 0.15), \n                0 4px 6px hsl(var(--quantum-purple) / 0.1);\n  }\n}\n\n@keyframes fadeIn {\n  0% { opacity: 0; }\n  100% { opacity: 1; }\n}\n\n@keyframes slideUp {\n  0% { \n    transform: translateY(10px); \n    opacity: 0; \n  }\n  100% { \n    transform: translateY(0); \n    opacity: 1; \n  }\n}\n\n@keyframes scaleIn {\n  0% { \n    transform: scale(0.9); \n    opacity: 0; \n  }\n  100% { \n    transform: scale(1); \n    opacity: 1; \n  }\n}\n\n@keyframes glow {\n  0% { \n    box-shadow: 0 0 5px hsl(var(--quantum-blue) / 0.2); \n  }\n  100% { \n    box-shadow: 0 0 20px hsl(var(--quantum-blue) / 0.4), \n                0 0 30px hsl(var(--quantum-purple) / 0.3);\n  }\n}\n\n@keyframes shimmer {\n  0% { \n    transform: translateX(-100%); \n  }\n  100% { \n    transform: translateX(100%); \n  }\n}","size_bytes":10145},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-auth.ts":{"content":"\nimport { useState, useEffect } from 'react';\n\nexport interface User {\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport function useAuth() {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check if user is authenticated on component mount\n    const token = localStorage.getItem('auth-token');\n    const userData = localStorage.getItem('user-data');\n    \n    if (token && userData) {\n      setIsAuthenticated(true);\n      setUser(JSON.parse(userData));\n    }\n    \n    setIsLoading(false);\n  }, []);\n\n  const login = (userData: User) => {\n    try {\n      // Simulate login - in a real app, this would make an API call\n      localStorage.setItem('auth-token', 'demo-token-' + Date.now());\n      localStorage.setItem('user-data', JSON.stringify(userData));\n      setIsAuthenticated(true);\n      setUser(userData);\n      return Promise.resolve();\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('auth-token');\n    localStorage.removeItem('user-data');\n    setIsAuthenticated(false);\n    setUser(null);\n  };\n\n  const signup = (userData: Omit<User, 'id'>) => {\n    try {\n      // Simulate signup - in a real app, this would make an API call\n      const newUser: User = {\n        ...userData,\n        id: 'user_' + Date.now()\n      };\n      \n      return login(newUser);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  };\n\n  return {\n    isAuthenticated,\n    user,\n    isLoading,\n    login,\n    logout,\n    signup\n  };\n}\n","size_bytes":1666},"client/src/hooks/use-job-notifications.ts":{"content":"\nimport { useEffect, useRef } from \"react\";\nimport { useJobs } from \"./use-jobs\";\nimport { toast } from \"./use-toast\";\nimport type { Job } from \"@shared/schema\";\n\nexport function useJobNotifications() {\n  const { data: jobsData } = useJobs(1, 100);\n  const jobs = jobsData?.jobs || [];\n  const prevJobsRef = useRef<Job[]>([]);\n\n  useEffect(() => {\n    const prevJobs = prevJobsRef.current;\n    \n    if (prevJobs.length === 0) {\n      prevJobsRef.current = jobs;\n      return;\n    }\n\n    // Check for newly completed jobs\n    jobs.forEach(currentJob => {\n      const prevJob = prevJobs.find(job => job.id === currentJob.id);\n      \n      if (prevJob && prevJob.status !== currentJob.status) {\n        // Job status changed\n        if (currentJob.status === \"done\") {\n          toast({\n            title: \"Job Completed Successfully! ✅\",\n            description: `${currentJob.name} has finished running on ${currentJob.backend}`,\n            duration: 5000,\n          });\n        } else if (currentJob.status === \"failed\") {\n          toast({\n            title: \"Job Failed ❌\",\n            description: `${currentJob.name} failed on ${currentJob.backend}`,\n            duration: 7000,\n            variant: \"destructive\",\n          });\n        } else if (currentJob.status === \"running\" && prevJob.status === \"queued\") {\n          toast({\n            title: \"Job Started 🚀\",\n            description: `${currentJob.name} is now running on ${currentJob.backend}`,\n            duration: 3000,\n          });\n        }\n      } else if (!prevJob && currentJob.status !== \"queued\") {\n        // New job that's not in queue (likely just created)\n        if (currentJob.status === \"running\") {\n          toast({\n            title: \"New Job Started 🚀\",\n            description: `${currentJob.name} is running on ${currentJob.backend}`,\n            duration: 3000,\n          });\n        }\n      }\n    });\n\n    prevJobsRef.current = jobs;\n  }, [jobs]);\n\n  // Return notification counts for UI\n  const recentCompletedJobs = jobs.filter(job => \n    (job.status === \"done\" || job.status === \"failed\") && \n    job.endTime && \n    new Date(job.endTime).getTime() > Date.now() - 24 * 60 * 60 * 1000\n  );\n  \n  const runningJobs = jobs.filter(job => job.status === \"running\");\n  const queuedJobs = jobs.filter(job => job.status === \"queued\");\n\n  return {\n    recentCompletedJobs,\n    runningJobs,\n    queuedJobs,\n    totalNotifications: recentCompletedJobs.length + runningJobs.length,\n  };\n}\n","size_bytes":2481},"client/src/hooks/use-jobs.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Job, InsertJob, JobStatus, Backend, Session } from \"@shared/schema\";\n\nexport function useJobs(page = 1, limit = 10) {\n  return useQuery({\n    queryKey: [\"/api/jobs\", page, limit],\n    queryFn: async () => {\n      const response = await fetch(`/api/jobs?page=${page}&limit=${limit}`);\n      if (!response.ok) throw new Error(\"Failed to fetch jobs\");\n      return response.json() as Promise<{\n        jobs: Job[];\n        pagination: {\n          currentPage: number;\n          totalPages: number;\n          totalJobs: number;\n          limit: number;\n        };\n      }>;\n    },\n    refetchInterval: 8000, // Refetch every 8 seconds for more live updates\n  });\n}\n\nexport function useSearchJobs(query: string) {\n  return useQuery({\n    queryKey: [\"/api/jobs/search\", query],\n    queryFn: async () => {\n      if (!query) return [];\n      const response = await fetch(`/api/jobs/search?q=${encodeURIComponent(query)}`);\n      if (!response.ok) throw new Error(\"Failed to search jobs\");\n      return response.json() as Promise<Job[]>;\n    },\n    enabled: query.length > 0,\n  });\n}\n\nexport function useJobStats() {\n  return useQuery({\n    queryKey: [\"/api/analytics/stats\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/analytics/stats\");\n      if (!response.ok) throw new Error(\"Failed to fetch stats\");\n      return response.json() as Promise<{\n        totalJobs: number;\n        runningJobs: number;\n        queuedJobs: number;\n        completedJobs: number;\n        failedJobs: number;\n        successRate: number;\n      }>;\n    },\n    refetchInterval: 3000, // Refetch every 3 seconds for live feel\n  });\n}\n\nexport function useJobTrends() {\n  return useQuery({\n    queryKey: [\"/api/analytics/trends\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/analytics/trends\");\n      if (!response.ok) throw new Error(\"Failed to fetch trends\");\n      return response.json() as Promise<Array<{\n        date: string;\n        count: number;\n        label: string;\n      }>>;\n    },\n    refetchInterval: 10000, // Refetch every 10 seconds for live trends\n  });\n}\n\nexport function useBackends() {\n  return useQuery({\n    queryKey: [\"/api/backends\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/backends\");\n      if (!response.ok) throw new Error(\"Failed to fetch backends\");\n      return response.json() as Promise<Backend[]>;\n    },\n    refetchInterval: 15000, // Refetch every 15 seconds\n  });\n}\n\nexport function useSessions() {\n  return useQuery({\n    queryKey: [\"/api/sessions\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/sessions\");\n      if (!response.ok) throw new Error(\"Failed to fetch sessions\");\n      return response.json() as Promise<Session[]>;\n    },\n  });\n}\n\nexport function useCreateJob() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (job: InsertJob) => {\n      return await apiRequest(\"POST\", \"/api/jobs\", job);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/stats\"] });\n    },\n  });\n}\n\nexport function useUpdateJobStatus() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async ({ id, status, error }: { id: string; status: JobStatus; error?: string }) => {\n      return await apiRequest(\"PATCH\", `/api/jobs/${id}/status`, { status, error });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/stats\"] });\n    },\n  });\n}\n\nexport function useDeleteJob() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/jobs/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/stats\"] });\n    },\n  });\n}\n","size_bytes":4151},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-theme.ts":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeProviderContextType = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderContextType | undefined>(undefined);\n\nexport function useTheme() {\n  const context = useContext(ThemeProviderContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n\nexport { ThemeProviderContext };\n","size_bytes":542},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/export.ts":{"content":"export async function exportToCSV() {\n  try {\n    const response = await fetch(\"/api/export/csv\");\n    if (!response.ok) throw new Error(\"Failed to export CSV\");\n    \n    const blob = await response.blob();\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.style.display = \"none\";\n    a.href = url;\n    a.download = \"quantum_jobs.csv\";\n    document.body.appendChild(a);\n    a.click();\n    window.URL.revokeObjectURL(url);\n    document.body.removeChild(a);\n  } catch (error) {\n    throw new Error(\"Failed to export CSV\");\n  }\n}\n\nexport async function exportToJSON() {\n  try {\n    const response = await fetch(\"/api/export/json\");\n    if (!response.ok) throw new Error(\"Failed to export JSON\");\n    \n    const blob = await response.blob();\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.style.display = \"none\";\n    a.href = url;\n    a.download = \"quantum_jobs.json\";\n    document.body.appendChild(a);\n    a.click();\n    window.URL.revokeObjectURL(url);\n    document.body.removeChild(a);\n  } catch (error) {\n    throw new Error(\"Failed to export JSON\");\n  }\n}\n","size_bytes":1158},"client/src/lib/job-simulator.ts":{"content":"import type { JobStatus } from \"@shared/schema\";\n\nexport class JobSimulator {\n  private static instance: JobSimulator;\n  private callbacks: Array<(jobId: string, status: JobStatus, error?: string) => void> = [];\n\n  static getInstance() {\n    if (!JobSimulator.instance) {\n      JobSimulator.instance = new JobSimulator();\n    }\n    return JobSimulator.instance;\n  }\n\n  onStatusChange(callback: (jobId: string, status: JobStatus, error?: string) => void) {\n    this.callbacks.push(callback);\n  }\n\n  private notifyStatusChange(jobId: string, status: JobStatus, error?: string) {\n    this.callbacks.forEach(callback => callback(jobId, status, error));\n  }\n\n  simulateJobTransition(jobId: string, currentStatus: JobStatus) {\n    // Simulate realistic job state transitions\n    const transitions: Record<JobStatus, { next: JobStatus; probability: number; delay: number }[]> = {\n      queued: [\n        { next: \"running\", probability: 0.7, delay: 5000 },\n        { next: \"cancelled\", probability: 0.05, delay: 2000 },\n      ],\n      running: [\n        { next: \"done\", probability: 0.85, delay: 30000 },\n        { next: \"failed\", probability: 0.15, delay: 10000 },\n      ],\n      done: [],\n      failed: [],\n      cancelled: [],\n    };\n\n    const possibleTransitions = transitions[currentStatus];\n    if (possibleTransitions.length === 0) return;\n\n    // Select a random transition based on probability\n    const random = Math.random();\n    let cumulativeProbability = 0;\n    \n    for (const transition of possibleTransitions) {\n      cumulativeProbability += transition.probability;\n      if (random <= cumulativeProbability) {\n        setTimeout(() => {\n          const error = transition.next === \"failed\" ? \"Quantum circuit execution error\" : undefined;\n          this.notifyStatusChange(jobId, transition.next, error);\n        }, transition.delay + Math.random() * 10000); // Add some randomness\n        break;\n      }\n    }\n  }\n}\n","size_bytes":1929},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState, useCallback, useEffect } from \"react\";\nimport { useSearchParams, useNavigate } from \"react-router-dom\";\nimport { motion } from \"framer-motion\";\nimport { RefreshCw, CheckCircle, XCircle, Clock, Play, Activity, Search, Bell, Plus, Settings, Menu, X, Users, BarChart3, Zap } from \"lucide-react\";\nimport { Header } from \"@/components/dashboard/header\";\nimport { StatsCards } from \"@/components/dashboard/stats-cards\";\nimport { JobsTable } from \"@/components/dashboard/jobs-table\";\nimport { TimelineView } from \"@/components/dashboard/timeline-view\";\nimport { AnalyticsCharts } from \"@/components/dashboard/analytics-charts\";\nimport { Sidebar } from \"@/components/dashboard/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { JobSimulator } from \"@/lib/job-simulator\";\nimport { useUpdateJobStatus } from \"@/hooks/use-jobs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ActiveSessions } from \"@/components/dashboard/active-sessions\";\nimport { BackendAdvisor } from \"@/components/dashboard/backend-advisor\";\nimport { AllBackendsView } from \"@/components/dashboard/all-backends-view\";\nimport { SessionForm } from \"@/components/dashboard/session-form\";\nimport { NotificationPanel } from \"@/components/dashboard/notification-panel\";\nimport { AnimatePresence } from \"framer-motion\";\nimport { useJobNotifications } from \"@/hooks/use-job-notifications\";\nimport { useTheme } from \"@/hooks/use-theme\";\nimport { Card, CardHeader, CardContent } from \"@/components/ui/card\";\nimport { JobStatusDistribution } from \"@/components/dashboard/job-status-distribution\";\nimport { LiveActivityFeed } from \"@/components/dashboard/live-activity-feed\";\nimport { AIAssistant } from \"@/components/ai/ai-assistant\";\nimport { NewsPanel } from \"@/components/dashboard/news-panel\";\n\nconst containerVariants = {\n  hidden: { opacity: 0 },\n  visible: {\n    opacity: 1,\n    transition: {\n      duration: 0.3,\n      staggerChildren: 0.1,\n    },\n  },\n};\n\nconst itemVariants = {\n  hidden: { opacity: 0, y: 20 },\n  visible: {\n    opacity: 1,\n    y: 0,\n    transition: { duration: 0.5 },\n  },\n};\n\n\n\n\nexport default function Dashboard() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [refreshInterval, setRefreshInterval] = useState(10);\n  const updateJobStatus = useUpdateJobStatus();\n  const { toast } = useToast();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [showSessionForm, setShowSessionForm] = useState(false);\n  const [showNotifications, setShowNotifications] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const currentView = searchParams.get('view') || 'overview'; // Default to 'overview'\n\n  // Initialize job notifications\n  useJobNotifications();\n\n  // Set up job simulator\n  useEffect(() => {\n    const simulator = JobSimulator.getInstance();\n\n    simulator.onStatusChange((jobId, status, error) => {\n      updateJobStatus.mutate(\n        { id: jobId, status, error },\n        {\n          onSuccess: () => {\n            const statusMessages = {\n              running: \"Job started running\",\n              done: \"Job completed successfully\",\n              failed: \"Job failed\",\n              cancelled: \"Job was cancelled\",\n              queued: \"Job queued\",\n            };\n\n            const statusIcons = {\n              running: <Play className=\"w-4 h-4\" />,\n              done: <CheckCircle className=\"w-4 h-4\" />,\n              failed: <XCircle className=\"w-4 h-4\" />,\n              cancelled: <XCircle className=\"w-4 h-4\" />,\n              queued: <Clock className=\"w-4 h-4\" />,\n            };\n\n            toast({\n              title: \"Job Status Update\",\n              description: `${jobId}: ${statusMessages[status]}`,\n              variant: status === \"failed\" ? \"destructive\" : \"default\",\n            });\n          },\n        }\n      );\n    });\n  }, [updateJobStatus, toast]);\n\n  // Set up auto-refresh for IBM Quantum API endpoints\n  useEffect(() => {\n    if (refreshInterval === 0) return;\n\n    const interval = setInterval(() => {\n      queryClient.invalidateQueries({ queryKey: [\"https://runtime.quantum-computing.ibm.com/jobs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"https://runtime.quantum-computing.ibm.com/analytics/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"https://runtime.quantum-computing.ibm.com/backends\"] });\n      queryClient.invalidateQueries({ queryKey: [\"https://runtime.quantum-computing.ibm.com/sessions\"] });\n    }, refreshInterval * 1000);\n\n    return () => clearInterval(interval);\n  }, [refreshInterval]);\n\n  const handleSearch = useCallback((query: string) => {\n    setSearchQuery(query);\n  }, []);\n\n  const handleRefreshIntervalChange = useCallback((interval: number) => {\n    setRefreshInterval(interval);\n  }, []);\n\n  const handleManualRefresh = useCallback(() => {\n    queryClient.invalidateQueries({ queryKey: [\"https://runtime.quantum-computing.ibm.com/jobs\"] });\n    queryClient.invalidateQueries({ queryKey: [\"https://runtime.quantum-computing.ibm.com/analytics/stats\"] });\n    queryClient.invalidateQueries({ queryKey: [\"https://runtime.quantum-computing.ibm.com/backends\"] });\n    queryClient.invalidateQueries({ queryKey: [\"https://runtime.quantum-computing.ibm.com/sessions\"] });\n  }, []);\n\n  const handleViewChange = (view: string) => {\n    setSearchParams({ view: view });\n  };\n\n  const handleOpenSessionForm = () => {\n    setShowSessionForm(true);\n  };\n\n  const handleCloseSessionForm = () => {\n    setShowSessionForm(false);\n  };\n\n  const handleNotificationToggle = () => {\n    setShowNotifications(!showNotifications);\n  };\n\n  // Conditionally render different views (now handled by renderCurrentView)\n  if (currentView === 'all-backends') {\n    return (\n      <motion.div\n        className=\"min-h-screen bg-gradient-to-br from-gray-50 via-white to-blue-50 dark:from-gray-900 dark:via-gray-800 dark:to-blue-900/20\"\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n      >\n        {/* Floating background elements */}\n        <div className=\"fixed inset-0 overflow-hidden pointer-events-none\">\n          <motion.div\n            className=\"absolute top-1/4 left-1/4 w-96 h-96 bg-gradient-to-r from-blue-400/10 to-purple-400/10 rounded-full blur-3xl\"\n            animate={{\n              scale: [1, 1.1, 1],\n              rotate: [0, 180, 360],\n            }}\n            transition={{\n              duration: 20,\n              repeat: Infinity,\n              ease: \"linear\"\n            }}\n          />\n          <motion.div\n            className=\"absolute top-3/4 right-1/4 w-64 h-64 bg-gradient-to-r from-purple-400/10 to-pink-400/10 rounded-full blur-3xl\"\n            animate={{\n              scale: [1.1, 1, 1.1],\n              rotate: [360, 180, 0],\n            }}\n            transition={{\n              duration: 15,\n              repeat: Infinity,\n              ease: \"linear\"\n            }}\n          />\n        </div>\n\n        <Header\n          onSearch={handleSearch}\n          onRefreshIntervalChange={handleRefreshIntervalChange}\n          onManualRefresh={handleManualRefresh}\n          onViewChange={handleViewChange}\n          onNotificationToggle={handleNotificationToggle}\n        />\n\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <motion.div variants={itemVariants}>\n            <AllBackendsView onBack={() => handleViewChange('overview')} />\n          </motion.div>\n        </div>\n      </motion.div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 dark:from-gray-900 dark:via-blue-900/20 dark:to-indigo-900/20\">\n      <Header\n        onSearch={setSearchQuery}\n        onRefreshIntervalChange={setRefreshInterval}\n        onManualRefresh={handleManualRefresh}\n        onViewChange={handleViewChange}\n        onNotificationToggle={() => setShowNotifications(!showNotifications)}\n      />\n\n      <div className=\"flex\">\n        <Sidebar\n          currentView={currentView}\n          onViewChange={handleViewChange}\n        />\n\n        <main className=\"flex-1 p-6 lg:p-8\">\n          <div className=\"max-w-7xl mx-auto\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5 }}\n              className=\"mb-8\"\n            >\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n                    {currentView === 'overview' && 'Quantum Dashboard Overview'}\n                    {currentView === 'jobs' && 'Quantum Jobs Management'}\n                    {currentView === 'backends' && 'Quantum Backends Status'}\n                    {currentView === 'sessions' && 'Active Sessions'}\n                    {currentView === 'analytics' && 'Analytics & Insights'}\n                  </h1>\n                  <p className=\"text-gray-600 dark:text-gray-400\">\n                    Real-time monitoring of IBM Quantum Cloud resources\n                  </p>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"flex items-center space-x-2 px-3 py-1 bg-green-100 dark:bg-green-900/30 rounded-full\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                    <span className=\"text-sm font-medium text-green-700 dark:text-green-300\">Live Data</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n\n            <AnimatePresence mode=\"wait\">\n              <motion.div\n                key={currentView}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: -20 }}\n                transition={{ duration: 0.3 }}\n              >\n                {/* Only show StatsCards once at the top for all views */}\n                <div className=\"mb-6\">\n                  <StatsCards />\n                </div>\n\n                {/* Show search results indicator */}\n                {searchQuery && (\n                  <div className=\"mb-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Search className=\"w-4 h-4 text-blue-600\" />\n                        <span className=\"text-sm font-medium text-blue-900 dark:text-blue-100\">\n                          Searching for: \"{searchQuery}\"\n                        </span>\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => setSearchQuery(\"\")}\n                        className=\"text-blue-600 hover:text-blue-700\"\n                      >\n                        Clear\n                      </Button>\n                    </div>\n                  </div>\n                )}\n\n                {/* Comprehensive Status Overview */}\n                {currentView === 'overview' && (\n                  <div className=\"space-y-6\">\n                    {/* Analytics Charts Section */}\n                    <div className=\"mb-8\">\n                      <div className=\"flex items-center justify-between mb-6\">\n                        <div>\n                          <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">Analytics Overview</h2>\n                          <p className=\"text-gray-600 dark:text-gray-400\">Real-time insights and performance metrics</p>\n                        </div>\n                        <Button \n                          variant=\"outline\" \n                          onClick={() => handleViewChange('analytics')}\n                          className=\"flex items-center space-x-2\"\n                        >\n                          <BarChart3 className=\"w-4 h-4\" />\n                          <span>View Full Analytics</span>\n                        </Button>\n                      </div>\n                      <AnalyticsCharts />\n                    </div>\n\n                    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                      <Card className=\"bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-gray-200/50 dark:border-gray-700/50\">\n                        <CardHeader>\n                          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white flex items-center\">\n                            <Activity className=\"w-5 h-5 mr-2 text-blue-500\" />\n                            Job Status Distribution\n                          </h3>\n                        </CardHeader>\n                        <CardContent>\n                          <JobStatusDistribution />\n                        </CardContent>\n                      </Card>\n\n                      <Card className=\"bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-gray-200/50 dark:border-gray-700/50\">\n                        <CardHeader>\n                          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white flex items-center\">\n                            <Zap className=\"w-5 h-5 mr-2 text-green-500\" />\n                            Live Activity Feed\n                          </h3>\n                        </CardHeader>\n                        <CardContent>\n                          <LiveActivityFeed />\n                        </CardContent>\n                      </Card>\n                    </div>\n\n                    <Card className=\"bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-gray-200/50 dark:border-gray-700/50\">\n                      <CardHeader>\n                        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white flex items-center\">\n                          <BarChart3 className=\"w-5 h-5 mr-2 text-purple-500\" />\n                          Recent Jobs Overview\n                        </h3>\n                      </CardHeader>\n                      <CardContent>\n                        <JobsTable searchQuery={searchQuery} />\n                      </CardContent>\n                    </Card>\n                  </div>\n                )}\n                {currentView === 'analytics' && (\n                  <div className=\"space-y-6\">\n                    <div className=\"text-center mb-8\">\n                      <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n                        Analytics Dashboard\n                      </h2>\n                      <p className=\"text-gray-600 dark:text-gray-400\">\n                        Comprehensive insights into your quantum job performance\n                      </p>\n                    </div>\n                    <AnalyticsCharts />\n                  </div>\n                )}\n                {currentView === 'jobs' && <JobsTable searchQuery={searchQuery} />}\n                {currentView === 'sessions' && <ActiveSessions />}\n                {currentView === 'backends' && <AllBackendsView onBack={() => handleViewChange('overview')} />}\n              </motion.div>\n            </AnimatePresence>\n          </div>\n        </main>\n      </div>\n\n      <AnimatePresence>\n        {showNotifications && (\n          <NotificationPanel\n            isOpen={showNotifications}\n            onClose={() => setShowNotifications(false)}\n          />\n        )}\n      </AnimatePresence>\n\n      {/* News Panel - floating on all dashboard views */}\n      <NewsPanel />\n      \n      {/* AI Assistant - floating on all dashboard views */}\n      <AIAssistant />\n    </div>\n  );\n}","size_bytes":15755},"client/src/pages/landing.tsx":{"content":"import { useState } from 'react';\nimport { motion, useScroll, useTransform } from 'framer-motion';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  ArrowRight, \n  Zap, \n  Shield, \n  Code, \n  BookOpen, \n  Menu,\n  X,\n  Github,\n  Twitter,\n  Linkedin,\n  Globe,\n  Sparkles,\n  Atom,\n  Check,\n  Users,\n  Youtube\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { useAuth } from '@/hooks/use-auth';\n\n// Enhanced floating particles component with quantum-like effects\nconst FloatingParticles = () => {\n  const particles = Array.from({ length: 40 }, (_, i) => ({\n    id: i,\n    size: Math.random() * 6 + 2,\n    left: Math.random() * 100,\n    top: Math.random() * 100,\n    animationDelay: Math.random() * 8,\n    duration: Math.random() * 15 + 10,\n    color: ['blue', 'purple', 'pink', 'cyan'][Math.floor(Math.random() * 4)]\n  }));\n\n  return (\n    <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n      {particles.map((particle) => (\n        <motion.div\n          key={particle.id}\n          className={`absolute rounded-full ${\n            particle.color === 'blue' ? 'bg-blue-400/30' :\n            particle.color === 'purple' ? 'bg-purple-400/30' :\n            particle.color === 'pink' ? 'bg-pink-400/30' : 'bg-cyan-400/30'\n          }`}\n          style={{\n            width: particle.size,\n            height: particle.size,\n            left: `${particle.left}%`,\n            top: `${particle.top}%`,\n            filter: 'blur(0.5px)',\n            boxShadow: `0 0 ${particle.size * 2}px currentColor`\n          }}\n          animate={{\n            y: [0, -window.innerHeight * 0.3, 0],\n            x: [0, Math.sin(particle.id) * 100, 0],\n            opacity: [0, 1, 0.7, 1, 0],\n            scale: [0, 1, 1.2, 1, 0],\n            rotate: [0, 180, 360]\n          }}\n          transition={{\n            duration: particle.duration,\n            delay: particle.animationDelay,\n            repeat: Infinity,\n            ease: \"easeInOut\"\n          }}\n        />\n      ))}\n    </div>\n  );\n};\n\n// Quantum circuit animation component\nconst QuantumCircuit = () => {\n  return (\n    <div className=\"absolute inset-0 overflow-hidden pointer-events-none opacity-10\">\n      <svg className=\"absolute inset-0 w-full h-full\">\n        {Array.from({ length: 8 }).map((_, i) => (\n          <motion.line\n            key={i}\n            x1=\"0\"\n            y1={`${(i + 1) * 12.5}%`}\n            x2=\"100%\"\n            y2={`${(i + 1) * 12.5}%`}\n            stroke=\"currentColor\"\n            strokeWidth=\"1\"\n            className=\"text-blue-400\"\n            initial={{ pathLength: 0, opacity: 0 }}\n            animate={{ pathLength: 1, opacity: 0.3 }}\n            transition={{\n              duration: 2,\n              delay: i * 0.2,\n              repeat: Infinity,\n              repeatType: \"loop\",\n              repeatDelay: 3\n            }}\n          />\n        ))}\n        {Array.from({ length: 15 }).map((_, i) => (\n          <motion.circle\n            key={`node-${i}`}\n            cx={`${(i + 1) * 6.67}%`}\n            cy={`${Math.random() * 80 + 10}%`}\n            r=\"3\"\n            fill=\"currentColor\"\n            className=\"text-purple-400\"\n            initial={{ scale: 0, opacity: 0 }}\n            animate={{ \n              scale: [0, 1, 1.2, 1],\n              opacity: [0, 1, 0.7, 1] \n            }}\n            transition={{\n              duration: 1.5,\n              delay: i * 0.1,\n              repeat: Infinity,\n              repeatDelay: 4\n            }}\n          />\n        ))}\n      </svg>\n    </div>\n  );\n};\n\n// Holographic text effect component\nconst HolographicText = ({ children, className = \"\" }: { children: React.ReactNode, className?: string }) => {\n  return (\n    <motion.div\n      className={`relative ${className}`}\n      whileHover={{ scale: 1.02 }}\n      transition={{ duration: 0.3 }}\n    >\n      <motion.div\n        className=\"absolute inset-0 bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 bg-clip-text text-transparent blur-sm\"\n        animate={{\n          opacity: [0.5, 0.8, 0.5],\n        }}\n        transition={{\n          duration: 2,\n          repeat: Infinity,\n          ease: \"easeInOut\"\n        }}\n      >\n        {children}\n      </motion.div>\n      <div className=\"relative bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\">\n        {children}\n      </div>\n    </motion.div>\n  );\n};\n\nexport default function Landing() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const { isAuthenticated, login, signup } = useAuth();\n  const navigate = useNavigate();\n\n  const { scrollYProgress } = useScroll();\n  const backgroundY = useTransform(scrollYProgress, [0, 1], [\"0%\", \"100%\"]);\n  const textY = useTransform(scrollYProgress, [0, 1], [\"0%\", \"50%\"]);\n\n  const handleLogin = () => {\n    // Navigate to login page\n    navigate('/login');\n  };\n\n  const handleSignUp = () => {\n    // Navigate to signup page\n    navigate('/signup');\n  };\n\n  const handleGetStarted = () => {\n    if (isAuthenticated) {\n      navigate('/dashboard');\n    } else {\n      navigate('/signup');\n    }\n  };\n\n  const features = [\n    {\n      icon: <Zap className=\"w-8 h-8 text-blue-400\" />,\n      title: \"Quantum Systems on Cloud\",\n      description: \"Run real experiments on quantum hardware with instant access\"\n    },\n    {\n      icon: <Code className=\"w-8 h-8 text-purple-400\" />,\n      title: \"Developer-Friendly SDKs\",\n      description: \"Easy integration with Qiskit & APIs for seamless development\"\n    },\n    {\n      icon: <Shield className=\"w-8 h-8 text-green-400\" />,\n      title: \"Scalable & Secure\",\n      description: \"Enterprise-ready platform with bank-level security\"\n    },\n    {\n      icon: <BookOpen className=\"w-8 h-8 text-pink-400\" />,\n      title: \"Learning Resources\",\n      description: \"Comprehensive tutorials, docs, and guided quantum labs\"\n    }\n  ];\n\n  const useCases = [\n    \"Education & Research\",\n    \"Enterprise Applications\", \n    \"AI + Quantum Integration\",\n    \"Optimization Problems\"\n  ];\n\n  const plans = [\n    {\n      name: \"Free\",\n      price: \"$0\",\n      features: [\"5 quantum jobs/month\", \"Basic tutorials\", \"Community support\"],\n      cta: \"Start Free\"\n    },\n    {\n      name: \"Professional\",\n      price: \"$99\",\n      features: [\"Unlimited jobs\", \"Priority queue\", \"Advanced features\", \"Email support\"],\n      cta: \"Start Trial\",\n      popular: true\n    },\n    {\n      name: \"Enterprise\", \n      price: \"Custom\",\n      features: [\"Dedicated resources\", \"Custom integrations\", \"24/7 support\", \"SLA guarantee\"],\n      cta: \"Contact Sales\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-900 text-white overflow-x-hidden\">\n      <style>{`\n        .perspective-1000 {\n          perspective: 1000px;\n        }\n      `}</style>\n      {/* Enhanced Animated Background */}\n      <div className=\"fixed inset-0 overflow-hidden pointer-events-none\">\n        <motion.div \n          className=\"absolute inset-0 bg-gradient-to-br from-blue-900/20 via-purple-900/20 to-pink-900/20\"\n          style={{ y: backgroundY }}\n          animate={{\n            background: [\n              \"linear-gradient(135deg, rgba(29, 78, 216, 0.3) 0%, rgba(147, 51, 234, 0.25) 50%, rgba(236, 72, 153, 0.2) 100%)\",\n              \"linear-gradient(135deg, rgba(59, 130, 246, 0.3) 0%, rgba(168, 85, 247, 0.25) 50%, rgba(244, 114, 182, 0.2) 100%)\",\n              \"linear-gradient(135deg, rgba(29, 78, 216, 0.3) 0%, rgba(147, 51, 234, 0.25) 50%, rgba(236, 72, 153, 0.2) 100%)\"\n            ]\n          }}\n          transition={{\n            duration: 8,\n            repeat: Infinity,\n            ease: \"easeInOut\"\n          }}\n        />\n\n        {/* Dynamic grid pattern */}\n        <div className=\"absolute inset-0 opacity-30\">\n          <motion.div \n            className=\"absolute inset-0 bg-gradient-to-r from-blue-500/10 via-purple-500/10 to-pink-500/10\"\n            animate={{\n              opacity: [0.1, 0.2, 0.1]\n            }}\n            transition={{\n              duration: 4,\n              repeat: Infinity,\n              ease: \"easeInOut\"\n            }}\n          />\n          <motion.div \n            className=\"absolute inset-0\" \n            style={{\n              backgroundImage: `radial-gradient(circle at 30px 30px, rgba(156, 146, 172, 0.15) 2px, transparent 2px)`,\n              backgroundSize: '60px 60px'\n            }}\n            animate={{\n              backgroundPosition: ['0px 0px', '60px 60px', '0px 0px']\n            }}\n            transition={{\n              duration: 20,\n              repeat: Infinity,\n              ease: \"linear\"\n            }}\n          />\n        </div>\n\n        {/* Quantum circuit background */}\n        <QuantumCircuit />\n\n        {/* Enhanced floating geometric shapes */}\n        <motion.div\n          className=\"absolute top-20 left-10 w-32 h-32 border-2 border-blue-400/30 rounded-full\"\n          animate={{\n            rotate: [0, 360],\n            scale: [1, 1.1, 1],\n            borderColor: [\n              \"rgba(59, 130, 246, 0.3)\",\n              \"rgba(147, 51, 234, 0.3)\",\n              \"rgba(236, 72, 153, 0.3)\",\n              \"rgba(59, 130, 246, 0.3)\"\n            ]\n          }}\n          transition={{\n            duration: 20,\n            repeat: Infinity,\n            ease: \"linear\"\n          }}\n        />\n\n        <motion.div\n          className=\"absolute top-40 right-20 w-24 h-24 border-2 border-purple-400/30\"\n          animate={{\n            rotate: [0, -180, -360],\n            y: [-10, 10, -10],\n            scale: [1, 1.2, 1],\n            borderColor: [\n              \"rgba(147, 51, 234, 0.3)\",\n              \"rgba(236, 72, 153, 0.3)\",\n              \"rgba(59, 130, 246, 0.3)\",\n              \"rgba(147, 51, 234, 0.3)\"\n            ]\n          }}\n          transition={{\n            duration: 15,\n            repeat: Infinity,\n            ease: \"easeInOut\"\n          }}\n        />\n\n        <motion.div\n          className=\"absolute bottom-40 left-20 w-20 h-20 bg-gradient-to-r from-pink-400/20 to-blue-400/20 rounded-lg\"\n          animate={{\n            rotate: [0, 45, 90, 45, 0],\n            x: [-5, 5, -5],\n            scale: [1, 1.1, 1],\n          }}\n          transition={{\n            duration: 12,\n            repeat: Infinity,\n            ease: \"easeInOut\"\n          }}\n        />\n\n        {/* Additional quantum-inspired shapes */}\n        <motion.div\n          className=\"absolute top-1/3 right-1/3 w-16 h-16\"\n          animate={{\n            rotate: [0, 90, 180, 270, 360],\n            scale: [1, 1.3, 1, 1.3, 1],\n          }}\n          transition={{\n            duration: 25,\n            repeat: Infinity,\n            ease: \"linear\"\n          }}\n        >\n          <div className=\"w-full h-full border-2 border-cyan-400/30 transform rotate-45\"></div>\n          <div className=\"absolute inset-2 border border-purple-400/30 rounded-full\"></div>\n        </motion.div>\n\n        <motion.div\n          className=\"absolute bottom-1/3 right-1/4 w-12 h-12 bg-gradient-to-br from-blue-400/20 to-purple-400/20 rounded-full\"\n          animate={{\n            y: [0, -30, 0],\n            opacity: [0.5, 1, 0.5],\n            scale: [1, 1.5, 1],\n          }}\n          transition={{\n            duration: 8,\n            repeat: Infinity,\n            ease: \"easeInOut\"\n          }}\n        />\n\n        <FloatingParticles />\n      </div>\n\n      {/* Header */}\n      <motion.header \n        className=\"fixed top-0 w-full z-50 backdrop-blur-md bg-gray-900/80 border-b border-gray-800\"\n        initial={{ y: -100 }}\n        animate={{ y: 0 }}\n        transition={{ duration: 0.5 }}\n      >\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center\">\n                <Atom className=\"w-5 h-5 text-white\" />\n              </div>\n              <span className=\"text-xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                QuantumCloud\n              </span>\n            </div>\n\n            {/* Desktop Navigation */}\n            <nav className=\"hidden md:flex items-center space-x-8\">\n              <a href=\"#home\" className=\"hover:text-blue-400 transition-colors\">Home</a>\n              <a href=\"#features\" className=\"hover:text-blue-400 transition-colors\">Features</a>\n              <a href=\"#pricing\" className=\"hover:text-blue-400 transition-colors\">Pricing</a>\n              <a href=\"#docs\" className=\"hover:text-blue-400 transition-colors\">Docs</a>\n            </nav>\n\n            <div className=\"hidden md:flex items-center space-x-4\">\n              {isAuthenticated ? (\n                <Button onClick={() => navigate('/dashboard')} className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\">\n                  Go to Dashboard\n                </Button>\n              ) : (\n                <>\n                  <Button variant=\"ghost\" onClick={handleLogin}>Login</Button>\n                  <Button onClick={handleSignUp} className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\">\n                    Sign Up\n                  </Button>\n                </>\n              )}\n            </div>\n\n            {/* Mobile menu button */}\n            <div className=\"md:hidden\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setIsMenuOpen(!isMenuOpen)}\n              >\n                {isMenuOpen ? <X className=\"w-6 h-6\" /> : <Menu className=\"w-6 h-6\" />}\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Mobile Navigation */}\n        {isMenuOpen && (\n          <motion.div \n            className=\"md:hidden bg-gray-800 border-t border-gray-700\"\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: \"auto\" }}\n            exit={{ opacity: 0, height: 0 }}\n          >\n            <div className=\"px-4 py-4 space-y-4\">\n              <a href=\"#home\" className=\"block hover:text-blue-400 transition-colors\">Home</a>\n              <a href=\"#features\" className=\"block hover:text-blue-400 transition-colors\">Features</a>\n              <a href=\"#pricing\" className=\"block hover:text-blue-400 transition-colors\">Pricing</a>\n              <a href=\"#docs\" className=\"block hover:text-blue-400 transition-colors\">Docs</a>\n              <div className=\"pt-4 border-t border-gray-700 space-y-2\">\n                {isAuthenticated ? (\n                  <Button onClick={() => navigate('/dashboard')} className=\"w-full bg-gradient-to-r from-blue-600 to-purple-600\">\n                    Go to Dashboard\n                  </Button>\n                ) : (\n                  <>\n                    <Button onClick={handleLogin} variant=\"ghost\" className=\"w-full\">Login</Button>\n                    <Button onClick={handleSignUp} className=\"w-full bg-gradient-to-r from-blue-600 to-purple-600\">\n                      Sign Up\n                    </Button>\n                  </>\n                )}\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </motion.header>\n\n      {/* Hero Section */}\n      <section id=\"home\" className=\"relative min-h-screen flex items-center justify-center pt-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <motion.div\n            style={{ y: textY }}\n            initial={{ opacity: 0, y: 50 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n          >\n            <motion.h1 \n              className=\"text-4xl md:text-6xl lg:text-7xl font-bold mb-6\"\n              initial={{ opacity: 0, y: 50 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.2 }}\n            >\n              <motion.span\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: 0.3 }}\n              >\n                Experience the Future of{\" \"}\n              </motion.span>\n              <HolographicText className=\"inline-block\">\n                <motion.span\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ duration: 0.8, delay: 0.5 }}\n                  whileHover={{ \n                    scale: 1.05,\n                    textShadow: \"0 0 20px rgba(59, 130, 246, 0.5)\"\n                  }}\n                >\n                  Quantum Computing\n                </motion.span>\n              </HolographicText>\n              <motion.span\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: 0.7 }}\n              >\n                {\" \"}in the Cloud\n              </motion.span>\n            </motion.h1>\n            <p className=\"text-xl md:text-2xl text-gray-300 mb-8 max-w-4xl mx-auto\">\n              Run, learn, and innovate with powerful quantum systems accessible anywhere. \n              Join the quantum revolution today.\n            </p>\n            <motion.div \n              className=\"flex flex-col sm:flex-row items-center justify-center gap-4\"\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.6 }}\n            >\n              <motion.div\n                whileHover={{ \n                  scale: 1.05,\n                  boxShadow: \"0 20px 40px rgba(59, 130, 246, 0.3)\"\n                }}\n                whileTap={{ scale: 0.95 }}\n                className=\"relative\"\n              >\n                <Button \n                  onClick={handleGetStarted}\n                  size=\"lg\" \n                  className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-lg px-8 py-4 relative overflow-hidden group border-0\"\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-white/10 to-white/20\"\n                    initial={{ x: \"-100%\", skewX: -15 }}\n                    whileHover={{ x: \"100%\" }}\n                    transition={{ duration: 0.8 }}\n                  />\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-blue-400/30 to-purple-400/30\"\n                    animate={{\n                      opacity: [0, 0.5, 0]\n                    }}\n                    transition={{\n                      duration: 2,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  />\n                  <span className=\"relative flex items-center font-semibold\">\n                    <motion.span\n                      animate={{ \n                        textShadow: [\n                          \"0 0 0px rgba(255,255,255,0)\",\n                          \"0 0 10px rgba(255,255,255,0.3)\",\n                          \"0 0 0px rgba(255,255,255,0)\"\n                        ]\n                      }}\n                      transition={{\n                        duration: 3,\n                        repeat: Infinity,\n                        ease: \"easeInOut\"\n                      }}\n                    >\n                      Get Started\n                    </motion.span>\n                    <motion.div\n                      animate={{ x: [0, 5, 0] }}\n                      transition={{\n                        duration: 1.5,\n                        repeat: Infinity,\n                        ease: \"easeInOut\"\n                      }}\n                    >\n                      <ArrowRight className=\"ml-2 w-5 h-5\" />\n                    </motion.div>\n                  </span>\n                </Button>\n\n                {/* Particle effect around button */}\n                <div className=\"absolute inset-0 pointer-events-none\">\n                  {Array.from({ length: 8 }).map((_, i) => (\n                    <motion.div\n                      key={i}\n                      className=\"absolute w-1 h-1 bg-blue-400 rounded-full\"\n                      style={{\n                        left: `${Math.random() * 100}%`,\n                        top: `${Math.random() * 100}%`,\n                      }}\n                      animate={{\n                        scale: [0, 1, 0],\n                        opacity: [0, 1, 0],\n                        x: [0, (Math.random() - 0.5) * 20],\n                        y: [0, (Math.random() - 0.5) * 20],\n                      }}\n                      transition={{\n                        duration: 2,\n                        delay: i * 0.2,\n                        repeat: Infinity,\n                        ease: \"easeOut\"\n                      }}\n                    />\n                  ))}\n                </div>\n              </motion.div>\n\n              <motion.div\n                whileHover={{ \n                  scale: 1.05,\n                  boxShadow: \"0 10px 30px rgba(156, 163, 175, 0.3)\"\n                }}\n                whileTap={{ scale: 0.95 }}\n                className=\"relative\"\n              >\n                <Button \n                  variant=\"outline\" \n                  size=\"lg\" \n                  className=\"text-lg px-8 py-4 border-2 border-gray-600 text-white hover:bg-gray-800 relative group overflow-hidden backdrop-blur-sm\"\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-blue-500/10 to-purple-500/10\"\n                    initial={{ opacity: 0 }}\n                    whileHover={{ opacity: 1 }}\n                    transition={{ duration: 0.3 }}\n                  />\n                  <span className=\"relative flex items-center font-semibold\">\n                    <motion.div\n                      animate={{ rotate: [0, 15, 0] }}\n                      transition={{\n                        duration: 2,\n                        repeat: Infinity,\n                        ease: \"easeInOut\"\n                      }}\n                    >\n                      <BookOpen className=\"mr-2 w-5 h-5\" />\n                    </motion.div>\n                    Explore Docs\n                  </span>\n                </Button>\n              </motion.div>\n            </motion.div>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section id=\"features\" className=\"py-20 relative\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div \n            className=\"text-center mb-16\"\n            initial={{ opacity: 0, y: 50 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n          >\n            <h2 className=\"text-3xl md:text-5xl font-bold mb-4\">\n              Powerful Quantum Features\n            </h2>\n            <p className=\"text-xl text-gray-300 max-w-3xl mx-auto\">\n              Everything you need to harness the power of quantum computing\n            </p>\n          </motion.div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {features.map((feature, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 50 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.6, delay: index * 0.1 }}\n                whileHover={{ \n                  y: -15,\n                  rotateY: 5,\n                  rotateX: 5,\n                  scale: 1.02\n                }}\n                className=\"perspective-1000\"\n              >\n                <Card className=\"bg-gray-800/50 border-gray-700 backdrop-blur-sm hover:bg-gray-800/70 hover:border-blue-500/50 transition-all duration-500 group relative overflow-hidden h-full\">\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-br from-blue-500/10 via-purple-500/10 to-pink-500/10 opacity-0 group-hover:opacity-100\"\n                    transition={{ duration: 0.5 }}\n                  />\n\n                  {/* Animated border effect */}\n                  <motion.div\n                    className=\"absolute inset-0 opacity-0 group-hover:opacity-100\"\n                    initial={{ background: \"conic-gradient(from 0deg, transparent, transparent)\" }}\n                    whileHover={{\n                      background: [\n                        \"conic-gradient(from 0deg, rgba(59, 130, 246, 0.3), transparent, transparent, rgba(59, 130, 246, 0.3))\",\n                        \"conic-gradient(from 180deg, rgba(147, 51, 234, 0.3), transparent, transparent, rgba(147, 51, 234, 0.3))\",\n                        \"conic-gradient(from 360deg, rgba(59, 130, 246, 0.3), transparent, transparent, rgba(59, 130, 246, 0.3))\"\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                    style={{ padding: '1px', borderRadius: '0.5rem' }}\n                  />\n\n                  <CardContent className=\"p-6 text-center relative z-10 h-full flex flex-col\">\n                    <motion.div \n                      className=\"mb-4 group-hover:scale-125 transition-all duration-500\"\n                      whileHover={{ \n                        rotate: [0, -15, 15, 0],\n                        filter: \"drop-shadow(0 0 10px currentColor)\"\n                      }}\n                      transition={{ duration: 0.8 }}\n                    >\n                      <motion.div\n                        animate={{\n                          filter: [\n                            \"drop-shadow(0 0 0px currentColor)\",\n                            \"drop-shadow(0 0 5px currentColor)\",\n                            \"drop-shadow(0 0 0px currentColor)\"\n                          ]\n                        }}\n                        transition={{\n                          duration: 3,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                      >\n                        {feature.icon}\n                      </motion.div>\n                    </motion.div>\n\n                    <motion.h3 \n                      className=\"text-xl font-semibold mb-2\"\n                      whileHover={{ \n                        color: \"#60a5fa\",\n                        textShadow: \"0 0 10px rgba(96, 165, 250, 0.5)\"\n                      }}\n                    >\n                      {feature.title}\n                    </motion.h3>\n\n                    <motion.p \n                      className=\"text-gray-400 group-hover:text-gray-300 transition-colors duration-300 flex-grow\"\n                      whileHover={{ scale: 1.02 }}\n                    >\n                      {feature.description}\n                    </motion.p>\n\n                    {/* Floating particles on hover */}\n                    <div className=\"absolute inset-0 pointer-events-none opacity-0 group-hover:opacity-100 transition-opacity duration-500\">\n                      {Array.from({ length: 6 }).map((_, i) => (\n                        <motion.div\n                          key={i}\n                          className=\"absolute w-1 h-1 bg-blue-400 rounded-full\"\n                          style={{\n                            left: `${20 + Math.random() * 60}%`,\n                            top: `${20 + Math.random() * 60}%`,\n                          }}\n                          animate={{\n                            scale: [0, 1, 0],\n                            opacity: [0, 1, 0],\n                            x: [0, (Math.random() - 0.5) * 30],\n                            y: [0, (Math.random() - 0.5) * 30],\n                          }}\n                          transition={{\n                            duration: 2,\n                            delay: i * 0.3,\n                            repeat: Infinity,\n                            ease: \"easeOut\"\n                          }}\n                        />\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Dashboard Preview Section */}\n      <section className=\"py-20 bg-gray-800/30 backdrop-blur-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div \n            className=\"text-center mb-12\"\n            initial={{ opacity: 0, y: 50 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n          >\n            <h2 className=\"text-3xl md:text-5xl font-bold mb-4\">\n              Intuitive Dashboard\n            </h2>\n            <p className=\"text-xl text-gray-300\">\n              Manage jobs, track results, and scale effortlessly\n            </p>\n          </motion.div>\n\n          <motion.div \n            className=\"relative max-w-4xl mx-auto\"\n            initial={{ opacity: 0, scale: 0.8 }}\n            whileInView={{ opacity: 1, scale: 1 }}\n            transition={{ duration: 0.8 }}\n            whileHover={{ scale: 1.02 }}\n          >\n            <div className=\"relative\">\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-blue-500 to-purple-600 rounded-xl blur-xl opacity-50\"\n                animate={{\n                  scale: [1, 1.05, 1],\n                  opacity: [0.5, 0.7, 0.5],\n                }}\n                transition={{\n                  duration: 3,\n                  repeat: Infinity,\n                  ease: \"easeInOut\"\n                }}\n              />\n              <div className=\"bg-gradient-to-r from-blue-500 to-purple-600 p-1 rounded-xl relative\">\n                <div className=\"bg-gray-900 rounded-lg overflow-hidden\">\n                  <div className=\"h-64 md:h-96 bg-gradient-to-br from-gray-800 to-gray-900 flex items-center justify-center relative\">\n                    <motion.div\n                      className=\"text-center\"\n                      initial={{ opacity: 0, y: 20 }}\n                      whileInView={{ opacity: 1, y: 0 }}\n                      transition={{ duration: 0.8, delay: 0.3 }}\n                    >\n                      <motion.div\n                        animate={{ \n                          rotate: [0, 360],\n                          scale: [1, 1.1, 1]\n                        }}\n                        transition={{ \n                          duration: 4, \n                          repeat: Infinity,\n                          ease: \"linear\"\n                        }}\n                      >\n                        <Atom className=\"w-16 h-16 text-blue-400 mx-auto mb-4\" />\n                      </motion.div>\n                      <p className=\"text-gray-400 mb-2\">Quantum Dashboard</p>\n                      <div className=\"flex items-center justify-center space-x-2 text-sm text-gray-500\">\n                        <Sparkles className=\"w-4 h-4\" />\n                        <span>Real-time quantum computing</span>\n                        <Globe className=\"w-4 h-4\" />\n                      </div>\n                    </motion.div>\n\n                    {/* Simulated dashboard elements */}\n                    <div className=\"absolute top-4 left-4 right-4 flex justify-between items-center opacity-30\">\n                      <div className=\"flex space-x-2\">\n                        <div className=\"w-3 h-3 bg-red-400 rounded-full\"></div>\n                        <div className=\"w-3 h-3 bg-yellow-400 rounded-full\"></div>\n                        <div className=\"w-3 h-3 bg-green-400 rounded-full\"></div>\n                      </div>\n                      <div className=\"text-xs text-gray-500\">QuantumCloud Dashboard</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Use Cases Section */}\n      <section className=\"py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div \n            className=\"text-center mb-16\"\n            initial={{ opacity: 0, y: 50 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n          >\n            <h2 className=\"text-3xl md:text-5xl font-bold mb-4\">\n              Use Cases & Solutions\n            </h2>\n            <p className=\"text-xl text-gray-300\">\n              Quantum computing for every industry\n            </p>\n          </motion.div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            {useCases.map((useCase, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, x: index % 2 === 0 ? -50 : 50 }}\n                whileInView={{ opacity: 1, x: 0 }}\n                transition={{ duration: 0.6, delay: index * 0.1 }}\n              >\n                <Card className=\"bg-gradient-to-r from-gray-800/50 to-gray-700/50 border-gray-600 hover:border-blue-500/50 transition-all duration-300 group\">\n                  <CardContent className=\"p-8\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-12 h-12 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center group-hover:scale-110 transition-transform duration-300\">\n                        <Atom className=\"w-6 h-6 text-white\" />\n                      </div>\n                      <h3 className=\"text-2xl font-semibold\">{useCase}</h3>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Section */}\n      <section id=\"pricing\" className=\"py-20 bg-gray-800/30 backdrop-blur-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div \n            className=\"text-center mb-16\"\n            initial={{ opacity: 0, y: 50 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n          >\n            <h2 className=\"text-3xl md:text-5xl font-bold mb-4\">\n              Choose Your Plan\n            </h2>\n            <p className=\"text-xl text-gray-300\">\n              Start free, scale as you grow\n            </p>\n          </motion.div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {plans.map((plan, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 50 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.6, delay: index * 0.1 }}\n              >\n                <Card className={`relative bg-gray-800/50 border-gray-700 hover:border-blue-500/50 transition-all duration-300 ${\n                  plan.popular ? 'ring-2 ring-blue-500 ring-opacity-50' : ''\n                }`}>\n                  {plan.popular && (\n                    <Badge className=\"absolute -top-3 left-1/2 transform -translate-x-1/2 bg-gradient-to-r from-blue-600 to-purple-600\">\n                      Most Popular\n                    </Badge>\n                  )}\n                  <CardContent className=\"p-8 text-center\">\n                    <h3 className=\"text-2xl font-bold mb-4\">{plan.name}</h3>\n                    <div className=\"mb-6\">\n                      <span className=\"text-4xl font-bold\">{plan.price}</span>\n                      {plan.price !== 'Custom' && <span className=\"text-gray-400\">/month</span>}\n                    </div>\n                    <ul className=\"space-y-3 mb-8\">\n                      {plan.features.map((feature, featureIndex) => (\n                        <li key={featureIndex} className=\"flex items-center justify-center space-x-2\">\n                          <Check className=\"w-5 h-5 text-green-400\" />\n                          <span className=\"text-gray-300\">{feature}</span>\n                        </li>\n                      ))}\n                    </ul>\n                    <Button \n                      className={`w-full ${\n                        plan.popular \n                          ? 'bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700' \n                          : 'bg-gray-700 hover:bg-gray-600'\n                      }`}\n                      onClick={handleGetStarted}\n                    >\n                      {plan.cta}\n                    </Button>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Community Section */}\n      <section className=\"py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 50 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n          >\n            <h2 className=\"text-3xl md:text-5xl font-bold mb-4\">\n              Join Our Quantum Network\n            </h2>\n            <p className=\"text-xl text-gray-300 mb-12\">\n              Connect with researchers, developers, and innovators worldwide\n            </p>\n            <div className=\"flex items-center justify-center space-x-4\">\n              <Users className=\"w-6 h-6 text-blue-400\" />\n              <span className=\"text-lg\">10,000+ Active Users</span>\n              <span className=\"text-gray-500\">•</span>\n              <span className=\"text-lg\">500+ Organizations</span>\n              <span className=\"text-gray-500\">•</span>\n              <span className=\"text-lg\">50+ Countries</span>\n            </div>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Final CTA Section */}\n      <section className=\"py-20 bg-gradient-to-r from-blue-900/50 via-purple-900/50 to-pink-900/50 backdrop-blur-sm\">\n        <div className=\"max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 50 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6 }}\n          >\n            <h2 className=\"text-3xl md:text-5xl font-bold mb-6\">\n              Get Started with Quantum Today\n            </h2>\n            <p className=\"text-xl text-gray-300 mb-8\">\n              Ready to explore the quantum frontier? Join thousands of researchers and developers.\n            </p>\n            <Button \n              onClick={handleGetStarted}\n              size=\"lg\" \n              className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-lg px-12 py-4\"\n            >\n              Sign Up Free <ArrowRight className=\"ml-2 w-6 h-6\" />\n            </Button>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 border-t border-gray-800 py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {/* Logo & Tagline */}\n            <div>\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <div className=\"w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center\">\n                  <Atom className=\"w-5 h-5 text-white\" />\n                </div>\n                <span className=\"text-xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                  QuantumCloud\n                </span>\n              </div>\n              <p className=\"text-gray-400\">\n                Empowering the future through quantum computing in the cloud.\n              </p>\n            </div>\n\n            {/* Quick Links */}\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4\">Quick Links</h3>\n              <div className=\"space-y-2\">\n                <a href=\"#about\" className=\"block text-gray-400 hover:text-white transition-colors\">About</a>\n                <a href=\"#docs\" className=\"block text-gray-400 hover:text-white transition-colors\">Documentation</a>\n                <a href=\"#careers\" className=\"block text-gray-400 hover:text-white transition-colors\">Careers</a>\n                <a href=\"#blog\" className=\"block text-gray-400 hover:text-white transition-colors\">Blog</a>\n                <a href=\"#contact\" className=\"block text-gray-400 hover:text-white transition-colors\">Contact</a>\n              </div>\n            </div>\n\n            {/* Social Links */}\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4\">Connect</h3>\n              <div className=\"flex space-x-4\">\n                <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  <Linkedin className=\"w-6 h-6\" />\n                </a>\n                <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  <Github className=\"w-6 h-6\" />\n                </a>\n                <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  <Twitter className=\"w-6 h-6\" />\n                </a>\n                <a href=\"#\" className=\"text-gray-400 hover:text-white transition-colors\">\n                  <Youtube className=\"w-6 h-6\" />\n                </a>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"border-t border-gray-800 mt-8 pt-8 text-center text-gray-400\">\n            <p>&copy; 2024 QuantumCloud. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":41752},"client/src/pages/login.tsx":{"content":"\nimport { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { useNavigate, Link } from 'react-router-dom';\nimport { Eye, EyeOff, Lock, Mail, ArrowLeft } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function Login() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const { login } = useAuth();\n  const navigate = useNavigate();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // For demo purposes, accept any email/password combination\n      if (email && password) {\n        const userData = {\n          id: 'user_' + Date.now(),\n          name: email.split('@')[0],\n          email: email\n        };\n\n        login(userData);\n        \n        toast({\n          title: \"Login Successful\",\n          description: \"Welcome back! Redirecting to dashboard...\",\n        });\n\n        // Redirect to dashboard\n        navigate('/dashboard');\n      } else {\n        throw new Error('Please fill in all fields');\n      }\n    } catch (error) {\n      toast({\n        title: \"Login Failed\",\n        description: error instanceof Error ? error.message : \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900 flex items-center justify-center p-4\">\n      {/* Animated background particles */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        {Array.from({ length: 50 }).map((_, i) => (\n          <motion.div\n            key={i}\n            className=\"absolute bg-blue-400/10 rounded-full\"\n            style={{\n              width: Math.random() * 6 + 2,\n              height: Math.random() * 6 + 2,\n              left: `${Math.random() * 100}%`,\n              top: `${Math.random() * 100}%`,\n            }}\n            animate={{\n              y: [0, -100, 0],\n              opacity: [0, 1, 0],\n            }}\n            transition={{\n              duration: Math.random() * 10 + 10,\n              repeat: Infinity,\n              delay: Math.random() * 5,\n            }}\n          />\n        ))}\n      </div>\n\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n        className=\"relative z-10 w-full max-w-md\"\n      >\n        {/* Back to Landing Button */}\n        <motion.div\n          initial={{ opacity: 0, x: -20 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ delay: 0.2 }}\n          className=\"mb-6\"\n        >\n          <Button\n            variant=\"ghost\"\n            onClick={() => navigate('/')}\n            className=\"text-white/70 hover:text-white hover:bg-white/10\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Home\n          </Button>\n        </motion.div>\n\n        <Card className=\"bg-white/10 backdrop-blur-md border-white/20 shadow-2xl\">\n          <CardHeader className=\"space-y-1 text-center\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: \"spring\" }}\n              className=\"w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center mx-auto mb-4\"\n            >\n              <motion.div\n                animate={{ rotate: 360 }}\n                transition={{ duration: 8, repeat: Infinity, ease: \"linear\" }}\n                className=\"text-white text-2xl\"\n              >\n                ⚛️\n              </motion.div>\n            </motion.div>\n            <CardTitle className=\"text-2xl font-bold text-white\">Welcome Back</CardTitle>\n            <CardDescription className=\"text-white/70\">\n              Sign in to your QuantumCloud account\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\" className=\"text-white/90\">Email</Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-white/50 w-4 h-4\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    className=\"pl-10 bg-white/10 border-white/20 text-white placeholder:text-white/50 focus:border-blue-400\"\n                    required\n                  />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" className=\"text-white/90\">Password</Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-white/50 w-4 h-4\" />\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Enter your password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    className=\"pl-10 pr-10 bg-white/10 border-white/20 text-white placeholder:text-white/50 focus:border-blue-400\"\n                    required\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-1 top-1/2 transform -translate-y-1/2 text-white/50 hover:text-white hover:bg-transparent\"\n                    onClick={() => setShowPassword(!showPassword)}\n                  >\n                    {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                  </Button>\n                </div>\n              </div>\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-semibold py-2 px-4 rounded-lg transition-all duration-300 transform hover:scale-105\"\n                disabled={isLoading}\n              >\n                {isLoading ? \"Signing In...\" : \"Sign In\"}\n              </Button>\n            </form>\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-white/70\">\n                Don't have an account?{' '}\n                <Link to=\"/signup\" className=\"text-blue-400 hover:text-blue-300 font-semibold\">\n                  Sign up\n                </Link>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":7384},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/quantum-quest.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Trophy,\n  Star,\n  Zap,\n  Target,\n  Crown,\n  Award,\n  ChevronRight,\n  Play,\n  Lock,\n  CheckCircle,\n  BarChart3,\n  Users,\n  Sparkles,\n  ArrowLeft,\n} from \"lucide-react\";\nimport { Link } from \"react-router-dom\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  LevelChallenge,\n  validateChallenges,\n  getChallengeById,\n} from \"@/components/quantum/level-challenges\";\n\n// Types for the learning system\ninterface Level {\n  id: string;\n  title: string;\n  description: string;\n  difficulty: \"beginner\" | \"intermediate\" | \"advanced\" | \"research\";\n  points: number;\n  completed: boolean;\n  locked: boolean;\n  category: string;\n}\n\ninterface Achievement {\n  id: string;\n  title: string;\n  description: string;\n  icon: string;\n  unlocked: boolean;\n  rarity: \"common\" | \"rare\" | \"epic\" | \"legendary\";\n}\n\ninterface UserProgress {\n  totalPoints: number;\n  level: number;\n  streak: number;\n  completedLevels: number;\n  rank: number;\n  achievements: Achievement[];\n}\n\n// Enhanced quantum learning levels with proper progressive difficulty and prerequisites\nconst mockLevels: Level[] = [\n  // === LEVEL 1: QUANTUM FUNDAMENTALS (100-200 points) ===\n  {\n    id: \"qb-101\",\n    title: \"First Qubit\",\n    description: \"Learn what a qubit is and how it differs from classical bits\",\n    difficulty: \"beginner\",\n    points: 100,\n    completed: true,\n    locked: false,\n    category: \"Level 1: Quantum Fundamentals\",\n  },\n  {\n    id: \"qb-102\",\n    title: \"Superposition States\",\n    description:\n      \"Master the concept of quantum superposition with interactive examples\",\n    difficulty: \"beginner\",\n    points: 150,\n    completed: true,\n    locked: false,\n    category: \"Level 1: Quantum Fundamentals\",\n  },\n  {\n    id: \"qb-103\",\n    title: \"Quantum Measurement\",\n    description:\n      \"Understand how quantum measurement collapses superposition states\",\n    difficulty: \"beginner\",\n    points: 200,\n    completed: false,\n    locked: false, // Unlocks after qb-102\n    category: \"Level 1: Quantum Fundamentals\",\n  },\n\n  // === LEVEL 2: BASIC QUANTUM GATES (250-400 points) ===\n  {\n    id: \"qg-201\",\n    title: \"Hadamard Gates\",\n    description: \"Build circuits using Hadamard gates to create superposition\",\n    difficulty: \"intermediate\",\n    points: 250,\n    completed: false,\n    locked: false, // Unlocks after Level 1 completion\n    category: \"Level 2: Basic Quantum Gates\",\n  },\n  {\n    id: \"qg-202\",\n    title: \"Pauli Gates (X, Y, Z)\",\n    description: \"Master the three Pauli gates for single-qubit rotations\",\n    difficulty: \"intermediate\",\n    points: 300,\n    completed: false,\n    locked: true, // Unlocks after qg-201\n    category: \"Level 2: Basic Quantum Gates\",\n  },\n  {\n    id: \"qg-203\",\n    title: \"Phase Gates (S, T)\",\n    description: \"Learn phase gates and their role in quantum computation\",\n    difficulty: \"intermediate\",\n    points: 350,\n    completed: false,\n    locked: true, // Unlocks after qg-202\n    category: \"Level 2: Basic Quantum Gates\",\n  },\n  {\n    id: \"qg-204\",\n    title: \"Gate Sequences\",\n    description: \"Combine multiple gates to create complex quantum operations\",\n    difficulty: \"intermediate\",\n    points: 400,\n    completed: false,\n    locked: true, // Unlocks after qg-203\n    category: \"Level 2: Basic Quantum Gates\",\n  },\n\n  // === LEVEL 3: TWO-QUBIT OPERATIONS (450-600 points) ===\n  {\n    id: \"qe-301\",\n    title: \"CNOT Gates\",\n    description: \"Master controlled-NOT gates for two-qubit operations\",\n    difficulty: \"intermediate\",\n    points: 450,\n    completed: false,\n    locked: true, // Unlocks after Level 2 completion\n    category: \"Level 3: Two-Qubit Operations\",\n  },\n  {\n    id: \"qe-302\",\n    title: \"Entanglement Circuits\",\n    description:\n      \"Create entangled states using CNOT gates and measure correlations\",\n    difficulty: \"intermediate\",\n    points: 500,\n    completed: false,\n    locked: true, // Unlocks after qe-301\n    category: \"Level 3: Two-Qubit Operations\",\n  },\n  {\n    id: \"qe-303\",\n    title: \"Bell States\",\n    description:\n      \"Generate and analyze the four maximally entangled Bell states\",\n    difficulty: \"intermediate\",\n    points: 550,\n    completed: false,\n    locked: true, // Unlocks after qe-302\n    category: \"Level 3: Two-Qubit Operations\",\n  },\n  {\n    id: \"qe-304\",\n    title: \"Controlled Operations\",\n    description: \"Master various controlled gates beyond CNOT\",\n    difficulty: \"intermediate\",\n    points: 600,\n    completed: false,\n    locked: true, // Unlocks after qe-303\n    category: \"Level 3: Two-Qubit Operations\",\n  },\n\n  // === LEVEL 4: QUANTUM ALGORITHMS (700-1000 points) ===\n  {\n    id: \"qa-401\",\n    title: \"Deutsch Algorithm\",\n    description:\n      \"Implement the first quantum algorithm that shows quantum advantage\",\n    difficulty: \"advanced\",\n    points: 700,\n    completed: false,\n    locked: true, // Unlocks after Level 3 completion\n    category: \"Level 4: Quantum Algorithms\",\n  },\n  {\n    id: \"qa-402\",\n    title: \"Quantum Fourier Transform\",\n    description:\n      \"Master the QFT - foundation of Shor's algorithm and quantum phase estimation\",\n    difficulty: \"advanced\",\n    points: 800,\n    completed: false,\n    locked: true, // Unlocks after qa-401\n    category: \"Level 4: Quantum Algorithms\",\n  },\n  {\n    id: \"qa-403\",\n    title: \"Grover's Search Algorithm\",\n    description:\n      \"Implement quantum database search with quadratic speedup over classical algorithms\",\n    difficulty: \"advanced\",\n    points: 900,\n    completed: false,\n    locked: true, // Unlocks after qa-402\n    category: \"Level 4: Quantum Algorithms\",\n  },\n  {\n    id: \"qa-404\",\n    title: \"Bell State Analysis\",\n    description:\n      \"Run advanced Bell state circuits and analyze results on IBM Quantum hardware\",\n    difficulty: \"advanced\",\n    points: 1000,\n    completed: false,\n    locked: true, // Unlocks after qa-403\n    category: \"Level 4: Quantum Algorithms\",\n  },\n\n  // === LEVEL 5: ADVANCED QUANTUM COMPUTING (1100-1500 points) ===\n  {\n    id: \"qr-501\",\n    title: \"Quantum Teleportation Protocol\",\n    description:\n      \"Execute a real quantum teleportation circuit on IBM Quantum hardware\",\n    difficulty: \"research\",\n    points: 1100,\n    completed: false,\n    locked: true, // Unlocks after Level 4 completion\n    category: \"Level 5: Advanced Research\",\n  },\n  {\n    id: \"qr-502\",\n    title: \"Shor's Factoring Algorithm\",\n    description: \"Break RSA encryption using quantum period finding\",\n    difficulty: \"research\",\n    points: 1200,\n    completed: false,\n    locked: true, // Unlocks after qr-501\n    category: \"Level 5: Advanced Research\",\n  },\n  {\n    id: \"qr-503\",\n    title: \"Variational Quantum Eigensolver (VQE)\",\n    description:\n      \"Find molecular ground states using hybrid quantum-classical optimization\",\n    difficulty: \"research\",\n    points: 1300,\n    completed: false,\n    locked: true, // Unlocks after qr-502\n    category: \"Level 5: Advanced Research\",\n  },\n  {\n    id: \"qr-504\",\n    title: \"Quantum Error Correction\",\n    description: \"Implement quantum error correction to protect your qubits\",\n    difficulty: \"research\",\n    points: 1400,\n    completed: false,\n    locked: true, // Unlocks after qr-503\n    category: \"Level 5: Advanced Research\",\n  },\n  {\n    id: \"qr-505\",\n    title: \"Quantum Machine Learning\",\n    description:\n      \"Train quantum neural networks and implement quantum kernels for ML\",\n    difficulty: \"research\",\n    points: 1500,\n    completed: false,\n    locked: true, // Unlocks after qr-504\n    category: \"Level 5: Advanced Research\",\n  },\n];\n\n// Expanded achievement system with more rewards\nconst mockAchievements: Achievement[] = [\n  {\n    id: \"first-steps\",\n    title: \"Quantum Beginner\",\n    description: \"Complete your first quantum challenge\",\n    icon: \"🎯\",\n    unlocked: true,\n    rarity: \"common\",\n  },\n  {\n    id: \"superposition-master\",\n    title: \"Superposition Master\",\n    description: \"Master the art of quantum superposition\",\n    icon: \"⚡\",\n    unlocked: true,\n    rarity: \"rare\",\n  },\n  {\n    id: \"entanglement-explorer\",\n    title: \"Entanglement Explorer\",\n    description: \"Create your first entangled quantum state\",\n    icon: \"🔗\",\n    unlocked: false,\n    rarity: \"epic\",\n  },\n  {\n    id: \"quantum-pioneer\",\n    title: \"Research Pioneer\",\n    description: \"Complete a research-level quantum challenge\",\n    icon: \"🚀\",\n    unlocked: false,\n    rarity: \"legendary\",\n  },\n  {\n    id: \"algorithm-master\",\n    title: \"Algorithm Master\",\n    description: \"Successfully implement 5 quantum algorithms\",\n    icon: \"🧠\",\n    unlocked: false,\n    rarity: \"epic\",\n  },\n  {\n    id: \"hardware-hero\",\n    title: \"Hardware Hero\",\n    description: \"Run 50 jobs on real IBM Quantum hardware\",\n    icon: \"⚡\",\n    unlocked: false,\n    rarity: \"rare\",\n  },\n  {\n    id: \"speedrun-champion\",\n    title: \"Speedrun Champion\",\n    description: \"Complete 10 levels in under 30 minutes\",\n    icon: \"⚡\",\n    unlocked: false,\n    rarity: \"epic\",\n  },\n  {\n    id: \"perfectionist\",\n    title: \"Quantum Perfectionist\",\n    description: \"Achieve 100% accuracy on 20 quantum jobs\",\n    icon: \"💎\",\n    unlocked: false,\n    rarity: \"legendary\",\n  },\n  {\n    id: \"educator\",\n    title: \"Quantum Educator\",\n    description: \"Help 10 other students with quantum concepts\",\n    icon: \"📚\",\n    unlocked: false,\n    rarity: \"rare\",\n  },\n];\n\n// Function to calculate user level based on total points earned\nconst calculateUserLevel = (totalPoints: number): number => {\n  // Level progression based on point thresholds:\n  // Level 1: 0-299 points (Quantum Fundamentals: 100-200 points each)\n  // Level 2: 300-649 points (Basic Quantum Gates: 250-400 points each)\n  // Level 3: 650-999 points (Two-Qubit Operations: 450-600 points each)\n  // Level 4: 1000-1199 points (Quantum Algorithms: 700-1000 points each)\n  // Level 5: 1200+ points (Research Projects: 1200+ points each)\n\n  if (totalPoints >= 7250) return 5; // Research Projects level\n  if (totalPoints >= 7250) return 4; // Quantum Algorithms level\n  if (totalPoints >= 3850) return 3; // Two-Qubit Operations level\n  if (totalPoints >= 450) return 2; // Basic Quantum Gates level\n  return 1; // Quantum Fundamentals level (0-299 points)\n};\n\n// Calculate correct user level based on current progress\nconst completedMockLevels = mockLevels.filter((l) => l.completed);\nconst correctUserLevel = calculateUserLevel(250); // Current points from mockUserProgress\n\nconst mockUserProgress: UserProgress = {\n  totalPoints: 250,\n  level: correctUserLevel, // Now correctly calculated as 1\n  streak: 1,\n  completedLevels: completedMockLevels.length,\n  rank: 42,\n  achievements: mockAchievements.filter((a) => a.unlocked),\n};\n\n// Base leaderboard with other players (excluding \"You\")\nconst baseLeaderboard = [\n  { name: \"QuantumExplorer\", points: 2450, avatar: \"👑\" },\n  { name: \"QubitMaster\", points: 2340, avatar: \"⚡\" },\n  { name: \"EntanglePro\", points: 2180, avatar: \"🔬\" },\n  { name: \"CircuitBuilder\", points: 240, avatar: \"⚙️\" },\n  { name: \"AlgoMaster\", points: 235, avatar: \"🧠\" },\n  { name: \"QuantumNewbie\", points: 220, avatar: \"🌟\" },\n  { name: \"ErrorFixer\", points: 210, avatar: \"🔧\" },\n  { name: \"MLQuantum\", points: 205, avatar: \"🤖\" },\n];\n\n// Function to calculate dynamic leaderboard with current user points\nconst calculateDynamicLeaderboard = (userPoints: number) => {\n  // Create array with all players including current user\n  const allPlayers = [\n    ...baseLeaderboard,\n    { name: \"You\", points: userPoints, avatar: \"🎯\" },\n  ];\n\n  // Sort by points descending\n  const sortedPlayers = allPlayers.sort((a, b) => b.points - a.points);\n\n  // Add ranks\n  return sortedPlayers.map((player, index) => ({\n    ...player,\n    rank: index + 1,\n  }));\n};\n\n// Function to calculate user rank based on current points\nconst calculateUserRank = (userPoints: number): number => {\n  const playersWithHigherPoints = baseLeaderboard.filter(\n    (player) => player.points > userPoints\n  );\n  return playersWithHigherPoints.length + 1;\n};\n\nexport default function QuantumQuest() {\n  const [selectedTab, setSelectedTab] = useState(\"learn\");\n  const [selectedLevel, setSelectedLevel] = useState<Level | null>(null);\n  const [currentChallenge, setCurrentChallenge] = useState<string | null>(null);\n  const [showConfetti, setShowConfetti] = useState(false);\n  const [userProgress, setUserProgress] = useState(mockUserProgress);\n  const [levels, setLevels] = useState(mockLevels);\n  const { toast } = useToast();\n\n  // Calculate dynamic leaderboard based on current user progress\n  const dynamicLeaderboard = calculateDynamicLeaderboard(\n    userProgress.totalPoints\n  );\n\n  // Initialize proper level locking on component mount and validate challenges\n  useEffect(() => {\n    const initialLevels = updateLevelLocking(mockLevels);\n    setLevels(initialLevels);\n\n    // Validate that all levels have corresponding challenges\n    const levelIds = mockLevels.map((level) => level.id);\n    const validation = validateChallenges(levelIds);\n\n    if (validation.missing.length > 0) {\n      console.warn(\"⚠️ Missing challenges for levels:\", validation.missing);\n      toast({\n        title: \"Development Notice\",\n        description: `${validation.missing.length} levels are missing challenge implementations`,\n      });\n    } else {\n      console.log(\"✅ All levels have corresponding challenges!\");\n    }\n  }, []);\n\n  // Level progression mapping for unlocking logic\n  const levelProgression: Record<string, string[]> = {\n    // Level 1: Quantum Fundamentals\n    \"qb-103\": [\"qb-102\"], // Quantum Measurement unlocks after Superposition States\n\n    // Level 2: Basic Quantum Gates\n    \"qg-201\": [\"qb-101\", \"qb-102\", \"qb-103\"], // Hadamard Gates unlocks after completing ALL of Level 1\n    \"qg-202\": [\"qg-201\"], // Pauli Gates unlocks after Hadamard\n    \"qg-203\": [\"qg-202\"], // Phase Gates unlocks after Pauli\n    \"qg-204\": [\"qg-203\"], // Gate Sequences unlocks after Phase\n\n    // Level 3: Two-Qubit Operations\n    \"qe-301\": [\"qg-204\"], // CNOT Gates unlocks after completing Level 2\n    \"qe-302\": [\"qe-301\"], // Entanglement Circuits unlocks after CNOT\n    \"qe-303\": [\"qe-302\"], // Bell States unlocks after Entanglement\n    \"qe-304\": [\"qe-303\"], // Controlled Operations unlocks after Bell States\n\n    // Level 4: Quantum Algorithms\n    \"qa-401\": [\"qe-304\"], // Deutsch Algorithm unlocks after completing Level 3\n    \"qa-402\": [\"qa-401\"], // QFT unlocks after Deutsch\n    \"qa-403\": [\"qa-402\"], // Grover's unlocks after QFT\n    \"qa-404\": [\"qa-403\"], // Bell State Analysis unlocks after Grover's\n\n    // Level 5: Advanced Research\n    \"qr-501\": [\"qa-404\"], // Quantum Teleportation unlocks after completing Level 4\n    \"qr-502\": [\"qr-501\"], // Shor's unlocks after Teleportation\n    \"qr-503\": [\"qr-502\"], // VQE unlocks after Shor's\n    \"qr-504\": [\"qr-503\"], // Error Correction unlocks after VQE\n    \"qr-505\": [\"qr-504\"], // Quantum ML unlocks after Error Correction\n  };\n\n  // Function to check if a level should be unlocked\n  const shouldUnlockLevel = (\n    levelId: string,\n    completedLevels: Level[]\n  ): boolean => {\n    const prerequisites = levelProgression[levelId];\n    if (!prerequisites) return true; // No prerequisites means always unlocked\n\n    return prerequisites.every((prereqId) =>\n      completedLevels.some((level) => level.id === prereqId && level.completed)\n    );\n  };\n\n  // Update levels locking status based on completed levels\n  const updateLevelLocking = (updatedLevels: Level[]): Level[] => {\n    return updatedLevels.map((level) => ({\n      ...level,\n      locked: !shouldUnlockLevel(level.id, updatedLevels),\n    }));\n  };\n\n  // Level completion handler\n  const completeLevel = (level: Level) => {\n    // Prevent duplicate completion\n    if (level.completed) {\n      toast({\n        title: \"Already Completed!\",\n        description: `You've already completed ${level.title}. No additional points awarded.`,\n      });\n      return;\n    }\n\n    setShowConfetti(true);\n    setTimeout(() => setShowConfetti(false), 3000);\n\n    toast({\n      title: \"🎉 Level Completed!\",\n      description: `You earned ${level.points} points for completing ${level.title}`,\n    });\n\n    // Mark level as completed and unlock new levels\n    const updatedLevels = levels.map((l) =>\n      l.id === level.id ? { ...l, completed: true } : l\n    );\n\n    // Update locking status for all levels\n    const finalLevels = updateLevelLocking(updatedLevels);\n    setLevels(finalLevels);\n\n    // Calculate new user level based on total points\n    const completedLevels = finalLevels.filter((l) => l.completed);\n    const newTotalPoints = userProgress.totalPoints + level.points;\n    const newUserLevel = calculateUserLevel(newTotalPoints);\n    const newUserRank = calculateUserRank(newTotalPoints);\n\n    // Update progress with calculated level and dynamic rank\n    setUserProgress((prev) => ({\n      ...prev,\n      totalPoints: newTotalPoints,\n      completedLevels: completedLevels.length,\n      level: newUserLevel,\n      streak: prev.streak + 1,\n      rank: newUserRank,\n    }));\n\n    // Check for newly unlocked levels and show notifications\n    const newlyUnlocked = finalLevels.filter(\n      (l, index) => levels[index].locked && !l.locked\n    );\n\n    if (newlyUnlocked.length > 0) {\n      setTimeout(() => {\n        toast({\n          title: \"🔓 New Levels Unlocked!\",\n          description: `${newlyUnlocked\n            .map((l) => l.title)\n            .join(\", \")} available now!`,\n        });\n      }, 1500);\n    }\n\n    // Check for level advancement\n    if (newUserLevel > userProgress.level) {\n      setTimeout(() => {\n        toast({\n          title: \"🎉 Level Up!\",\n          description: `Congratulations! You've advanced to Level ${newUserLevel}!`,\n        });\n      }, 2000);\n    }\n  };\n\n  // Challenge completion handler\n  const handleChallengeComplete = (\n    levelId: string,\n    success: boolean,\n    timeElapsed: number\n  ) => {\n    const level = levels.find((l) => l.id === levelId);\n    if (level && success) {\n      completeLevel(level);\n    }\n    setCurrentChallenge(null);\n  };\n\n  const handleStartChallenge = (level: Level) => {\n    if (!level.locked) {\n      if (level.completed) {\n        toast({\n          title: \"Replay Challenge\",\n          description: `Starting replay of ${level.title}. Note: No additional points will be awarded.`,\n        });\n      }\n      setCurrentChallenge(level.id);\n    }\n  };\n\n  const getDifficultyColor = (difficulty: Level[\"difficulty\"]) => {\n    switch (difficulty) {\n      case \"beginner\":\n        return \"bg-green-500\";\n      case \"intermediate\":\n        return \"bg-blue-500\";\n      case \"advanced\":\n        return \"bg-purple-500\";\n      case \"research\":\n        return \"bg-red-500\";\n      default:\n        return \"bg-gray-500\";\n    }\n  };\n\n  const getRarityColor = (rarity: Achievement[\"rarity\"]) => {\n    switch (rarity) {\n      case \"common\":\n        return \"text-gray-600\";\n      case \"rare\":\n        return \"text-blue-600\";\n      case \"epic\":\n        return \"text-purple-600\";\n      case \"legendary\":\n        return \"text-yellow-600\";\n      default:\n        return \"text-gray-600\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 dark:from-gray-900 dark:via-blue-900 dark:to-purple-900\">\n      {/* Confetti Animation */}\n      <AnimatePresence>\n        {showConfetti && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 pointer-events-none z-50\"\n          >\n            {[...Array(50)].map((_, i) => (\n              <motion.div\n                key={i}\n                className=\"absolute w-2 h-2 bg-yellow-400 rounded\"\n                initial={{\n                  x: Math.random() * window.innerWidth,\n                  y: -10,\n                  rotate: 0,\n                }}\n                animate={{\n                  y: window.innerHeight + 10,\n                  rotate: 360,\n                  transition: {\n                    duration: 3,\n                    delay: Math.random() * 2,\n                  },\n                }}\n              />\n            ))}\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"text-center mb-8\"\n        >\n          <div className=\"flex items-center justify-center gap-4 mb-4\">\n            <Link to=\"/dashboard\">\n              <Button variant=\"ghost\" size=\"sm\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Dashboard\n              </Button>\n            </Link>\n          </div>\n\n          <motion.h1\n            className=\"text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-2\"\n            animate={{ scale: [1, 1.02, 1] }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            🚀 Quantum Quest\n          </motion.h1>\n          <p className=\"text-lg text-gray-600 dark:text-gray-300 mb-6\">\n            Master quantum computing through interactive challenges and real IBM\n            Quantum experiments\n          </p>\n\n          {/* Progress Overview */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 max-w-4xl mx-auto\">\n            <Card className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white border-0\">\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold\">\n                  {userProgress.totalPoints}\n                </div>\n                <div className=\"text-sm opacity-90\">Total Points</div>\n              </CardContent>\n            </Card>\n            <Card className=\"bg-gradient-to-r from-purple-500 to-purple-600 text-white border-0\">\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold\">\n                  Level {userProgress.level}\n                </div>\n                <div className=\"text-sm opacity-90\">Current Level</div>\n              </CardContent>\n            </Card>\n            <Card className=\"bg-gradient-to-r from-green-500 to-green-600 text-white border-0\">\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold\">{userProgress.streak}</div>\n                <div className=\"text-sm opacity-90\">Day Streak</div>\n              </CardContent>\n            </Card>\n            <Card className=\"bg-gradient-to-r from-orange-500 to-orange-600 text-white border-0\">\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold\">#{userProgress.rank}</div>\n                <div className=\"text-sm opacity-90\">Global Rank</div>\n              </CardContent>\n            </Card>\n          </div>\n        </motion.div>\n\n        {/* Main Content */}\n        <Tabs\n          value={selectedTab}\n          onValueChange={setSelectedTab}\n          className=\"max-w-7xl mx-auto\"\n        >\n          <TabsList className=\"grid w-full grid-cols-4 mb-8\">\n            <TabsTrigger value=\"learn\" className=\"flex items-center gap-2\">\n              <Play className=\"h-4 w-4\" />\n              Learn\n            </TabsTrigger>\n            <TabsTrigger\n              value=\"achievements\"\n              className=\"flex items-center gap-2\"\n            >\n              <Award className=\"h-4 w-4\" />\n              Achievements\n            </TabsTrigger>\n            <TabsTrigger\n              value=\"leaderboard\"\n              className=\"flex items-center gap-2\"\n            >\n              <Trophy className=\"h-4 w-4\" />\n              Leaderboard\n            </TabsTrigger>\n            <TabsTrigger value=\"progress\" className=\"flex items-center gap-2\">\n              <BarChart3 className=\"h-4 w-4\" />\n              Progress\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Learning Challenges */}\n          <TabsContent value=\"learn\" className=\"space-y-8\">\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {levels.map((level, index) => (\n                <motion.div\n                  key={level.id}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: index * 0.1 }}\n                  whileHover={{ scale: 1.02 }}\n                  className=\"relative\"\n                >\n                  <Card\n                    className={`overflow-hidden ${\n                      level.locked ? \"opacity-60\" : \"hover:shadow-xl\"\n                    } transition-all duration-300`}\n                  >\n                    <CardHeader className=\"pb-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <Badge\n                          className={`${getDifficultyColor(\n                            level.difficulty\n                          )} text-white text-xs`}\n                        >\n                          {level.difficulty.toUpperCase()}\n                        </Badge>\n                        <div className=\"flex items-center gap-2\">\n                          {level.completed && (\n                            <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                          )}\n                          {level.locked && (\n                            <Lock className=\"h-5 w-5 text-gray-400\" />\n                          )}\n                        </div>\n                      </div>\n                      <CardTitle className=\"text-lg\">{level.title}</CardTitle>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                        {level.description}\n                      </p>\n                    </CardHeader>\n                    <CardContent className=\"pt-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-1\">\n                          <Star className=\"h-4 w-4 text-yellow-500\" />\n                          <span className=\"font-semibold\">\n                            {level.points} pts\n                          </span>\n                        </div>\n                        <Button\n                          size=\"sm\"\n                          disabled={level.locked}\n                          onClick={() => handleStartChallenge(level)}\n                          className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\"\n                          data-testid={`button-level-${level.id}`}\n                        >\n                          {level.completed ? \"Replay\" : \"Start\"}\n                          <ChevronRight className=\"h-4 w-4 ml-1\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              ))}\n            </div>\n          </TabsContent>\n\n          {/* Achievements */}\n          <TabsContent value=\"achievements\" className=\"space-y-6\">\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {mockAchievements.map((achievement, index) => (\n                <motion.div\n                  key={achievement.id}\n                  initial={{ opacity: 0, scale: 0.9 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: index * 0.1 }}\n                >\n                  <Card\n                    className={`${\n                      achievement.unlocked\n                        ? \"bg-gradient-to-r from-yellow-50 to-yellow-100 dark:from-yellow-900/20 dark:to-yellow-800/20\"\n                        : \"opacity-60\"\n                    }`}\n                  >\n                    <CardContent className=\"p-6 text-center\">\n                      <div className=\"text-4xl mb-3\">{achievement.icon}</div>\n                      <h3\n                        className={`font-bold mb-2 ${getRarityColor(\n                          achievement.rarity\n                        )}`}\n                      >\n                        {achievement.title}\n                      </h3>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-3\">\n                        {achievement.description}\n                      </p>\n                      <Badge\n                        variant={achievement.unlocked ? \"default\" : \"secondary\"}\n                        className={`${getRarityColor(\n                          achievement.rarity\n                        )} capitalize`}\n                      >\n                        {achievement.rarity}\n                      </Badge>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              ))}\n            </div>\n          </TabsContent>\n\n          {/* Leaderboard */}\n          <TabsContent value=\"leaderboard\" className=\"space-y-6\">\n            <div className=\"max-w-2xl mx-auto\">\n              {dynamicLeaderboard.map((player, index) => (\n                <motion.div\n                  key={player.rank}\n                  initial={{ opacity: 0, x: -20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  transition={{ delay: index * 0.1 }}\n                >\n                  <Card\n                    className={`mb-3 ${\n                      player.name === \"You\"\n                        ? \"bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 border-2 border-blue-300\"\n                        : \"\"\n                    }`}\n                  >\n                    <CardContent className=\"flex items-center justify-between p-4\">\n                      <div className=\"flex items-center gap-4\">\n                        <div\n                          className={`flex items-center justify-center w-8 h-8 rounded-full ${\n                            player.rank <= 3\n                              ? \"bg-gradient-to-r from-yellow-400 to-yellow-500 text-white\"\n                              : \"bg-gray-100 dark:bg-gray-800\"\n                          }`}\n                        >\n                          {player.rank <= 3 ? (\n                            <Crown className=\"h-4 w-4\" />\n                          ) : (\n                            player.rank\n                          )}\n                        </div>\n                        <div className=\"text-2xl\">{player.avatar}</div>\n                        <div>\n                          <div className=\"font-semibold\">{player.name}</div>\n                          <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n                            {player.points} points\n                          </div>\n                        </div>\n                      </div>\n                      {player.rank <= 3 && (\n                        <Trophy\n                          className={`h-6 w-6 ${\n                            player.rank === 1\n                              ? \"text-yellow-500\"\n                              : player.rank === 2\n                              ? \"text-gray-400\"\n                              : \"text-orange-600\"\n                          }`}\n                        />\n                      )}\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              ))}\n            </div>\n          </TabsContent>\n\n          {/* Progress Analytics */}\n          <TabsContent value=\"progress\" className=\"space-y-6\">\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <BarChart3 className=\"h-5 w-5\" />\n                    Learning Progress\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {/* Calculate level progress dynamically */}\n                    {(() => {\n                      const levelGroups = {\n                        \"Level 1: Quantum Fundamentals\": levels.filter(\n                          (l) => l.category === \"Level 1: Quantum Fundamentals\"\n                        ),\n                        \"Level 2: Basic Quantum Gates\": levels.filter(\n                          (l) => l.category === \"Level 2: Basic Quantum Gates\"\n                        ),\n                        \"Level 3: Two-Qubit Operations\": levels.filter(\n                          (l) => l.category === \"Level 3: Two-Qubit Operations\"\n                        ),\n                        \"Level 4: Quantum Algorithms\": levels.filter(\n                          (l) => l.category === \"Level 4: Quantum Algorithms\"\n                        ),\n                        \"Level 5: Advanced Research\": levels.filter(\n                          (l) => l.category === \"Level 5: Advanced Research\"\n                        ),\n                      };\n\n                      return Object.entries(levelGroups).map(\n                        ([levelName, levelList]) => {\n                          const completed = levelList.filter(\n                            (l) => l.completed\n                          ).length;\n                          const total = levelList.length;\n                          const progress =\n                            total > 0 ? (completed / total) * 100 : 0;\n\n                          return (\n                            <div key={levelName}>\n                              <div className=\"flex justify-between mb-2\">\n                                <span>{levelName}</span>\n                                <span>\n                                  {completed}/{total}\n                                </span>\n                              </div>\n                              <Progress value={progress} className=\"h-2\" />\n                            </div>\n                          );\n                        }\n                      );\n                    })()}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Sparkles className=\"h-5 w-5\" />\n                    Recent Activity\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-3 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                      <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                      <div>\n                        <div className=\"font-medium\">\n                          Completed \"Superposition States\"\n                        </div>\n                        <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n                          +150 points\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-3 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                      <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                      <div>\n                        <div className=\"font-medium\">\n                          Completed \"First Qubit\"\n                        </div>\n                        <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n                          +100 points\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                      <Award className=\"h-5 w-5 text-blue-500\" />\n                      <div>\n                        <div className=\"font-medium\">\n                          Unlocked \"Quantum Beginner\"\n                        </div>\n                        <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n                          Achievement earned\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n\n        {/* Level Challenge View */}\n        <AnimatePresence>\n          {currentChallenge && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -20 }}\n              className=\"fixed inset-0 bg-white dark:bg-gray-900 z-50 overflow-y-auto\"\n            >\n              <LevelChallenge\n                levelId={currentChallenge}\n                onComplete={handleChallengeComplete}\n                onBack={() => setCurrentChallenge(null)}\n              />\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n    </div>\n  );\n}\n","size_bytes":37293},"client/src/pages/signup.tsx":{"content":"\nimport { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { useNavigate, Link } from 'react-router-dom';\nimport { Eye, EyeOff, Lock, Mail, User, ArrowLeft } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function Signup() {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const { signup } = useAuth();\n  const navigate = useNavigate();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Validate form\n      if (!name || !email || !password) {\n        throw new Error('Please fill in all fields');\n      }\n\n      if (password !== confirmPassword) {\n        throw new Error('Passwords do not match');\n      }\n\n      // Create user account\n      const userData = {\n        name: name,\n        email: email\n      };\n\n      signup(userData);\n      \n      toast({\n        title: \"Account Created Successfully\",\n        description: \"Welcome to QuantumCloud! Redirecting to dashboard...\",\n      });\n\n      // Redirect to dashboard\n      navigate('/dashboard');\n    } catch (error) {\n      toast({\n        title: \"Signup Failed\",\n        description: error instanceof Error ? error.message : \"Failed to create account\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900 flex items-center justify-center p-4\">\n      {/* Animated background particles */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        {Array.from({ length: 50 }).map((_, i) => (\n          <motion.div\n            key={i}\n            className=\"absolute bg-blue-400/10 rounded-full\"\n            style={{\n              width: Math.random() * 6 + 2,\n              height: Math.random() * 6 + 2,\n              left: `${Math.random() * 100}%`,\n              top: `${Math.random() * 100}%`,\n            }}\n            animate={{\n              y: [0, -100, 0],\n              opacity: [0, 1, 0],\n            }}\n            transition={{\n              duration: Math.random() * 10 + 10,\n              repeat: Infinity,\n              delay: Math.random() * 5,\n            }}\n          />\n        ))}\n      </div>\n\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n        className=\"relative z-10 w-full max-w-md\"\n      >\n        {/* Back to Landing Button */}\n        <motion.div\n          initial={{ opacity: 0, x: -20 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ delay: 0.2 }}\n          className=\"mb-6\"\n        >\n          <Button\n            variant=\"ghost\"\n            onClick={() => navigate('/')}\n            className=\"text-white/70 hover:text-white hover:bg-white/10\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Home\n          </Button>\n        </motion.div>\n\n        <Card className=\"bg-white/10 backdrop-blur-md border-white/20 shadow-2xl\">\n          <CardHeader className=\"space-y-1 text-center\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: \"spring\" }}\n              className=\"w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center mx-auto mb-4\"\n            >\n              <motion.div\n                animate={{ rotate: 360 }}\n                transition={{ duration: 8, repeat: Infinity, ease: \"linear\" }}\n                className=\"text-white text-2xl\"\n              >\n                ⚛️\n              </motion.div>\n            </motion.div>\n            <CardTitle className=\"text-2xl font-bold text-white\">Create Account</CardTitle>\n            <CardDescription className=\"text-white/70\">\n              Join QuantumCloud and start your quantum journey\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\" className=\"text-white/90\">Full Name</Label>\n                <div className=\"relative\">\n                  <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-white/50 w-4 h-4\" />\n                  <Input\n                    id=\"name\"\n                    type=\"text\"\n                    placeholder=\"Enter your full name\"\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                    className=\"pl-10 bg-white/10 border-white/20 text-white placeholder:text-white/50 focus:border-blue-400\"\n                    required\n                  />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\" className=\"text-white/90\">Email</Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-white/50 w-4 h-4\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    className=\"pl-10 bg-white/10 border-white/20 text-white placeholder:text-white/50 focus:border-blue-400\"\n                    required\n                  />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" className=\"text-white/90\">Password</Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-white/50 w-4 h-4\" />\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Create a password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    className=\"pl-10 pr-10 bg-white/10 border-white/20 text-white placeholder:text-white/50 focus:border-blue-400\"\n                    required\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-1 top-1/2 transform -translate-y-1/2 text-white/50 hover:text-white hover:bg-transparent\"\n                    onClick={() => setShowPassword(!showPassword)}\n                  >\n                    {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                  </Button>\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\" className=\"text-white/90\">Confirm Password</Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-white/50 w-4 h-4\" />\n                  <Input\n                    id=\"confirmPassword\"\n                    type={showConfirmPassword ? \"text\" : \"password\"}\n                    placeholder=\"Confirm your password\"\n                    value={confirmPassword}\n                    onChange={(e) => setConfirmPassword(e.target.value)}\n                    className=\"pl-10 pr-10 bg-white/10 border-white/20 text-white placeholder:text-white/50 focus:border-blue-400\"\n                    required\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-1 top-1/2 transform -translate-y-1/2 text-white/50 hover:text-white hover:bg-transparent\"\n                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                  >\n                    {showConfirmPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                  </Button>\n                </div>\n              </div>\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-semibold py-2 px-4 rounded-lg transition-all duration-300 transform hover:scale-105\"\n                disabled={isLoading}\n              >\n                {isLoading ? \"Creating Account...\" : \"Create Account\"}\n              </Button>\n            </form>\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-white/70\">\n                Already have an account?{' '}\n                <Link to=\"/login\" className=\"text-blue-400 hover:text-blue-300 font-semibold\">\n                  Sign in\n                </Link>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":9694},"client/src/pages/teamwork.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport {\n  Users,\n  Plus,\n  Share2,\n  Globe,\n  Lock,\n  Calendar,\n  Clock,\n  GitBranch,\n  Activity,\n  Settings,\n  UserPlus,\n  MessageSquare,\n  FileText,\n  Code2,\n  Zap,\n  BarChart3,\n  Download,\n  Upload,\n  Search,\n  Filter,\n  MoreHorizontal,\n  Star,\n  Eye,\n  Edit3,\n  Trash2,\n  Copy,\n  ExternalLink,\n  PlayCircle,\n  PauseCircle,\n  CheckCircle2,\n  Atom,\n  BrainCircuit,\n  Network,\n  Cpu,\n  Timer,\n  Target,\n  Sparkles,\n  Layers,\n  BookOpen,\n  FlaskConical,\n  ChevronRight,\n  Send,\n  Paperclip,\n  Video,\n  Phone,\n  Trophy,\n  Medal,\n  Award,\n  TrendingUp,\n  Brain,\n  Lightbulb,\n  Gamepad2,\n  Crown,\n  Rocket,\n  Bell,\n  CheckSquare,\n  AlertTriangle,\n  Mic,\n  MicOff,\n  ScreenShare,\n  Palette,\n  Users2,\n  Globe2,\n  Compass,\n  Flame,\n  Radar,\n  Crosshair,\n  Waves,\n  Infinity,\n  Fingerprint,\n  Camera,\n  CameraOff,\n  Monitor,\n  PenTool,\n  Eraser,\n  Circle,\n  Square,\n  Type,\n  MousePointer,\n  Undo,\n  Redo,\n  Save,\n  X,\n  Volume2,\n  VolumeX,\n  Settings2,\n  Maximize2,\n  Minimize2,\n  RotateCcw,\n  Hash,\n  MapPin,\n  Bookmark,\n  BookmarkCheck,\n  GraduationCap,\n  Map,\n  Route,\n  Zap as Lightning,\n  Hexagon,\n  Shield,\n  Puzzle,\n  StopCircle,\n  Heart,\n  TestTube,\n  Mouse,\n  Highlighter,\n  Paintbrush,\n  ArrowUpRight,\n  Minus,\n  StickyNote,\n  ZoomIn,\n  ZoomOut,\n  Maximize,\n  EyeOff,\n  Unlock,\n  RefreshCw,\n  CircuitBoard,\n  Play,\n  Pause,\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n} from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n} from \"@/components/ui/dropdown-menu\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Header } from \"@/components/dashboard/header\";\nimport { formatDistanceToNow } from \"date-fns\";\n\n// Enhanced quantum collaboration workspace data\nconst mockWorkspaces = [\n  {\n    id: \"ws-1\",\n    name: \"Quantum ML Research\",\n    description:\n      \"Exploring quantum machine learning algorithms with variational circuits\",\n    members: [\"Alice Chen\", \"Bob Wilson\", \"Dr. Sarah Kim\"],\n    status: \"active\",\n    privacy: \"private\",\n    lastActivity: new Date(Date.now() - 2 * 60 * 60 * 1000),\n    progress: 75,\n    circuits: 12,\n    jobs: 45,\n    quantumFeatures: {\n      liveCircuits: 3,\n      activeCollaborators: 2,\n      quantumJobs: 18,\n      hardwareReserved: \"ibm_cairo\",\n      nextReservation: new Date(Date.now() + 4 * 60 * 60 * 1000),\n      experimentsSaved: 24,\n      hypothesesTesting: 2,\n    },\n    recentActivity: [\n      {\n        user: \"Alice Chen\",\n        action: \"edited Variational Circuit #4\",\n        time: \"2 min ago\",\n        type: \"circuit\",\n      },\n      {\n        user: \"Bob Wilson\",\n        action: \"shared VQE experiment results\",\n        time: \"15 min ago\",\n        type: \"results\",\n      },\n      {\n        user: \"Dr. Sarah Kim\",\n        action: \"reserved ibm_cairo for 2pm-4pm\",\n        time: \"1 hour ago\",\n        type: \"hardware\",\n      },\n    ],\n  },\n  {\n    id: \"ws-2\",\n    name: \"Optimization Algorithms\",\n    description:\n      \"Developing QAOA solutions for combinatorial optimization problems\",\n    members: [\"John Doe\", \"Emma Davis\", \"Mike Thompson\", \"Lisa Zhang\"],\n    status: \"active\",\n    privacy: \"public\",\n    lastActivity: new Date(Date.now() - 5 * 60 * 1000),\n    progress: 60,\n    circuits: 8,\n    jobs: 28,\n    quantumFeatures: {\n      liveCircuits: 1,\n      activeCollaborators: 3,\n      quantumJobs: 12,\n      hardwareReserved: \"ibm_brisbane\",\n      nextReservation: new Date(Date.now() + 6 * 60 * 60 * 1000),\n      experimentsSaved: 18,\n      hypothesesTesting: 1,\n    },\n    recentActivity: [\n      {\n        user: \"John Doe\",\n        action: \"optimized QAOA parameters\",\n        time: \"5 min ago\",\n        type: \"algorithm\",\n      },\n      {\n        user: \"Emma Davis\",\n        action: \"commented on Max-Cut results\",\n        time: \"12 min ago\",\n        type: \"discussion\",\n      },\n      {\n        user: \"Mike Thompson\",\n        action: \"scheduled hardware test\",\n        time: \"30 min ago\",\n        type: \"hardware\",\n      },\n    ],\n  },\n  {\n    id: \"ws-3\",\n    name: \"Quantum Cryptography\",\n    description:\n      \"Building quantum key distribution protocols and security analysis\",\n    members: [\"Dr. Alex Moore\", \"Rachel Green\"],\n    status: \"paused\",\n    privacy: \"private\",\n    lastActivity: new Date(Date.now() - 24 * 60 * 60 * 1000),\n    progress: 40,\n    circuits: 6,\n    jobs: 15,\n    quantumFeatures: {\n      liveCircuits: 0,\n      activeCollaborators: 0,\n      quantumJobs: 6,\n      hardwareReserved: null,\n      nextReservation: null,\n      experimentsSaved: 12,\n      hypothesesTesting: 0,\n    },\n    recentActivity: [\n      {\n        user: \"Dr. Alex Moore\",\n        action: \"paused BB84 protocol development\",\n        time: \"1 day ago\",\n        type: \"project\",\n      },\n      {\n        user: \"Rachel Green\",\n        action: \"documented key distribution analysis\",\n        time: \"1 day ago\",\n        type: \"documentation\",\n      },\n    ],\n  },\n];\n\n// Enhanced quantum project data with advanced collaboration features\nconst mockProjects = [\n  {\n    id: \"proj-1\",\n    name: \"VQE Ground State Calculation\",\n    workspace: \"Quantum ML Research\",\n    owner: \"Alice Chen\",\n    collaborators: 3,\n    status: \"running\",\n    lastModified: new Date(Date.now() - 30 * 60 * 1000),\n    runtime: \"2h 15m\",\n    backend: \"ibm_cairo\",\n    quantumDetails: {\n      circuitDepth: 12,\n      qubits: 8,\n      gates: 156,\n      fidelity: 0.92,\n      shots: 8192,\n      liveEditors: [\"Alice Chen\", \"Bob Wilson\"],\n      comments: 7,\n      versions: 15,\n      experiments: 3,\n      sharedResults: 2,\n    },\n  },\n  {\n    id: \"proj-2\",\n    name: \"QAOA Max-Cut Implementation\",\n    workspace: \"Optimization Algorithms\",\n    owner: \"John Doe\",\n    collaborators: 2,\n    status: \"completed\",\n    lastModified: new Date(Date.now() - 60 * 60 * 1000),\n    runtime: \"45m\",\n    backend: \"ibm_brisbane\",\n    quantumDetails: {\n      circuitDepth: 8,\n      qubits: 6,\n      gates: 89,\n      fidelity: 0.87,\n      shots: 4096,\n      liveEditors: [],\n      comments: 12,\n      versions: 8,\n      experiments: 5,\n      sharedResults: 5,\n    },\n  },\n  {\n    id: \"proj-3\",\n    name: \"Quantum Teleportation Protocol\",\n    workspace: \"Quantum Cryptography\",\n    owner: \"Dr. Alex Moore\",\n    collaborators: 1,\n    status: \"draft\",\n    lastModified: new Date(Date.now() - 2 * 60 * 60 * 1000),\n    runtime: \"-\",\n    backend: \"simulator\",\n    quantumDetails: {\n      circuitDepth: 6,\n      qubits: 3,\n      gates: 24,\n      fidelity: null,\n      shots: 1024,\n      liveEditors: [],\n      comments: 3,\n      versions: 4,\n      experiments: 1,\n      sharedResults: 0,\n    },\n  },\n];\n\n// Mock quantum hardware scheduling data\nconst mockHardwareSchedule = [\n  {\n    id: \"hw-1\",\n    backend: \"ibm_cairo\",\n    user: \"Alice Chen\",\n    workspace: \"Quantum ML Research\",\n    startTime: new Date(Date.now() + 2 * 60 * 60 * 1000),\n    duration: 120, // minutes\n    purpose: \"VQE Parameter Optimization\",\n    status: \"confirmed\",\n  },\n  {\n    id: \"hw-2\",\n    backend: \"ibm_brisbane\",\n    user: \"John Doe\",\n    workspace: \"Optimization Algorithms\",\n    startTime: new Date(Date.now() + 6 * 60 * 60 * 1000),\n    duration: 90,\n    purpose: \"QAOA Circuit Testing\",\n    status: \"pending\",\n  },\n];\n\n// Mock backend data for hardware scheduling\nconst mockBackends = [\n  {\n    id: \"ibm_cairo\",\n    name: \"IBM Cairo\",\n    qubits: 27,\n    status: \"available\",\n    queueLength: 12,\n    averageWaitTime: 45,\n    uptime: \"99.2%\",\n    currentJobs: 3,\n    maxJobs: 20,\n  },\n  {\n    id: \"ibm_brisbane\", \n    name: \"IBM Brisbane\",\n    qubits: 127,\n    status: \"busy\",\n    queueLength: 45,\n    averageWaitTime: 120,\n    uptime: \"98.7%\",\n    currentJobs: 18,\n    maxJobs: 20,\n  },\n  {\n    id: \"ibm_sherbrooke\",\n    name: \"IBM Sherbrooke\", \n    qubits: 127,\n    status: \"maintenance\",\n    queueLength: 0,\n    averageWaitTime: 0,\n    uptime: \"97.5%\",\n    currentJobs: 0,\n    maxJobs: 20,\n  },\n  {\n    id: \"simulator\",\n    name: \"Quantum Simulator\",\n    qubits: 32,\n    status: \"available\", \n    queueLength: 0,\n    averageWaitTime: 0,\n    uptime: \"100%\",\n    currentJobs: 156,\n    maxJobs: 1000,\n  },\n];\n\n// Mock live circuits data\nconst mockLiveCircuits = [\n  {\n    id: \"circuit-1\",\n    name: \"Variational Quantum Eigensolver\",\n    owner: \"Alice Chen\",\n    collaborators: [\n      { name: \"Bob Wilson\", status: \"editing\" },\n      { name: \"Dr. Sarah Kim\", status: \"viewing\" },\n    ],\n    qubits: 8,\n    gates: 156,\n    depth: 12,\n    status: \"editing\",\n    backend: \"ibm_cairo\",\n  },\n];\n\n// Mock experiments data\nconst mockExperiments = [\n  {\n    id: \"exp-1\",\n    title: \"VQE Ground State Convergence Analysis\",\n    description: \"Testing convergence rates with different ansatz depths\",\n    owner: \"Alice Chen\",\n    workspace: \"Quantum ML Research\",\n    status: \"running\",\n    progress: 75,\n    jobsCompleted: 45,\n    totalJobs: 60,\n    currentBackend: \"ibm_cairo\",\n    tags: [\"VQE\", \"optimization\", \"ground-state\"],\n  },\n  {\n    id: \"exp-2\", \n    title: \"QAOA Performance Comparison\",\n    description: \"Comparing performance across different quantum backends\",\n    owner: \"John Doe\",\n    workspace: \"Optimization Algorithms\", \n    status: \"paused\",\n    progress: 40,\n    jobsCompleted: 24,\n    totalJobs: 60,\n    currentBackend: null,\n    tags: [\"QAOA\", \"benchmarking\", \"hardware\"],\n  },\n  {\n    id: \"exp-3\",\n    title: \"Quantum Error Mitigation Study\", \n    description: \"Testing different error mitigation techniques\",\n    owner: \"Dr. Sarah Kim\",\n    workspace: \"Quantum ML Research\",\n    status: \"completed\",\n    progress: 100,\n    jobsCompleted: 120,\n    totalJobs: 120,\n    currentBackend: \"ibm_brisbane\",\n    tags: [\"error-mitigation\", \"fidelity\", \"ZNE\"],\n  },\n  {\n    id: \"exp-4\",\n    title: \"Quantum Speedup Verification\",\n    description: \"Measuring quantum advantage in optimization problems\", \n    owner: \"Emma Davis\",\n    workspace: \"Optimization Algorithms\",\n    status: \"planning\",\n    progress: 5,\n    jobsCompleted: 0,\n    totalJobs: 200,\n    currentBackend: null,\n    tags: [\"speedup\", \"complexity\", \"graphs\"],\n  },\n];\n\n// Mock quantum collaboration chat data\nconst mockQuantumChat = [\n  {\n    id: \"msg-1\",\n    user: \"Alice Chen\",\n    message:\n      \"Just optimized the VQE circuit depth to 12 layers. The new ansatz shows 8% improvement in convergence!\",\n    timestamp: new Date(Date.now() - 10 * 60 * 1000),\n    type: \"algorithm\",\n    attachments: [{ type: \"circuit\", name: \"optimized_vqe_v2.qasm\" }],\n  },\n  {\n    id: \"msg-2\",\n    user: \"Bob Wilson\",\n    message:\n      \"Great work! I'm seeing similar improvements in my simulation. Should we test this on real hardware?\",\n    timestamp: new Date(Date.now() - 8 * 60 * 1000),\n    type: \"discussion\",\n    replyTo: \"msg-1\",\n  },\n  {\n    id: \"msg-3\",\n    user: \"Dr. Sarah Kim\",\n    message:\n      \"I've reserved ibm_cairo for 2-4pm today. Let's run the full parameter sweep.\",\n    timestamp: new Date(Date.now() - 5 * 60 * 1000),\n    type: \"hardware\",\n    attachments: [{ type: \"reservation\", name: \"Hardware Booking #HW-1247\" }],\n  },\n];\n\nexport default function Teamwork() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [privacyFilter, setPrivacyFilter] = useState(\"all\");\n  const [isCreateWorkspaceOpen, setIsCreateWorkspaceOpen] = useState(false);\n  const [selectedWorkspace, setSelectedWorkspace] = useState<string | null>(\n    null,\n  );\n  const [activeTab, setActiveTab] = useState(\"workspaces\");\n  const [showQuantumChat, setShowQuantumChat] = useState(false);\n  const [showHardwareScheduler, setShowHardwareScheduler] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [selectedProject, setSelectedProject] = useState<string | null>(null);\n  const [showAIInsights, setShowAIInsights] = useState(false);\n  const [showGamification, setShowGamification] = useState(false);\n  const [showAnalytics, setShowAnalytics] = useState(false);\n  const [showNotifications, setShowNotifications] = useState(false);\n  const [isVoiceChatActive, setIsVoiceChatActive] = useState(false);\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\n  const [currentAchievements, setCurrentAchievements] = useState(3);\n  const [challengesInProgress, setChallengesInProgress] = useState(2);\n  const [aiRecommendations, setAiRecommendations] = useState(5);\n  const [liveCollaborators, setLiveCollaborators] = useState(7);\n\n  // New modal states for comprehensive features\n  const [showResearchChat, setShowResearchChat] = useState(false);\n  const [showVoiceChat, setShowVoiceChat] = useState(false);\n  const [showScreenShare, setShowScreenShare] = useState(false);\n  const [showWhiteboard, setShowWhiteboard] = useState(false);\n  const [showSmartSuggestions, setShowSmartSuggestions] = useState(false);\n  const [showTeamAnalytics, setShowTeamAnalytics] = useState(false);\n  const [showAICodeReview, setShowAICodeReview] = useState(false);\n  const [showAchievements, setShowAchievements] = useState(false);\n  const [showActiveChallenges, setShowActiveChallenges] = useState(false);\n  const [showLeaderboard, setShowLeaderboard] = useState(false);\n  const [showLearningPath, setShowLearningPath] = useState(false);\n\n  // Quantum Hardware & Resources modal states\n  const [showSmartScheduler, setShowSmartScheduler] = useState(false);\n  const [showResourceOptimizer, setShowResourceOptimizer] = useState(false);\n  const [showLiveCircuitEditor, setShowLiveCircuitEditor] = useState(false);\n  const [showExperimentTracker, setShowExperimentTracker] = useState(false);\n\n  // Feature states\n  const [isMuted, setIsMuted] = useState(false);\n  const [isCameraOn, setIsCameraOn] = useState(false);\n  const [whiteboardTool, setWhiteboardTool] = useState(\"pen\");\n  const [chatMessages, setChatMessages] = useState<any[]>([]);\n  const [currentChatMessage, setCurrentChatMessage] = useState(\"\");\n\n  // Filter workspaces based on search and filters\n  const filteredWorkspaces = mockWorkspaces.filter((workspace) => {\n    const matchesSearch =\n      workspace.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      workspace.description.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesStatus =\n      statusFilter === \"all\" || workspace.status === statusFilter;\n    const matchesPrivacy =\n      privacyFilter === \"all\" || workspace.privacy === privacyFilter;\n\n    return matchesSearch && matchesStatus && matchesPrivacy;\n  });\n\n  // Filter projects for selected workspace\n  const workspaceProjects = selectedWorkspace\n    ? mockProjects.filter(\n        (p) =>\n          p.workspace ===\n          mockWorkspaces.find((w) => w.id === selectedWorkspace)?.name,\n      )\n    : mockProjects;\n\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n  };\n\n  const handleRefreshIntervalChange = (interval: number) => {\n    // Handle refresh interval\n  };\n\n  const handleManualRefresh = () => {\n    // Handle manual refresh\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      case \"paused\":\n        return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\";\n      case \"completed\":\n        return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\";\n      case \"running\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      case \"draft\":\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n    }\n  };\n\n  const getPrivacyIcon = (privacy: string) => {\n    return privacy === \"private\" ? (\n      <Lock className=\"h-3 w-3\" />\n    ) : (\n      <Globe className=\"h-3 w-3\" />\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      {/* Header */}\n      <Header\n        onSearch={handleSearch}\n        onRefreshIntervalChange={handleRefreshIntervalChange}\n        onManualRefresh={handleManualRefresh}\n      />\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Page Header */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"mb-8\"\n        >\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white flex items-center gap-3\">\n                <Users className=\"h-8 w-8 text-blue-500\" />\n                Team Collaboration\n              </h1>\n              <p className=\"text-lg text-gray-600 dark:text-gray-300 mt-2\">\n                Work together on quantum computing projects with real-time\n                collaboration\n              </p>\n            </div>\n            <Dialog\n              open={isCreateWorkspaceOpen}\n              onOpenChange={setIsCreateWorkspaceOpen}\n            >\n              <DialogTrigger asChild>\n                <Button\n                  className=\"flex items-center gap-2\"\n                  data-testid=\"button-create-workspace\"\n                >\n                  <Plus className=\"h-4 w-4\" />\n                  Create Workspace\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-[500px]\">\n                <DialogHeader>\n                  <DialogTitle>Create New Workspace</DialogTitle>\n                  <DialogDescription>\n                    Set up a collaborative workspace for your quantum computing\n                    project.\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"space-y-4 py-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"workspace-name\">Workspace Name</Label>\n                    <Input\n                      id=\"workspace-name\"\n                      placeholder=\"Enter workspace name...\"\n                      data-testid=\"input-workspace-name\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"workspace-desc\">Description</Label>\n                    <Textarea\n                      id=\"workspace-desc\"\n                      placeholder=\"Describe your project goals and scope...\"\n                      data-testid=\"textarea-workspace-description\"\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"workspace-private\">Private Workspace</Label>\n                    <Switch\n                      id=\"workspace-private\"\n                      data-testid=\"switch-workspace-private\"\n                    />\n                  </div>\n                </div>\n                <DialogFooter>\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setIsCreateWorkspaceOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={() => setIsCreateWorkspaceOpen(false)}\n                    data-testid=\"button-create-workspace-confirm\"\n                  >\n                    Create Workspace\n                  </Button>\n                </DialogFooter>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </motion.div>\n\n        {/* Search and Filter Controls */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.1 }}\n          className=\"mb-6\"\n        >\n          <div className=\"flex flex-col sm:flex-row gap-4 items-center\">\n            <div className=\"relative flex-1 max-w-md\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search workspaces and projects...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-workspaces\"\n              />\n            </div>\n            <div className=\"flex gap-2\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger\n                  className=\"w-32\"\n                  data-testid=\"select-status-filter\"\n                >\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"paused\">Paused</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={privacyFilter} onValueChange={setPrivacyFilter}>\n                <SelectTrigger\n                  className=\"w-32\"\n                  data-testid=\"select-privacy-filter\"\n                >\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Privacy</SelectItem>\n                  <SelectItem value=\"public\">Public</SelectItem>\n                  <SelectItem value=\"private\">Private</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* Advanced AI-Powered Collaboration Toolbar */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.15 }}\n          className=\"mb-6\"\n        >\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n            {/* Real-Time Collaboration Tools */}\n            <div className=\"flex flex-wrap gap-2 p-4 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 rounded-lg border border-blue-200 dark:border-blue-700\">\n              <div className=\"flex items-center gap-2 mb-2 w-full\">\n                <Users2 className=\"h-4 w-4 text-blue-500\" />\n                <span className=\"text-sm font-medium text-blue-700 dark:text-blue-300\">\n                  Live Collaboration\n                </span>\n                <Badge variant=\"secondary\" className=\"ml-auto\">\n                  {liveCollaborators} active\n                </Badge>\n              </div>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setShowResearchChat(true)}\n                className=\"flex items-center gap-2\"\n                data-testid=\"button-research-chat\"\n              >\n                <MessageSquare className=\"h-4 w-4\" />\n                Research Chat\n                {showQuantumChat && (\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\n                )}\n              </Button>\n              <Button\n                variant={isVoiceChatActive ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setShowVoiceChat(true)}\n                className=\"flex items-center gap-2\"\n                data-testid=\"button-voice-chat\"\n              >\n                {isVoiceChatActive ? (\n                  <Mic className=\"h-4 w-4\" />\n                ) : (\n                  <MicOff className=\"h-4 w-4\" />\n                )}\n                Voice Chat\n              </Button>\n              <Button\n                variant={isScreenSharing ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setShowScreenShare(true)}\n                className=\"flex items-center gap-2\"\n                data-testid=\"button-screen-share\"\n              >\n                <ScreenShare className=\"h-4 w-4\" />\n                Share Screen\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setShowWhiteboard(true)}\n                className=\"flex items-center gap-2\"\n                data-testid=\"button-whiteboard\"\n              >\n                <Palette className=\"h-4 w-4\" />\n                Whiteboard\n              </Button>\n            </div>\n\n            {/* AI-Powered Features */}\n            <div className=\"flex flex-wrap gap-2 p-4 bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-lg border border-green-200 dark:border-green-700\">\n              <div className=\"flex items-center gap-2 mb-2 w-full\">\n                <Brain className=\"h-4 w-4 text-green-500\" />\n                <span className=\"text-sm font-medium text-green-700 dark:text-green-300\">\n                  AI Intelligence\n                </span>\n                <Badge variant=\"secondary\" className=\"ml-auto\">\n                  {aiRecommendations} insights\n                </Badge>\n              </div>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setShowSmartSuggestions(true)}\n                className=\"flex items-center gap-2\"\n                data-testid=\"button-smart-suggestions\"\n              >\n                <Lightbulb className=\"h-4 w-4\" />\n                Smart Suggestions\n                {aiRecommendations > 0 && (\n                  <Badge\n                    variant=\"destructive\"\n                    className=\"ml-1 px-1 py-0 text-xs\"\n                  >\n                    {aiRecommendations}\n                  </Badge>\n                )}\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setShowTeamAnalytics(true)}\n                className=\"flex items-center gap-2\"\n                data-testid=\"button-team-analytics\"\n              >\n                <BarChart3 className=\"h-4 w-4\" />\n                Team Analytics\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setShowAICodeReview(true)}\n                className=\"flex items-center gap-2\"\n                data-testid=\"button-ai-code-review\"\n              >\n                <Radar className=\"h-4 w-4\" />\n                AI Code Review\n              </Button>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* Gamification Dashboard */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2 }}\n          className=\"mb-6\"\n        >\n          <div className=\"flex flex-wrap gap-3 p-4 bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 rounded-lg border border-purple-200 dark:border-purple-700\">\n            <div className=\"flex items-center gap-2 mb-2 w-full\">\n              <Trophy className=\"h-4 w-4 text-purple-500\" />\n              <span className=\"text-sm font-medium text-purple-700 dark:text-purple-300\">\n                Quantum Achievements & Challenges\n              </span>\n              <div className=\"ml-auto flex items-center gap-3\">\n                <div className=\"flex items-center gap-1\">\n                  <Crown className=\"h-3 w-3 text-yellow-500\" />\n                  <span className=\"text-xs text-gray-600\">Level 7</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <Flame className=\"h-3 w-3 text-orange-500\" />\n                  <span className=\"text-xs text-gray-600\">2,450 pts</span>\n                </div>\n              </div>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setShowAchievements(true)}\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-achievements\"\n            >\n              <Medal className=\"h-4 w-4\" />\n              Achievements\n              {currentAchievements > 0 && (\n                <Badge variant=\"secondary\" className=\"ml-1 px-1 py-0 text-xs\">\n                  {currentAchievements} new\n                </Badge>\n              )}\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setShowActiveChallenges(true)}\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-active-challenges\"\n            >\n              <Target className=\"h-4 w-4\" />\n              Active Challenges\n              <Badge variant=\"secondary\" className=\"ml-1 px-2 py-1 text-xs\">\n                {challengesInProgress} in progress\n              </Badge>\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setShowLeaderboard(true)}\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-team-leaderboard\"\n            >\n              <TrendingUp className=\"h-4 w-4\" />\n              Team Leaderboard\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setShowLearningPath(true)}\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-learning-path\"\n            >\n              <Compass className=\"h-4 w-4\" />\n              Learning Path\n            </Button>\n          </div>\n        </motion.div>\n\n        {/* Hardware & Resources */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.25 }}\n          className=\"mb-6\"\n        >\n          <div className=\"flex flex-wrap gap-3 p-4 bg-gradient-to-r from-orange-50 to-red-50 dark:from-orange-900/20 dark:to-red-900/20 rounded-lg border border-orange-200 dark:border-orange-700\">\n            <div className=\"flex items-center gap-2 mb-2 w-full\">\n              <Cpu className=\"h-4 w-4 text-orange-500\" />\n              <span className=\"text-sm font-medium text-orange-700 dark:text-orange-300\">\n                Quantum Hardware & Resources\n              </span>\n              <Badge variant=\"secondary\" className=\"ml-auto\">\n                {mockHardwareSchedule.length} reservations\n              </Badge>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setShowSmartScheduler(true)}\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-hardware-scheduler\"\n            >\n              <Calendar className=\"h-4 w-4\" />\n              Smart Scheduler\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setShowResourceOptimizer(true)}\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-resource-optimizer\"\n            >\n              <Zap className=\"h-4 w-4\" />\n              Resource Optimizer\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setShowLiveCircuitEditor(true)}\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-live-circuit\"\n            >\n              <BrainCircuit className=\"h-4 w-4\" />\n              Live Circuit Editor\n              <div className=\"flex -space-x-1\">\n                <div className=\"w-4 h-4 bg-green-500 rounded-full border border-white\" />\n                <div className=\"w-4 h-4 bg-blue-500 rounded-full border border-white\" />\n              </div>\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setShowExperimentTracker(true)}\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-experiment-tracker\"\n            >\n              <FlaskConical className=\"h-4 w-4\" />\n              Experiment Tracker\n              <Badge variant=\"secondary\" className=\"ml-1 px-2 py-1 text-xs\">\n                5 active\n              </Badge>\n            </Button>\n          </div>\n        </motion.div>\n\n        {/* Smart Notifications */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.3 }}\n          className=\"mb-6\"\n        >\n          <div className=\"relative\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowNotifications(!showNotifications)}\n              className=\"flex items-center gap-2 w-full p-4 bg-gradient-to-r from-cyan-50 to-blue-50 dark:from-cyan-900/20 dark:to-blue-900/20 border-cyan-200 dark:border-cyan-700\"\n              data-testid=\"button-notifications\"\n            >\n              <Bell className=\"h-4 w-4 text-cyan-500\" />\n              <span className=\"text-sm font-medium text-cyan-700 dark:text-cyan-300\">\n                Smart Notifications & Context Alerts\n              </span>\n              <Badge variant=\"destructive\" className=\"ml-auto\">\n                3 new\n              </Badge>\n            </Button>\n\n            {showNotifications && (\n              <motion.div\n                initial={{ opacity: 0, y: -10 }}\n                animate={{ opacity: 1, y: 0 }}\n                className=\"absolute top-full left-0 right-0 mt-2 p-4 bg-white dark:bg-gray-800 border rounded-lg shadow-lg z-50\"\n              >\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-start gap-3 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-700\">\n                    <CheckCircle2 className=\"h-4 w-4 text-green-500 mt-0.5\" />\n                    <div className=\"flex-1\">\n                      <div className=\"text-sm font-medium\">\n                        VQE Job Completed Successfully!\n                      </div>\n                      <div className=\"text-xs text-gray-600 dark:text-gray-400\">\n                        Your optimization found ground state with 92% fidelity\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start gap-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-700\">\n                    <Lightbulb className=\"h-4 w-4 text-blue-500 mt-0.5\" />\n                    <div className=\"flex-1\">\n                      <div className=\"text-sm font-medium\">\n                        AI Collaboration Suggestion\n                      </div>\n                      <div className=\"text-xs text-gray-600 dark:text-gray-400\">\n                        Team member Alice has similar QAOA work - consider\n                        collaborating\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start gap-3 p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg border border-purple-200 dark:border-purple-700\">\n                    <Trophy className=\"h-4 w-4 text-purple-500 mt-0.5\" />\n                    <div className=\"flex-1\">\n                      <div className=\"text-sm font-medium\">\n                        Achievement Unlocked: Circuit Optimizer!\n                      </div>\n                      <div className=\"text-xs text-gray-600 dark:text-gray-400\">\n                        You've optimized 10 quantum circuits - earned 150 points\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </div>\n        </motion.div>\n\n        <Tabs\n          value={activeTab}\n          onValueChange={setActiveTab}\n          className=\"space-y-6\"\n        >\n          <TabsList className=\"grid w-full max-w-3xl grid-cols-6\">\n            <TabsTrigger value=\"workspaces\" data-testid=\"tab-workspaces\">\n              Workspaces\n            </TabsTrigger>\n            <TabsTrigger value=\"projects\" data-testid=\"tab-projects\">\n              Live Projects\n            </TabsTrigger>\n            <TabsTrigger value=\"ai-insights\" data-testid=\"tab-ai-insights\">\n              AI Insights\n            </TabsTrigger>\n            <TabsTrigger value=\"gamification\" data-testid=\"tab-gamification\">\n              Achievements\n            </TabsTrigger>\n            <TabsTrigger value=\"analytics\" data-testid=\"tab-analytics\">\n              Analytics\n            </TabsTrigger>\n            <TabsTrigger value=\"research\" data-testid=\"tab-research\">\n              Research Hub\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Workspaces Tab */}\n          <TabsContent value=\"workspaces\" className=\"space-y-6\">\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 0.2 }}\n              className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\"\n            >\n              {filteredWorkspaces.map((workspace, index) => (\n                <motion.div\n                  key={workspace.id}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: 0.1 * index }}\n                >\n                  <Card\n                    className=\"hover:shadow-lg transition-all duration-200 cursor-pointer\"\n                    onClick={() => setSelectedWorkspace(workspace.id)}\n                  >\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <CardTitle className=\"text-lg\">\n                            {workspace.name}\n                          </CardTitle>\n                          <div className=\"flex items-center gap-1\">\n                            {getPrivacyIcon(workspace.privacy)}\n                            <Badge\n                              variant=\"secondary\"\n                              className={`${getStatusColor(workspace.status)} text-xs px-2 py-1`}\n                            >\n                              {workspace.status}\n                            </Badge>\n                          </div>\n                        </div>\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              className=\"h-8 w-8\"\n                            >\n                              <MoreHorizontal className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem>\n                              <Edit3 className=\"h-4 w-4 mr-2\" />\n                              Edit Workspace\n                            </DropdownMenuItem>\n                            <DropdownMenuItem>\n                              <UserPlus className=\"h-4 w-4 mr-2\" />\n                              Invite Members\n                            </DropdownMenuItem>\n                            <DropdownMenuItem>\n                              <Share2 className=\"h-4 w-4 mr-2\" />\n                              Share Link\n                            </DropdownMenuItem>\n                            <DropdownMenuSeparator />\n                            <DropdownMenuItem className=\"text-red-600\">\n                              <Trash2 className=\"h-4 w-4 mr-2\" />\n                              Delete\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </div>\n                      <CardDescription className=\"line-clamp-2\">\n                        {workspace.description}\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      {/* Progress */}\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-600 dark:text-gray-400\">\n                            Progress\n                          </span>\n                          <span className=\"font-medium\">\n                            {workspace.progress}%\n                          </span>\n                        </div>\n                        <Progress value={workspace.progress} className=\"h-2\" />\n                      </div>\n\n                      {/* Enhanced Quantum Stats */}\n                      <div className=\"space-y-3\">\n                        <div className=\"grid grid-cols-3 gap-4 text-center\">\n                          <div>\n                            <div className=\"text-lg font-semibold text-blue-600\">\n                              {workspace.circuits}\n                            </div>\n                            <div className=\"text-xs text-gray-500\">\n                              Circuits\n                            </div>\n                          </div>\n                          <div>\n                            <div className=\"text-lg font-semibold text-green-600\">\n                              {workspace.jobs}\n                            </div>\n                            <div className=\"text-xs text-gray-500\">Jobs</div>\n                          </div>\n                          <div>\n                            <div className=\"text-lg font-semibold text-purple-600\">\n                              {workspace.members.length}\n                            </div>\n                            <div className=\"text-xs text-gray-500\">Members</div>\n                          </div>\n                        </div>\n\n                        {/* Quantum-specific metrics */}\n                        <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                          <div className=\"flex items-center justify-between p-2 bg-blue-50 dark:bg-blue-900/20 rounded\">\n                            <span className=\"flex items-center gap-1\">\n                              <Atom className=\"h-3 w-3 text-blue-500\" />\n                              Live Circuits\n                            </span>\n                            <span className=\"font-semibold\">\n                              {workspace.quantumFeatures.liveCircuits}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center justify-between p-2 bg-green-50 dark:bg-green-900/20 rounded\">\n                            <span className=\"flex items-center gap-1\">\n                              <Users className=\"h-3 w-3 text-green-500\" />\n                              Active Now\n                            </span>\n                            <span className=\"font-semibold\">\n                              {workspace.quantumFeatures.activeCollaborators}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center justify-between p-2 bg-purple-50 dark:bg-purple-900/20 rounded\">\n                            <span className=\"flex items-center gap-1\">\n                              <FlaskConical className=\"h-3 w-3 text-purple-500\" />\n                              Experiments\n                            </span>\n                            <span className=\"font-semibold\">\n                              {workspace.quantumFeatures.experimentsSaved}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center justify-between p-2 bg-orange-50 dark:bg-orange-900/20 rounded\">\n                            <span className=\"flex items-center gap-1\">\n                              <Cpu className=\"h-3 w-3 text-orange-500\" />\n                              Hardware\n                            </span>\n                            <span className=\"font-semibold text-xs\">\n                              {workspace.quantumFeatures.hardwareReserved ||\n                                \"None\"}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Members */}\n                      <div>\n                        <div className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                          Team Members\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"flex -space-x-2\">\n                            {workspace.members\n                              .slice(0, 3)\n                              .map((member, idx) => (\n                                <Avatar\n                                  key={idx}\n                                  className=\"h-6 w-6 border-2 border-white dark:border-gray-800\"\n                                >\n                                  <AvatarFallback className=\"text-xs\">\n                                    {member\n                                      .split(\" \")\n                                      .map((n) => n[0])\n                                      .join(\"\")}\n                                  </AvatarFallback>\n                                </Avatar>\n                              ))}\n                            {workspace.members.length > 3 && (\n                              <div className=\"h-6 w-6 rounded-full bg-gray-200 dark:bg-gray-700 border-2 border-white dark:border-gray-800 flex items-center justify-center\">\n                                <span className=\"text-xs font-medium\">\n                                  +{workspace.members.length - 3}\n                                </span>\n                              </div>\n                            )}\n                          </div>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"h-6 w-6\"\n                          >\n                            <UserPlus className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      </div>\n\n                      {/* Recent Quantum Activity */}\n                      <div className=\"space-y-2\">\n                        <div className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                          Recent Activity\n                        </div>\n                        <div className=\"space-y-1 max-h-24 overflow-y-auto\">\n                          {workspace.recentActivity\n                            .slice(0, 3)\n                            .map((activity, idx) => (\n                              <div\n                                key={idx}\n                                className=\"flex items-start gap-2 text-xs\"\n                              >\n                                <div\n                                  className={`w-2 h-2 rounded-full mt-1 flex-shrink-0 ${\n                                    activity.type === \"circuit\"\n                                      ? \"bg-blue-500\"\n                                      : activity.type === \"results\"\n                                        ? \"bg-green-500\"\n                                        : activity.type === \"hardware\"\n                                          ? \"bg-orange-500\"\n                                          : activity.type === \"algorithm\"\n                                            ? \"bg-purple-500\"\n                                            : \"bg-gray-500\"\n                                  }`}\n                                />\n                                <div className=\"flex-1 min-w-0\">\n                                  <div className=\"text-gray-900 dark:text-white truncate\">\n                                    <span className=\"font-medium\">\n                                      {activity.user}\n                                    </span>{\" \"}\n                                    {activity.action}\n                                  </div>\n                                  <div className=\"text-gray-500\">\n                                    {activity.time}\n                                  </div>\n                                </div>\n                              </div>\n                            ))}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              ))}\n            </motion.div>\n\n            {filteredWorkspaces.length === 0 && (\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                className=\"text-center py-12\"\n              >\n                <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\n                  No workspaces found\n                </h3>\n                <p className=\"text-gray-500 dark:text-gray-400 mb-6\">\n                  {searchQuery ||\n                  statusFilter !== \"all\" ||\n                  privacyFilter !== \"all\"\n                    ? \"Try adjusting your search or filters\"\n                    : \"Create your first collaborative workspace to get started\"}\n                </p>\n                {!searchQuery &&\n                  statusFilter === \"all\" &&\n                  privacyFilter === \"all\" && (\n                    <Button onClick={() => setIsCreateWorkspaceOpen(true)}>\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Create Workspace\n                    </Button>\n                  )}\n              </motion.div>\n            )}\n          </TabsContent>\n\n          {/* Projects Tab */}\n          <TabsContent value=\"projects\" className=\"space-y-6\">\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 0.2 }}\n            >\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Code2 className=\"h-5 w-5 text-blue-500\" />\n                    Shared Quantum Projects\n                  </CardTitle>\n                  <CardDescription>\n                    Real-time collaborative quantum computing projects across\n                    all workspaces\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"p-0\">\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full\">\n                      <thead className=\"border-b border-gray-200 dark:border-gray-700\">\n                        <tr className=\"text-left\">\n                          <th className=\"px-6 py-3 text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                            Project\n                          </th>\n                          <th className=\"px-6 py-3 text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                            Workspace\n                          </th>\n                          <th className=\"px-6 py-3 text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                            Status\n                          </th>\n                          <th className=\"px-6 py-3 text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                            Runtime\n                          </th>\n                          <th className=\"px-6 py-3 text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                            Backend\n                          </th>\n                          <th className=\"px-6 py-3 text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                            Collaborators\n                          </th>\n                          <th className=\"px-6 py-3 text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                            Actions\n                          </th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n                        {workspaceProjects.map((project) => (\n                          <tr\n                            key={project.id}\n                            className=\"hover:bg-gray-50 dark:hover:bg-gray-800/50\"\n                          >\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div>\n                                <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                                  {project.name}\n                                </div>\n                                <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                                  Modified{\" \"}\n                                  {formatDistanceToNow(project.lastModified)}{\" \"}\n                                  ago\n                                </div>\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\n                              {project.workspace}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"flex items-center gap-2\">\n                                {project.status === \"running\" && (\n                                  <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\n                                )}\n                                {project.status === \"completed\" && (\n                                  <CheckCircle2 className=\"h-4 w-4 text-green-500\" />\n                                )}\n                                {project.status === \"draft\" && (\n                                  <Edit3 className=\"h-4 w-4 text-gray-400\" />\n                                )}\n                                <Badge\n                                  className={getStatusColor(project.status)}\n                                >\n                                  {project.status}\n                                </Badge>\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\n                              {project.runtime}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {project.backend}\n                              </Badge>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"flex items-center gap-2\">\n                                <div className=\"flex -space-x-1\">\n                                  {Array.from(\n                                    {\n                                      length: Math.min(\n                                        project.collaborators,\n                                        3,\n                                      ),\n                                    },\n                                    (_, i) => (\n                                      <Avatar\n                                        key={i}\n                                        className=\"h-6 w-6 border-2 border-white dark:border-gray-800\"\n                                      >\n                                        <AvatarFallback className=\"text-xs\">\n                                          U{i + 1}\n                                        </AvatarFallback>\n                                      </Avatar>\n                                    ),\n                                  )}\n                                </div>\n                                <span className=\"text-sm text-gray-500\">\n                                  +{project.collaborators}\n                                </span>\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"flex items-center gap-1\">\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  className=\"h-8 w-8\"\n                                >\n                                  <Eye className=\"h-4 w-4\" />\n                                </Button>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  className=\"h-8 w-8\"\n                                >\n                                  <Edit3 className=\"h-4 w-4\" />\n                                </Button>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  className=\"h-8 w-8\"\n                                >\n                                  <Share2 className=\"h-4 w-4\" />\n                                </Button>\n                                <DropdownMenu>\n                                  <DropdownMenuTrigger asChild>\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"icon\"\n                                      className=\"h-8 w-8\"\n                                    >\n                                      <MoreHorizontal className=\"h-4 w-4\" />\n                                    </Button>\n                                  </DropdownMenuTrigger>\n                                  <DropdownMenuContent align=\"end\">\n                                    <DropdownMenuItem>\n                                      <Copy className=\"h-4 w-4 mr-2\" />\n                                      Duplicate\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem>\n                                      <Download className=\"h-4 w-4 mr-2\" />\n                                      Export\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem>\n                                      <ExternalLink className=\"h-4 w-4 mr-2\" />\n                                      Open in Editor\n                                    </DropdownMenuItem>\n                                  </DropdownMenuContent>\n                                </DropdownMenu>\n                              </div>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </TabsContent>\n\n          {/* Quantum Resources Tab */}\n          <TabsContent value=\"resources\" className=\"space-y-6\">\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 0.2 }}\n              className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\"\n            >\n              {/* Hardware Schedule */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Cpu className=\"h-5 w-5 text-blue-500\" />\n                    Quantum Hardware Schedule\n                  </CardTitle>\n                  <CardDescription>\n                    Real quantum computer reservations and availability\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {mockHardwareSchedule.map((reservation) => (\n                    <div\n                      key={reservation.id}\n                      className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\"\n                    >\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {reservation.backend}\n                          </Badge>\n                          <Badge\n                            variant={\n                              reservation.status === \"confirmed\"\n                                ? \"default\"\n                                : \"secondary\"\n                            }\n                            className=\"text-xs\"\n                          >\n                            {reservation.status}\n                          </Badge>\n                        </div>\n                        <div className=\"text-sm font-medium\">\n                          {reservation.purpose}\n                        </div>\n                        <div className=\"text-xs text-gray-500\">\n                          {reservation.user} • {reservation.duration}min •{\" \"}\n                          {formatDistanceToNow(reservation.startTime)} from now\n                        </div>\n                      </div>\n                      <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\n                        <MoreHorizontal className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                  <Button\n                    className=\"w-full\"\n                    variant=\"outline\"\n                    data-testid=\"button-reserve-hardware\"\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Reserve Hardware Time\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* Resource Usage */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <BarChart3 className=\"h-5 w-5 text-green-500\" />\n                    Resource Usage Analytics\n                  </CardTitle>\n                  <CardDescription>\n                    Team quantum computing resource consumption\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm font-medium\">Quantum Jobs</span>\n                      <span className=\"text-sm text-gray-500\">\n                        47 this week\n                      </span>\n                    </div>\n                    <Progress value={78} className=\"h-2\" />\n\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm font-medium\">\n                        Hardware Hours\n                      </span>\n                      <span className=\"text-sm text-gray-500\">\n                        12.5 / 20 hours\n                      </span>\n                    </div>\n                    <Progress value={62} className=\"h-2\" />\n\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm font-medium\">\n                        Circuit Complexity\n                      </span>\n                      <span className=\"text-sm text-gray-500\">\n                        Avg 8.2 qubits\n                      </span>\n                    </div>\n                    <Progress value={41} className=\"h-2\" />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4 mt-4 pt-4 border-t\">\n                    <div className=\"text-center\">\n                      <div className=\"text-lg font-semibold text-blue-600\">\n                        94.2%\n                      </div>\n                      <div className=\"text-xs text-gray-500\">Success Rate</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-lg font-semibold text-green-600\">\n                        2.1s\n                      </div>\n                      <div className=\"text-xs text-gray-500\">Avg Runtime</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n\n            {/* Quantum Backends Status */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Network className=\"h-5 w-5 text-purple-500\" />\n                  Available Quantum Backends\n                </CardTitle>\n                <CardDescription>\n                  Real-time status of quantum computing hardware\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {[\n                    {\n                      name: \"ibm_cairo\",\n                      qubits: 27,\n                      status: \"online\",\n                      queue: 3,\n                      fidelity: 0.95,\n                    },\n                    {\n                      name: \"ibm_brisbane\",\n                      qubits: 127,\n                      status: \"online\",\n                      queue: 8,\n                      fidelity: 0.92,\n                    },\n                    {\n                      name: \"ibm_kyiv\",\n                      qubits: 127,\n                      status: \"maintenance\",\n                      queue: 0,\n                      fidelity: 0.93,\n                    },\n                    {\n                      name: \"ibm_torino\",\n                      qubits: 133,\n                      status: \"online\",\n                      queue: 12,\n                      fidelity: 0.91,\n                    },\n                    {\n                      name: \"ionq_harmony\",\n                      qubits: 56,\n                      status: \"online\",\n                      queue: 2,\n                      fidelity: 0.97,\n                    },\n                    {\n                      name: \"rigetti_aspen\",\n                      qubits: 80,\n                      status: \"offline\",\n                      queue: 0,\n                      fidelity: 0.89,\n                    },\n                  ].map((backend) => (\n                    <div\n                      key={backend.name}\n                      className=\"p-4 border rounded-lg space-y-2\"\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"font-medium\">{backend.name}</div>\n                        <div\n                          className={`w-2 h-2 rounded-full ${\n                            backend.status === \"online\"\n                              ? \"bg-green-500\"\n                              : backend.status === \"maintenance\"\n                                ? \"bg-yellow-500\"\n                                : \"bg-red-500\"\n                          }`}\n                        />\n                      </div>\n                      <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        {backend.qubits} qubits • Queue: {backend.queue}\n                      </div>\n                      <div className=\"text-sm\">\n                        <span className=\"text-gray-500\">Fidelity: </span>\n                        <span className=\"font-medium\">\n                          {(backend.fidelity * 100).toFixed(1)}%\n                        </span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* AI Insights Tab */}\n          <TabsContent value=\"ai-insights\" className=\"space-y-6\">\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 0.2 }}\n              className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\"\n            >\n              {/* AI Team Matching */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Users2 className=\"h-5 w-5 text-blue-500\" />\n                    Smart Team Recommendations\n                  </CardTitle>\n                  <CardDescription>\n                    AI-powered team matching based on skills and project synergy\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {[\n                    {\n                      type: \"team_match\",\n                      title: \"Perfect Collaboration Match\",\n                      description:\n                        \"Dr. Sarah Kim's quantum ML expertise complements your VQE optimization work perfectly\",\n                      confidence: 95,\n                      action: \"Invite to collaborate\",\n                    },\n                    {\n                      type: \"mentorship\",\n                      title: \"Mentorship Opportunity\",\n                      description:\n                        \"Bob Wilson could benefit from your QAOA experience - consider offering guidance\",\n                      confidence: 88,\n                      action: \"Offer mentorship\",\n                    },\n                    {\n                      type: \"project_suggestion\",\n                      title: \"Breakthrough Project Idea\",\n                      description:\n                        \"Hybrid VQE-QAOA approach could solve optimization problems 30% faster\",\n                      confidence: 92,\n                      action: \"Start project\",\n                    },\n                  ].map((insight, idx) => (\n                    <div key={idx} className=\"p-4 border rounded-lg space-y-3\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium flex items-center gap-2\">\n                            {insight.type === \"team_match\" && (\n                              <Users className=\"h-4 w-4 text-blue-500\" />\n                            )}\n                            {insight.type === \"mentorship\" && (\n                              <Award className=\"h-4 w-4 text-purple-500\" />\n                            )}\n                            {insight.type === \"project_suggestion\" && (\n                              <Lightbulb className=\"h-4 w-4 text-yellow-500\" />\n                            )}\n                            {insight.title}\n                          </div>\n                          <div className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                            {insight.description}\n                          </div>\n                        </div>\n                        <Badge variant=\"secondary\" className=\"ml-2\">\n                          {insight.confidence}% match\n                        </Badge>\n                      </div>\n                      <Button\n                        size=\"sm\"\n                        className=\"w-full\"\n                        data-testid={`button-${insight.type}-action`}\n                      >\n                        {insight.action}\n                      </Button>\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n\n              {/* AI Code Analysis */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Radar className=\"h-5 w-5 text-green-500\" />\n                    Intelligent Code Analysis\n                  </CardTitle>\n                  <CardDescription>\n                    AI-powered quantum circuit optimization and review\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"p-4 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-700\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <CheckCircle2 className=\"h-4 w-4 text-green-500\" />\n                      <span className=\"font-medium text-green-700 dark:text-green-300\">\n                        Optimization Found\n                      </span>\n                    </div>\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      Your VQE circuit can be optimized by 23% by reducing gate\n                      depth and using hardware-native gates\n                    </div>\n                    <Button\n                      size=\"sm\"\n                      className=\"mt-2\"\n                      data-testid=\"button-apply-optimization\"\n                    >\n                      Apply Optimization\n                    </Button>\n                  </div>\n\n                  <div className=\"p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-700\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Brain className=\"h-4 w-4 text-blue-500\" />\n                      <span className=\"font-medium text-blue-700 dark:text-blue-300\">\n                        Collaboration Insight\n                      </span>\n                    </div>\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      Similar algorithm patterns detected in Alice Chen's work -\n                      potential for code sharing\n                    </div>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"mt-2\"\n                      data-testid=\"button-compare-code\"\n                    >\n                      Compare & Collaborate\n                    </Button>\n                  </div>\n\n                  <div className=\"p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg border border-purple-200 dark:border-purple-700\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Sparkles className=\"h-4 w-4 text-purple-500\" />\n                      <span className=\"font-medium text-purple-700 dark:text-purple-300\">\n                        Innovation Opportunity\n                      </span>\n                    </div>\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      Novel ansatz structure discovered - potential for research\n                      publication\n                    </div>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"mt-2\"\n                      data-testid=\"button-research-path\"\n                    >\n                      Explore Research Path\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Resource Optimization */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Zap className=\"h-5 w-5 text-orange-500\" />\n                    Smart Resource Allocation\n                  </CardTitle>\n                  <CardDescription>\n                    AI-optimized hardware scheduling and resource management\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4 text-center\">\n                    <div className=\"p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                      <div className=\"text-lg font-semibold text-green-600\">\n                        32%\n                      </div>\n                      <div className=\"text-xs text-gray-500\">Cost Savings</div>\n                    </div>\n                    <div className=\"p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                      <div className=\"text-lg font-semibold text-blue-600\">\n                        18min\n                      </div>\n                      <div className=\"text-xs text-gray-500\">\n                        Avg Queue Time\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <div className=\"text-sm font-medium\">\n                      Recommended Schedule:\n                    </div>\n                    <div className=\"text-xs text-gray-600 dark:text-gray-400\">\n                      • Run VQE jobs on ibm_cairo between 2-4 PM (lowest queue)\n                    </div>\n                    <div className=\"text-xs text-gray-600 dark:text-gray-400\">\n                      • Use ibm_brisbane for QAOA testing (better connectivity)\n                    </div>\n                    <div className=\"text-xs text-gray-600 dark:text-gray-400\">\n                      • Batch similar experiments to optimize shot allocation\n                    </div>\n                  </div>\n\n                  <Button\n                    className=\"w-full\"\n                    size=\"sm\"\n                    data-testid=\"button-apply-schedule\"\n                  >\n                    Apply Smart Schedule\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* Learning Path Generator */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Compass className=\"h-5 w-5 text-indigo-500\" />\n                    Personalized Learning Path\n                  </CardTitle>\n                  <CardDescription>\n                    AI-curated learning journey based on your progress and goals\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-3\">\n                    {[\n                      {\n                        step: 1,\n                        title: \"Advanced VQE Techniques\",\n                        status: \"in-progress\",\n                        progress: 75,\n                      },\n                      {\n                        step: 2,\n                        title: \"Quantum Error Mitigation\",\n                        status: \"next\",\n                        progress: 0,\n                      },\n                      {\n                        step: 3,\n                        title: \"Hybrid Algorithms\",\n                        status: \"upcoming\",\n                        progress: 0,\n                      },\n                    ].map((item) => (\n                      <div key={item.step} className=\"flex items-center gap-3\">\n                        <div\n                          className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\n                            item.status === \"in-progress\"\n                              ? \"bg-blue-100 text-blue-600\"\n                              : item.status === \"next\"\n                                ? \"bg-gray-100 text-gray-600\"\n                                : \"bg-gray-50 text-gray-400\"\n                          }`}\n                        >\n                          {item.step}\n                        </div>\n                        <div className=\"flex-1\">\n                          <div className=\"text-sm font-medium\">\n                            {item.title}\n                          </div>\n                          {item.progress > 0 && (\n                            <Progress\n                              value={item.progress}\n                              className=\"h-1 mt-1\"\n                            />\n                          )}\n                        </div>\n                        {item.status === \"in-progress\" && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            data-testid={`button-continue-step-${item.step}`}\n                          >\n                            Continue\n                          </Button>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </TabsContent>\n\n          {/* Gamification Tab */}\n          <TabsContent value=\"gamification\" className=\"space-y-6\">\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 0.2 }}\n              className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\"\n            >\n              {/* Achievements Dashboard */}\n              <div className=\"lg:col-span-2 space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Trophy className=\"h-5 w-5 text-yellow-500\" />\n                      Recent Achievements\n                    </CardTitle>\n                    <CardDescription>\n                      Your quantum computing milestones and accomplishments\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {[\n                      {\n                        id: \"circuit_optimizer\",\n                        name: \"Circuit Optimizer\",\n                        description:\n                          \"Optimized 10 quantum circuits for better performance\",\n                        icon: \"⚡\",\n                        rarity: \"rare\",\n                        points: 150,\n                        unlockedAt: \"2 hours ago\",\n                        progress: 100,\n                      },\n                      {\n                        id: \"collaboration_master\",\n                        name: \"Collaboration Master\",\n                        description: \"Successfully completed 5 team projects\",\n                        icon: \"🤝\",\n                        rarity: \"uncommon\",\n                        points: 200,\n                        unlockedAt: \"1 day ago\",\n                        progress: 100,\n                      },\n                      {\n                        id: \"vqe_expert\",\n                        name: \"VQE Expert\",\n                        description:\n                          \"Master VQE algorithm implementation (8/10)\",\n                        icon: \"🔬\",\n                        rarity: \"epic\",\n                        points: 300,\n                        unlockedAt: null,\n                        progress: 80,\n                      },\n                    ].map((achievement) => (\n                      <div\n                        key={achievement.id}\n                        className={`p-4 border rounded-lg ${\n                          achievement.progress === 100\n                            ? \"bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-900/20 dark:to-orange-900/20 border-yellow-200 dark:border-yellow-700\"\n                            : \"bg-gray-50 dark:bg-gray-800\"\n                        }`}\n                      >\n                        <div className=\"flex items-start justify-between mb-2\">\n                          <div className=\"flex items-center gap-3\">\n                            <div className=\"text-2xl\">{achievement.icon}</div>\n                            <div>\n                              <div className=\"font-medium flex items-center gap-2\">\n                                {achievement.name}\n                                <Badge\n                                  variant={\n                                    achievement.rarity === \"legendary\"\n                                      ? \"default\"\n                                      : achievement.rarity === \"epic\"\n                                        ? \"secondary\"\n                                        : achievement.rarity === \"rare\"\n                                          ? \"outline\"\n                                          : \"secondary\"\n                                  }\n                                  className=\"text-xs\"\n                                >\n                                  {achievement.rarity}\n                                </Badge>\n                              </div>\n                              <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                                {achievement.description}\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className=\"text-sm font-medium text-blue-600\">\n                              +{achievement.points} pts\n                            </div>\n                            {achievement.unlockedAt && (\n                              <div className=\"text-xs text-gray-500\">\n                                {achievement.unlockedAt}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                        {achievement.progress < 100 && (\n                          <div className=\"space-y-1\">\n                            <div className=\"flex justify-between text-xs\">\n                              <span>Progress</span>\n                              <span>{achievement.progress}%</span>\n                            </div>\n                            <Progress\n                              value={achievement.progress}\n                              className=\"h-2\"\n                            />\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n\n                {/* Active Challenges */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Target className=\"h-5 w-5 text-red-500\" />\n                      Active Challenges\n                    </CardTitle>\n                    <CardDescription>\n                      Test your skills with quantum computing challenges\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {[\n                      {\n                        id: \"quantum_hackathon\",\n                        name: \"Quantum Hackathon 2025\",\n                        description:\n                          \"Build innovative quantum applications in teams\",\n                        difficulty: \"intermediate\",\n                        timeLeft: \"5 days\",\n                        participants: 127,\n                        maxParticipants: 200,\n                        rewards: [\"1000 pts\", \"Certificate\", \"Recognition\"],\n                        progress: 45,\n                      },\n                      {\n                        id: \"vqe_challenge\",\n                        name: \"VQE Mastery Challenge\",\n                        description:\n                          \"Implement and optimize VQE for molecular systems\",\n                        difficulty: \"advanced\",\n                        timeLeft: \"12 days\",\n                        participants: 67,\n                        maxParticipants: 100,\n                        rewards: [\"500 pts\", \"VQE Expert Badge\"],\n                        progress: 23,\n                      },\n                    ].map((challenge) => (\n                      <div\n                        key={challenge.id}\n                        className=\"p-4 border rounded-lg space-y-3\"\n                      >\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"font-medium flex items-center gap-2\">\n                              {challenge.name}\n                              <Badge\n                                variant={\n                                  challenge.difficulty === \"expert\"\n                                    ? \"default\"\n                                    : challenge.difficulty === \"advanced\"\n                                      ? \"secondary\"\n                                      : \"outline\"\n                                }\n                                className=\"text-xs\"\n                              >\n                                {challenge.difficulty}\n                              </Badge>\n                            </div>\n                            <div className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                              {challenge.description}\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className=\"text-sm font-medium text-orange-600\">\n                              {challenge.timeLeft} left\n                            </div>\n                            <div className=\"text-xs text-gray-500\">\n                              {challenge.participants}/\n                              {challenge.maxParticipants} joined\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <div className=\"flex justify-between text-xs\">\n                            <span>Your Progress</span>\n                            <span>{challenge.progress}%</span>\n                          </div>\n                          <Progress\n                            value={challenge.progress}\n                            className=\"h-2\"\n                          />\n                        </div>\n\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex gap-1\">\n                            {challenge.rewards.map((reward, idx) => (\n                              <Badge\n                                key={idx}\n                                variant=\"secondary\"\n                                className=\"text-xs\"\n                              >\n                                {reward}\n                              </Badge>\n                            ))}\n                          </div>\n                          <Button\n                            size=\"sm\"\n                            data-testid={`button-join-challenge-${challenge.id}`}\n                          >\n                            Continue Challenge\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n\n                    <Button\n                      className=\"w-full\"\n                      variant=\"outline\"\n                      data-testid=\"button-browse-challenges\"\n                    >\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Browse All Challenges\n                    </Button>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Sidebar - Stats & Leaderboard */}\n              <div className=\"space-y-6\">\n                {/* Player Stats */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Crown className=\"h-5 w-5 text-purple-500\" />\n                      Your Progress\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"text-center space-y-2\">\n                      <div className=\"text-3xl font-bold text-purple-600\">\n                        Level 7\n                      </div>\n                      <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        Quantum Collaborator\n                      </div>\n                      <Progress value={72} className=\"h-2\" />\n                      <div className=\"text-xs text-gray-500\">\n                        2,450 / 3,000 XP to Level 8\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-3 text-center\">\n                      <div className=\"p-2 bg-blue-50 dark:bg-blue-900/20 rounded\">\n                        <div className=\"text-lg font-semibold text-blue-600\">\n                          15\n                        </div>\n                        <div className=\"text-xs text-gray-500\">\n                          Achievements\n                        </div>\n                      </div>\n                      <div className=\"p-2 bg-green-50 dark:bg-green-900/20 rounded\">\n                        <div className=\"text-lg font-semibold text-green-600\">\n                          8\n                        </div>\n                        <div className=\"text-xs text-gray-500\">Completed</div>\n                      </div>\n                      <div className=\"p-2 bg-purple-50 dark:bg-purple-900/20 rounded\">\n                        <div className=\"text-lg font-semibold text-purple-600\">\n                          2\n                        </div>\n                        <div className=\"text-xs text-gray-500\">Active</div>\n                      </div>\n                      <div className=\"p-2 bg-orange-50 dark:bg-orange-900/20 rounded\">\n                        <div className=\"text-lg font-semibold text-orange-600\">\n                          92%\n                        </div>\n                        <div className=\"text-xs text-gray-500\">\n                          Success Rate\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Team Leaderboard */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <TrendingUp className=\"h-5 w-5 text-green-500\" />\n                      Team Leaderboard\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    {[\n                      {\n                        rank: 1,\n                        name: \"Alice Chen\",\n                        points: 3250,\n                        change: \"+125\",\n                      },\n                      {\n                        rank: 2,\n                        name: \"You\",\n                        points: 2450,\n                        change: \"+89\",\n                        highlight: true,\n                      },\n                      {\n                        rank: 3,\n                        name: \"Dr. Sarah Kim\",\n                        points: 2380,\n                        change: \"+67\",\n                      },\n                      {\n                        rank: 4,\n                        name: \"Bob Wilson\",\n                        points: 2156,\n                        change: \"+45\",\n                      },\n                      {\n                        rank: 5,\n                        name: \"John Doe\",\n                        points: 1890,\n                        change: \"+23\",\n                      },\n                    ].map((player) => (\n                      <div\n                        key={player.rank}\n                        className={`flex items-center gap-3 p-2 rounded ${\n                          player.highlight\n                            ? \"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-700\"\n                            : \"\"\n                        }`}\n                      >\n                        <div\n                          className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ${\n                            player.rank === 1\n                              ? \"bg-yellow-100 text-yellow-700\"\n                              : player.rank === 2\n                                ? \"bg-gray-100 text-gray-700\"\n                                : player.rank === 3\n                                  ? \"bg-orange-100 text-orange-700\"\n                                  : \"bg-gray-50 text-gray-600\"\n                          }`}\n                        >\n                          {player.rank}\n                        </div>\n                        <div className=\"flex-1\">\n                          <div className=\"text-sm font-medium\">\n                            {player.name}\n                          </div>\n                          <div className=\"text-xs text-gray-500\">\n                            {player.points} pts\n                          </div>\n                        </div>\n                        <div className=\"text-xs text-green-600\">\n                          {player.change}\n                        </div>\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n\n                {/* Quick Actions */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Gamepad2 className=\"h-5 w-5 text-indigo-500\" />\n                      Quick Actions\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-2\">\n                    <Button\n                      className=\"w-full justify-start\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      data-testid=\"button-daily-challenge\"\n                    >\n                      <Star className=\"h-4 w-4 mr-2\" />\n                      Daily Challenge\n                    </Button>\n                    <Button\n                      className=\"w-full justify-start\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      data-testid=\"button-team-formation\"\n                    >\n                      <Users className=\"h-4 w-4 mr-2\" />\n                      Form Team\n                    </Button>\n                    <Button\n                      className=\"w-full justify-start\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      data-testid=\"button-skill-assessment\"\n                    >\n                      <Brain className=\"h-4 w-4 mr-2\" />\n                      Skill Assessment\n                    </Button>\n                  </CardContent>\n                </Card>\n              </div>\n            </motion.div>\n          </TabsContent>\n\n          {/* Analytics Tab */}\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 0.2 }}\n              className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\"\n            >\n              {/* Collaboration Metrics */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <BarChart3 className=\"h-5 w-5 text-blue-500\" />\n                    Team Efficiency\n                  </CardTitle>\n                  <CardDescription>\n                    Real-time collaboration performance metrics\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4 text-center\">\n                    <div className=\"p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-green-600\">\n                        87%\n                      </div>\n                      <div className=\"text-xs text-gray-500\">\n                        Team Efficiency\n                      </div>\n                    </div>\n                    <div className=\"p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-blue-600\">\n                        94%\n                      </div>\n                      <div className=\"text-xs text-gray-500\">Communication</div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">Project Completion</span>\n                      <span className=\"text-sm font-medium\">8/10</span>\n                    </div>\n                    <Progress value={80} className=\"h-2\" />\n\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">Code Reviews</span>\n                      <span className=\"text-sm font-medium\">15/20</span>\n                    </div>\n                    <Progress value={75} className=\"h-2\" />\n\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">Knowledge Sharing</span>\n                      <span className=\"text-sm font-medium\">12/15</span>\n                    </div>\n                    <Progress value={80} className=\"h-2\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Quantum Performance */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Atom className=\"h-5 w-5 text-purple-500\" />\n                    Quantum Insights\n                  </CardTitle>\n                  <CardDescription>\n                    Algorithm performance and optimization trends\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4 text-center\">\n                    <div className=\"p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-purple-600\">\n                        92%\n                      </div>\n                      <div className=\"text-xs text-gray-500\">Avg Fidelity</div>\n                    </div>\n                    <div className=\"p-3 bg-orange-50 dark:bg-orange-900/20 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-orange-600\">\n                        15s\n                      </div>\n                      <div className=\"text-xs text-gray-500\">Avg Runtime</div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <div className=\"text-sm font-medium\">\n                      Most Used Algorithms:\n                    </div>\n                    <div className=\"space-y-1\">\n                      {[\n                        { name: \"VQE\", usage: 45, success: 94 },\n                        { name: \"QAOA\", usage: 32, success: 87 },\n                        { name: \"Grover\", usage: 15, success: 96 },\n                        { name: \"Shor\", usage: 8, success: 89 },\n                      ].map((algo) => (\n                        <div\n                          key={algo.name}\n                          className=\"flex items-center justify-between text-xs\"\n                        >\n                          <span>{algo.name}</span>\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"text-gray-500\">{algo.usage}%</span>\n                            <span className=\"text-green-600\">\n                              {algo.success}% ✓\n                            </span>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Resource Utilization */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Cpu className=\"h-5 w-5 text-orange-500\" />\n                    Hardware Analytics\n                  </CardTitle>\n                  <CardDescription>\n                    Quantum backend usage and optimization\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4 text-center\">\n                    <div className=\"p-3 bg-orange-50 dark:bg-orange-900/20 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-orange-600\">\n                        67%\n                      </div>\n                      <div className=\"text-xs text-gray-500\">Efficiency</div>\n                    </div>\n                    <div className=\"p-3 bg-red-50 dark:bg-red-900/20 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-red-600\">\n                        $127\n                      </div>\n                      <div className=\"text-xs text-gray-500\">Monthly Cost</div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <div className=\"text-sm font-medium\">Backend Usage:</div>\n                    <div className=\"space-y-1\">\n                      {[\n                        { backend: \"ibm_cairo\", jobs: 23, efficiency: 89 },\n                        { backend: \"ibm_brisbane\", jobs: 18, efficiency: 76 },\n                        { backend: \"simulator\", jobs: 45, efficiency: 98 },\n                      ].map((hw) => (\n                        <div\n                          key={hw.backend}\n                          className=\"flex items-center justify-between text-xs\"\n                        >\n                          <span>{hw.backend}</span>\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"text-gray-500\">\n                              {hw.jobs} jobs\n                            </span>\n                            <span\n                              className={`${hw.efficiency > 85 ? \"text-green-600\" : \"text-orange-600\"}`}\n                            >\n                              {hw.efficiency}%\n                            </span>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Collaboration Trends */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <TrendingUp className=\"h-5 w-5 text-green-500\" />\n                    Collaboration Trends\n                  </CardTitle>\n                  <CardDescription>\n                    Team interaction and growth patterns\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-3\">\n                    {[\n                      {\n                        metric: \"Live Sessions\",\n                        value: \"+23%\",\n                        trend: \"up\",\n                        description: \"vs last week\",\n                      },\n                      {\n                        metric: \"Code Reviews\",\n                        value: \"+15%\",\n                        trend: \"up\",\n                        description: \"vs last week\",\n                      },\n                      {\n                        metric: \"Knowledge Sharing\",\n                        value: \"+8%\",\n                        trend: \"up\",\n                        description: \"vs last week\",\n                      },\n                      {\n                        metric: \"Response Time\",\n                        value: \"-12%\",\n                        trend: \"down\",\n                        description: \"faster responses\",\n                      },\n                    ].map((item, idx) => (\n                      <div\n                        key={idx}\n                        className=\"flex items-center justify-between\"\n                      >\n                        <div>\n                          <div className=\"text-sm font-medium\">\n                            {item.metric}\n                          </div>\n                          <div className=\"text-xs text-gray-500\">\n                            {item.description}\n                          </div>\n                        </div>\n                        <div\n                          className={`text-sm font-bold ${\n                            (item.trend === \"up\" &&\n                              !item.metric.includes(\"Time\")) ||\n                            (item.trend === \"down\" &&\n                              item.metric.includes(\"Time\"))\n                              ? \"text-green-600\"\n                              : \"text-red-600\"\n                          }`}\n                        >\n                          {item.value}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Predictive Insights */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Rocket className=\"h-5 w-5 text-indigo-500\" />\n                    Predictive Insights\n                  </CardTitle>\n                  <CardDescription>\n                    AI-powered project and team predictions\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-3\">\n                    <div className=\"p-3 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-700\">\n                      <div className=\"text-sm font-medium text-green-700 dark:text-green-300\">\n                        Project Success\n                      </div>\n                      <div className=\"text-2xl font-bold text-green-600\">\n                        94%\n                      </div>\n                      <div className=\"text-xs text-gray-600 dark:text-gray-400\">\n                        High probability of completing current VQE project by\n                        deadline\n                      </div>\n                    </div>\n\n                    <div className=\"p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-700\">\n                      <div className=\"text-sm font-medium text-blue-700 dark:text-blue-300\">\n                        Team Growth\n                      </div>\n                      <div className=\"text-2xl font-bold text-blue-600\">+2</div>\n                      <div className=\"text-xs text-gray-600 dark:text-gray-400\">\n                        Optimal team size increase predicted for next month\n                      </div>\n                    </div>\n\n                    <div className=\"p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg border border-purple-200 dark:border-purple-700\">\n                      <div className=\"text-sm font-medium text-purple-700 dark:text-purple-300\">\n                        Innovation Score\n                      </div>\n                      <div className=\"text-2xl font-bold text-purple-600\">\n                        8.7/10\n                      </div>\n                      <div className=\"text-xs text-gray-600 dark:text-gray-400\">\n                        High potential for breakthrough discoveries\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Action Items */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <CheckSquare className=\"h-5 w-5 text-yellow-500\" />\n                    Action Items\n                  </CardTitle>\n                  <CardDescription>\n                    AI-recommended improvements and optimizations\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {[\n                    {\n                      priority: \"high\",\n                      title: \"Schedule Team Sync\",\n                      description:\n                        \"Collaboration efficiency can improve with weekly standup\",\n                      action: \"Schedule Meeting\",\n                    },\n                    {\n                      priority: \"medium\",\n                      title: \"Optimize Hardware Usage\",\n                      description:\n                        \"Switch to ibm_cairo for better cost efficiency\",\n                      action: \"Update Schedule\",\n                    },\n                    {\n                      priority: \"low\",\n                      title: \"Documentation Update\",\n                      description:\n                        \"VQE implementation needs better documentation\",\n                      action: \"Add Docs\",\n                    },\n                  ].map((item, idx) => (\n                    <div key={idx} className=\"p-3 border rounded-lg space-y-2\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"text-sm font-medium flex items-center gap-2\">\n                            <div\n                              className={`w-2 h-2 rounded-full ${\n                                item.priority === \"high\"\n                                  ? \"bg-red-500\"\n                                  : item.priority === \"medium\"\n                                    ? \"bg-yellow-500\"\n                                    : \"bg-green-500\"\n                              }`}\n                            />\n                            {item.title}\n                          </div>\n                          <div className=\"text-xs text-gray-600 dark:text-gray-400 mt-1\">\n                            {item.description}\n                          </div>\n                        </div>\n                      </div>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        className=\"w-full\"\n                        data-testid={`button-action-${idx}`}\n                      >\n                        {item.action}\n                      </Button>\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n            </motion.div>\n          </TabsContent>\n\n          {/* Research Hub Tab */}\n          <TabsContent value=\"research\" className=\"space-y-6\">\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 0.2 }}\n              className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\"\n            >\n              {/* Knowledge Base */}\n              <div className=\"lg:col-span-2 space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <BookOpen className=\"h-5 w-5 text-blue-500\" />\n                      Collaborative Knowledge Base\n                    </CardTitle>\n                    <CardDescription>\n                      Shared quantum research documentation and insights\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {[\n                      {\n                        title: \"VQE Optimization Strategies\",\n                        author: \"Dr. Sarah Kim\",\n                        updated: \"2 hours ago\",\n                        tags: [\"VQE\", \"Optimization\", \"NISQ\"],\n                        contributors: 3,\n                      },\n                      {\n                        title: \"QAOA Parameter Landscape Analysis\",\n                        author: \"John Doe\",\n                        updated: \"1 day ago\",\n                        tags: [\"QAOA\", \"Parameters\", \"Analysis\"],\n                        contributors: 2,\n                      },\n                      {\n                        title: \"Quantum Error Mitigation Techniques\",\n                        author: \"Alice Chen\",\n                        updated: \"3 days ago\",\n                        tags: [\"Error Mitigation\", \"NISQ\", \"Fidelity\"],\n                        contributors: 4,\n                      },\n                    ].map((doc, idx) => (\n                      <div\n                        key={idx}\n                        className=\"p-4 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800/50 cursor-pointer\"\n                      >\n                        <div className=\"flex items-start justify-between mb-2\">\n                          <div className=\"flex-1\">\n                            <div className=\"font-medium\">{doc.title}</div>\n                            <div className=\"text-sm text-gray-500 mt-1\">\n                              By {doc.author} • Updated {doc.updated}\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-1 text-sm text-gray-500\">\n                            <Users className=\"h-3 w-3\" />\n                            {doc.contributors}\n                          </div>\n                        </div>\n                        <div className=\"flex gap-1\">\n                          {doc.tags.map((tag) => (\n                            <Badge\n                              key={tag}\n                              variant=\"secondary\"\n                              className=\"text-xs\"\n                            >\n                              {tag}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    ))}\n                    <Button\n                      className=\"w-full\"\n                      variant=\"outline\"\n                      data-testid=\"button-create-research-doc\"\n                    >\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Create New Research Document\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                {/* Active Experiments */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <FlaskConical className=\"h-5 w-5 text-green-500\" />\n                      Active Quantum Experiments\n                    </CardTitle>\n                    <CardDescription>\n                      Ongoing research experiments and hypothesis testing\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {[\n                        {\n                          title: \"Hybrid VQE-QAOA Performance\",\n                          hypothesis:\n                            \"Combining VQE and QAOA improves optimization\",\n                          progress: 75,\n                          team: [\"Alice Chen\", \"Bob Wilson\"],\n                          status: \"testing\",\n                        },\n                        {\n                          title: \"Quantum Advantage in Max-Cut\",\n                          hypothesis:\n                            \"Quantum algorithms show advantage for graphs >50 nodes\",\n                          progress: 40,\n                          team: [\"John Doe\", \"Emma Davis\"],\n                          status: \"data-collection\",\n                        },\n                      ].map((exp, idx) => (\n                        <div key={idx} className=\"p-4 border rounded-lg\">\n                          <div className=\"flex items-start justify-between mb-2\">\n                            <div className=\"flex-1\">\n                              <div className=\"font-medium\">{exp.title}</div>\n                              <div className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                                {exp.hypothesis}\n                              </div>\n                            </div>\n                            <Badge\n                              variant={\n                                exp.status === \"testing\"\n                                  ? \"default\"\n                                  : \"secondary\"\n                              }\n                              className=\"text-xs\"\n                            >\n                              {exp.status.replace(\"-\", \" \")}\n                            </Badge>\n                          </div>\n                          <div className=\"space-y-2\">\n                            <div className=\"flex justify-between text-sm\">\n                              <span>Progress</span>\n                              <span>{exp.progress}%</span>\n                            </div>\n                            <Progress value={exp.progress} className=\"h-2\" />\n                            <div className=\"flex items-center gap-2\">\n                              <div className=\"flex -space-x-1\">\n                                {exp.team.map((member, midx) => (\n                                  <Avatar\n                                    key={midx}\n                                    className=\"h-6 w-6 border-2 border-white dark:border-gray-800\"\n                                  >\n                                    <AvatarFallback className=\"text-xs\">\n                                      {member\n                                        .split(\" \")\n                                        .map((n) => n[0])\n                                        .join(\"\")}\n                                    </AvatarFallback>\n                                  </Avatar>\n                                ))}\n                              </div>\n                              <span className=\"text-xs text-gray-500\">\n                                {exp.team.join(\", \")}\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Quick Tools */}\n              <div className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Sparkles className=\"h-5 w-5 text-purple-500\" />\n                      Quick Research Tools\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <Button\n                      className=\"w-full justify-start\"\n                      variant=\"outline\"\n                      data-testid=\"button-algorithm-generator\"\n                    >\n                      <BrainCircuit className=\"h-4 w-4 mr-2\" />\n                      Algorithm Template Generator\n                    </Button>\n                    <Button\n                      className=\"w-full justify-start\"\n                      variant=\"outline\"\n                      data-testid=\"button-hypothesis-tracker\"\n                    >\n                      <Target className=\"h-4 w-4 mr-2\" />\n                      Hypothesis Tracker\n                    </Button>\n                    <Button\n                      className=\"w-full justify-start\"\n                      variant=\"outline\"\n                      data-testid=\"button-comparison-tool\"\n                    >\n                      <BarChart3 className=\"h-4 w-4 mr-2\" />\n                      Result Comparison Tool\n                    </Button>\n                    <Button\n                      className=\"w-full justify-start\"\n                      variant=\"outline\"\n                      data-testid=\"button-paper-generator\"\n                    >\n                      <FileText className=\"h-4 w-4 mr-2\" />\n                      Research Paper Generator\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <MessageSquare className=\"h-5 w-5 text-blue-500\" />\n                      Research Chat\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"h-40 overflow-y-auto space-y-2 p-2 bg-gray-50 dark:bg-gray-800 rounded\">\n                      {mockQuantumChat.slice(0, 3).map((msg) => (\n                        <div key={msg.id} className=\"text-sm\">\n                          <div className=\"font-medium text-blue-600\">\n                            {msg.user}\n                          </div>\n                          <div className=\"text-gray-700 dark:text-gray-300\">\n                            {msg.message}\n                          </div>\n                          <div className=\"text-xs text-gray-500\">\n                            {formatDistanceToNow(msg.timestamp)} ago\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Input\n                        placeholder=\"Ask about quantum research...\"\n                        className=\"flex-1\"\n                        data-testid=\"input-research-chat\"\n                      />\n                      <Button size=\"icon\" data-testid=\"button-send-message\">\n                        <Send className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </motion.div>\n          </TabsContent>\n        </Tabs>\n\n        {/* ================ COMPREHENSIVE MODAL INTERFACES ================ */}\n\n        {/* 1. Enhanced Research Chat Modal */}\n        <Dialog open={showResearchChat} onOpenChange={setShowResearchChat}>\n          <DialogContent className=\"max-w-7xl max-h-[85vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <MessageSquare className=\"h-5 w-5 text-blue-500\" />\n                  Research Chat - Quantum Collaboration Hub\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Badge\n                    variant=\"outline\"\n                    className=\"bg-green-50 text-green-700 border-green-200\"\n                  >\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full mr-1 animate-pulse\"></div>\n                    5 active\n                  </Badge>\n                  <Button\n                    size=\"icon\"\n                    variant=\"ghost\"\n                    data-testid=\"button-chat-settings\"\n                  >\n                    <Settings className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </DialogTitle>\n              <DialogDescription>\n                Advanced research collaboration with AI-powered insights, file\n                sharing, and real-time quantum analysis\n              </DialogDescription>\n            </DialogHeader>\n\n            <div className=\"flex h-[650px] gap-4\">\n              {/* Main Chat Area */}\n              <div className=\"flex-1 flex flex-col bg-white dark:bg-gray-950 rounded-lg border\">\n                {/* Chat Header with Search */}\n                <div className=\"p-4 border-b bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-950/50 dark:to-indigo-950/50\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"relative flex-1\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                      <Input\n                        placeholder=\"Search chat history, equations, or quantum circuits...\"\n                        className=\"pl-10 bg-white dark:bg-gray-900\"\n                        data-testid=\"input-search-chat\"\n                      />\n                    </div>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      data-testid=\"button-thread-view\"\n                    >\n                      <Hash className=\"h-4 w-4 mr-1\" />\n                      Threads\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      data-testid=\"button-bookmark-message\"\n                    >\n                      <Bookmark className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Enhanced Chat Messages */}\n                <div className=\"flex-1 overflow-y-auto p-4 space-y-6\">\n                  {mockQuantumChat.map((msg, idx) => (\n                    <div key={msg.id} className=\"group relative\">\n                      <div className=\"flex gap-4\">\n                        <Avatar className=\"h-10 w-10 ring-2 ring-blue-100 dark:ring-blue-900\">\n                          <AvatarFallback className=\"bg-gradient-to-br from-blue-500 to-indigo-600 text-white font-semibold\">\n                            {msg.user\n                              .split(\" \")\n                              .map((n) => n[0])\n                              .join(\"\")}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center gap-2 mb-2\">\n                            <span className=\"font-semibold text-gray-900 dark:text-white\">\n                              {msg.user}\n                            </span>\n                            <Badge\n                              variant={\n                                msg.type === \"algorithm\"\n                                  ? \"default\"\n                                  : msg.type === \"hardware\"\n                                    ? \"destructive\"\n                                    : \"secondary\"\n                              }\n                              className=\"text-xs px-2 py-0.5\"\n                            >\n                              {msg.type}\n                            </Badge>\n                            <span className=\"text-xs text-gray-500\">\n                              {formatDistanceToNow(msg.timestamp)} ago\n                            </span>\n                            <div className=\"opacity-0 group-hover:opacity-100 transition-opacity flex items-center gap-1 ml-auto\">\n                              <Button\n                                size=\"icon\"\n                                variant=\"ghost\"\n                                className=\"h-6 w-6\"\n                                data-testid={`button-reply-${msg.id}`}\n                              >\n                                <MessageSquare className=\"h-3 w-3\" />\n                              </Button>\n                              <Button\n                                size=\"icon\"\n                                variant=\"ghost\"\n                                className=\"h-6 w-6\"\n                                data-testid={`button-react-${msg.id}`}\n                              >\n                                <Heart className=\"h-3 w-3\" />\n                              </Button>\n                              <Button\n                                size=\"icon\"\n                                variant=\"ghost\"\n                                className=\"h-6 w-6\"\n                                data-testid={`button-bookmark-${msg.id}`}\n                              >\n                                <BookmarkCheck className=\"h-3 w-3\" />\n                              </Button>\n                            </div>\n                          </div>\n                          <div className=\"bg-gray-50 dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700\">\n                            <p className=\"text-gray-800 dark:text-gray-200 leading-relaxed\">\n                              {msg.message}\n                            </p>\n                            {msg.attachments && (\n                              <div className=\"mt-3 space-y-2\">\n                                {msg.attachments.map((att, attIdx) => (\n                                  <div\n                                    key={attIdx}\n                                    className=\"flex items-center gap-3 bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg border border-blue-200 dark:border-blue-800\"\n                                  >\n                                    <div className=\"p-2 bg-blue-100 dark:bg-blue-800 rounded\">\n                                      <FileText className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n                                    </div>\n                                    <div className=\"flex-1\">\n                                      <div className=\"font-medium text-blue-900 dark:text-blue-100\">\n                                        {att.name}\n                                      </div>\n                                      <div className=\"text-xs text-blue-600 dark:text-blue-400\">\n                                        Quantum Circuit • 2.3 KB\n                                      </div>\n                                    </div>\n                                    <Button\n                                      size=\"sm\"\n                                      variant=\"outline\"\n                                      data-testid={`button-download-${attIdx}`}\n                                    >\n                                      <Download className=\"h-4 w-4\" />\n                                    </Button>\n                                  </div>\n                                ))}\n                              </div>\n                            )}\n                            {/* Reaction Bar */}\n                            <div className=\"mt-3 flex items-center gap-2\">\n                              <div className=\"flex items-center gap-1\">\n                                <span className=\"text-lg\">👍</span>\n                                <span className=\"text-xs text-gray-500\">3</span>\n                              </div>\n                              <div className=\"flex items-center gap-1\">\n                                <span className=\"text-lg\">🧠</span>\n                                <span className=\"text-xs text-gray-500\">2</span>\n                              </div>\n                              <div className=\"flex items-center gap-1\">\n                                <span className=\"text-lg\">⚛️</span>\n                                <span className=\"text-xs text-gray-500\">1</span>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                  {/* Typing Indicator */}\n                  <div className=\"flex gap-4 opacity-70\">\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarFallback className=\"bg-gray-400 text-white text-sm\">\n                        JD\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex items-center gap-2 bg-gray-100 dark:bg-gray-800 rounded-lg px-3 py-2\">\n                      <div className=\"flex gap-1\">\n                        <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-pulse\"></div>\n                        <div\n                          className=\"w-2 h-2 bg-gray-400 rounded-full animate-pulse\"\n                          style={{ animationDelay: \"0.2s\" }}\n                        ></div>\n                        <div\n                          className=\"w-2 h-2 bg-gray-400 rounded-full animate-pulse\"\n                          style={{ animationDelay: \"0.4s\" }}\n                        ></div>\n                      </div>\n                      <span className=\"text-xs text-gray-500\">\n                        John is typing...\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Enhanced Message Input */}\n                <div className=\"p-4 border-t bg-gray-50 dark:bg-gray-900\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400\">\n                      <span>\n                        Reply to: Alice Chen - \"Just optimized the VQE\n                        circuit...\"\n                      </span>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className=\"h-5 w-5\"\n                        data-testid=\"button-clear-reply\"\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <div className=\"flex-1 relative\">\n                        <Textarea\n                          placeholder=\"Share quantum insights, ask questions, or discuss algorithms...\"\n                          value={currentChatMessage}\n                          onChange={(e) =>\n                            setCurrentChatMessage(e.target.value)\n                          }\n                          className=\"min-h-[80px] resize-none pr-20\"\n                          data-testid=\"textarea-chat-message\"\n                        />\n                        <div className=\"absolute bottom-2 right-2 flex items-center gap-1\">\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            className=\"h-6 w-6\"\n                            data-testid=\"button-emoji\"\n                          >\n                            <span className=\"text-lg\">😊</span>\n                          </Button>\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            className=\"h-6 w-6\"\n                            data-testid=\"button-attach-file\"\n                          >\n                            <Paperclip className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      </div>\n                      <div className=\"flex flex-col gap-2\">\n                        <Button\n                          size=\"icon\"\n                          className=\"h-10 w-10\"\n                          data-testid=\"button-send-chat\"\n                        >\n                          <Send className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          size=\"icon\"\n                          variant=\"outline\"\n                          className=\"h-8 w-8\"\n                          data-testid=\"button-voice-message\"\n                        >\n                          <Mic className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-xs text-gray-500\">\n                      <span>Press Enter to send, Shift+Enter for new line</span>\n                      <span>•</span>\n                      <span>Format with *bold* _italic_ `code`</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Enhanced Sidebar */}\n              <div className=\"w-80 space-y-4\">\n                {/* Active Members */}\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm flex items-center gap-2\">\n                      <Users className=\"h-4 w-4 text-green-500\" />\n                      Team Members (5)\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    {[\n                      \"Alice Chen\",\n                      \"Bob Wilson\",\n                      \"Dr. Sarah Kim\",\n                      \"John Doe\",\n                      \"Emma Davis\",\n                    ].map((user, idx) => (\n                      <div\n                        key={idx}\n                        className=\"flex items-center justify-between group\"\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"relative\">\n                            <Avatar className=\"h-8 w-8\">\n                              <AvatarFallback className=\"bg-gradient-to-br from-blue-500 to-purple-600 text-white text-xs\">\n                                {user\n                                  .split(\" \")\n                                  .map((n) => n[0])\n                                  .join(\"\")}\n                              </AvatarFallback>\n                            </Avatar>\n                            <div className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-green-500 border-2 border-white dark:border-gray-800 rounded-full\"></div>\n                          </div>\n                          <div>\n                            <div className=\"text-sm font-medium\">{user}</div>\n                            <div className=\"text-xs text-gray-500\">\n                              {idx === 0\n                                ? \"Working on VQE\"\n                                : idx === 1\n                                  ? \"Hardware testing\"\n                                  : \"Available\"}\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"opacity-0 group-hover:opacity-100 transition-opacity\">\n                          <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button\n                                size=\"icon\"\n                                variant=\"ghost\"\n                                className=\"h-6 w-6\"\n                              >\n                                <MoreHorizontal className=\"h-3 w-3\" />\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent align=\"end\">\n                              <DropdownMenuItem>\n                                <MessageSquare className=\"h-4 w-4 mr-2\" />\n                                Direct Message\n                              </DropdownMenuItem>\n                              <DropdownMenuItem>\n                                <Video className=\"h-4 w-4 mr-2\" />\n                                Start Call\n                              </DropdownMenuItem>\n                              <DropdownMenuItem>\n                                <Share2 className=\"h-4 w-4 mr-2\" />\n                                Share Screen\n                              </DropdownMenuItem>\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        </div>\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n\n                {/* AI Research Assistant */}\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm flex items-center gap-2\">\n                      <Brain className=\"h-4 w-4 text-purple-500\" />\n                      AI Research Assistant\n                      <Badge variant=\"secondary\" className=\"ml-auto text-xs\">\n                        Beta\n                      </Badge>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"p-3 bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 rounded-lg border border-purple-200 dark:border-purple-800\">\n                      <div className=\"flex items-start gap-2\">\n                        <Sparkles className=\"h-4 w-4 text-purple-500 mt-0.5 flex-shrink-0\" />\n                        <div className=\"text-sm\">\n                          <div className=\"font-medium text-purple-900 dark:text-purple-100\">\n                            Optimization Suggestion\n                          </div>\n                          <div className=\"text-purple-700 dark:text-purple-300 mt-1\">\n                            Your VQE circuit can achieve 15% better fidelity by\n                            adjusting the ansatz depth to 10 layers.\n                          </div>\n                          <Button\n                            size=\"sm\"\n                            className=\"mt-2\"\n                            data-testid=\"button-apply-ai-suggestion\"\n                          >\n                            Apply Suggestion\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"p-3 bg-gradient-to-r from-blue-50 to-cyan-50 dark:from-blue-900/20 dark:to-cyan-900/20 rounded-lg border border-blue-200 dark:border-blue-800\">\n                      <div className=\"flex items-start gap-2\">\n                        <Network className=\"h-4 w-4 text-blue-500 mt-0.5 flex-shrink-0\" />\n                        <div className=\"text-sm\">\n                          <div className=\"font-medium text-blue-900 dark:text-blue-100\">\n                            Hardware Alert\n                          </div>\n                          <div className=\"text-blue-700 dark:text-blue-300 mt-1\">\n                            IBM Cairo will be available for 2 hours starting at\n                            3:00 PM today.\n                          </div>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            className=\"mt-2\"\n                            data-testid=\"button-reserve-hardware\"\n                          >\n                            Reserve Time\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n\n                    <Button\n                      className=\"w-full\"\n                      size=\"sm\"\n                      data-testid=\"button-ask-ai\"\n                    >\n                      <MessageSquare className=\"h-4 w-4 mr-2\" />\n                      Ask AI Assistant\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                {/* Recent Files */}\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm flex items-center gap-2\">\n                      <FileText className=\"h-4 w-4 text-blue-500\" />\n                      Shared Files\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-2\">\n                    {[\n                      {\n                        name: \"VQE_optimization_v2.qasm\",\n                        size: \"2.3 KB\",\n                        user: \"Alice\",\n                        time: \"2m ago\",\n                      },\n                      {\n                        name: \"QAOA_results.pdf\",\n                        size: \"1.8 MB\",\n                        user: \"Bob\",\n                        time: \"15m ago\",\n                      },\n                      {\n                        name: \"quantum_error_analysis.py\",\n                        size: \"5.2 KB\",\n                        user: \"Sarah\",\n                        time: \"1h ago\",\n                      },\n                    ].map((file, idx) => (\n                      <div\n                        key={idx}\n                        className=\"flex items-center gap-2 p-2 hover:bg-gray-50 dark:hover:bg-gray-800 rounded cursor-pointer\"\n                      >\n                        <div className=\"p-1 bg-blue-100 dark:bg-blue-800 rounded\">\n                          <FileText className=\"h-3 w-3 text-blue-600 dark:text-blue-400\" />\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"text-xs font-medium truncate\">\n                            {file.name}\n                          </div>\n                          <div className=\"text-xs text-gray-500\">\n                            {file.user} • {file.time}\n                          </div>\n                        </div>\n                        <Button size=\"icon\" variant=\"ghost\" className=\"h-6 w-6\">\n                          <Download className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* 2. Enhanced Voice Chat Modal */}\n        <Dialog open={showVoiceChat} onOpenChange={setShowVoiceChat}>\n          <DialogContent className=\"max-w-7xl max-h-[85vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"relative\">\n                    <Phone className=\"h-6 w-6 text-green-500\" />\n                    <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-green-500 rounded-full animate-pulse\"></div>\n                  </div>\n                  <div>\n                    <div className=\"text-lg font-semibold\">\n                      Quantum Research Voice Room\n                    </div>\n                    <div className=\"text-sm text-gray-500 font-normal\">\n                      Room ID: QR-2024-789 • 4 participants\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Badge\n                    variant=\"outline\"\n                    className=\"bg-green-50 text-green-700 border-green-200\"\n                  >\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full mr-1 animate-pulse\"></div>\n                    LIVE • 12:34\n                  </Badge>\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        data-testid=\"button-voice-settings\"\n                      >\n                        <Settings className=\"h-4 w-4\" />\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\">\n                      <DropdownMenuItem>\n                        <Settings2 className=\"h-4 w-4 mr-2\" />\n                        Audio Settings\n                      </DropdownMenuItem>\n                      <DropdownMenuItem>\n                        <Volume2 className=\"h-4 w-4 mr-2\" />\n                        Speaker Test\n                      </DropdownMenuItem>\n                      <DropdownMenuItem>\n                        <Download className=\"h-4 w-4 mr-2\" />\n                        Record Meeting\n                      </DropdownMenuItem>\n                      <DropdownMenuSeparator />\n                      <DropdownMenuItem className=\"text-red-600\">\n                        <StopCircle className=\"h-4 w-4 mr-2\" />\n                        Leave Meeting\n                      </DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </div>\n              </DialogTitle>\n              <DialogDescription>\n                Professional voice collaboration with HD audio, screen sharing,\n                and quantum research tools\n              </DialogDescription>\n            </DialogHeader>\n\n            <div className=\"flex h-[700px] gap-6\">\n              {/* Main Video/Audio Area */}\n              <div className=\"flex-1 flex flex-col\">\n                {/* Participants Grid */}\n                <div className=\"flex-1 grid grid-cols-2 gap-4 p-4 bg-gray-50 dark:bg-gray-900 rounded-lg\">\n                  {[\n                    {\n                      name: \"Alice Chen (You)\",\n                      status: \"speaking\",\n                      muted: false,\n                      camera: true,\n                      role: \"Host\",\n                    },\n                    {\n                      name: \"Bob Wilson\",\n                      status: \"listening\",\n                      muted: true,\n                      camera: false,\n                      role: \"Researcher\",\n                    },\n                    {\n                      name: \"Dr. Sarah Kim\",\n                      status: \"speaking\",\n                      muted: false,\n                      camera: true,\n                      role: \"Mentor\",\n                    },\n                    {\n                      name: \"John Doe\",\n                      status: \"away\",\n                      muted: false,\n                      camera: false,\n                      role: \"Student\",\n                    },\n                  ].map((user, idx) => (\n                    <div\n                      key={idx}\n                      className={`relative rounded-xl overflow-hidden ${\n                        user.status === \"speaking\"\n                          ? \"ring-4 ring-green-400 ring-opacity-60\"\n                          : user.status === \"away\"\n                            ? \"ring-2 ring-yellow-400 ring-opacity-40\"\n                            : \"ring-2 ring-gray-300 ring-opacity-20\"\n                      }`}\n                    >\n                      <div className=\"bg-gradient-to-br from-gray-800 to-gray-900 h-48 flex items-center justify-center relative\">\n                        {user.camera ? (\n                          <div className=\"w-full h-full bg-gradient-to-br from-blue-600 to-purple-700 flex items-center justify-center\">\n                            <div className=\"text-center text-white\">\n                              <div className=\"w-20 h-20 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-3 backdrop-blur-sm\">\n                                <span className=\"text-2xl font-bold\">\n                                  {user.name\n                                    .split(\" \")\n                                    .map((n) => n[0])\n                                    .join(\"\")}\n                                </span>\n                              </div>\n                              <div className=\"text-lg font-semibold\">\n                                {user.name}\n                              </div>\n                              <div className=\"text-sm opacity-80\">\n                                {user.role}\n                              </div>\n                            </div>\n                          </div>\n                        ) : (\n                          <div className=\"text-center text-white\">\n                            <div className=\"w-20 h-20 bg-gray-600 rounded-full flex items-center justify-center mx-auto mb-3\">\n                              <CameraOff className=\"h-8 w-8\" />\n                            </div>\n                            <div className=\"text-lg font-semibold\">\n                              {user.name}\n                            </div>\n                            <div className=\"text-sm opacity-80\">\n                              {user.role}\n                            </div>\n                          </div>\n                        )}\n\n                        {/* Status Indicators */}\n                        <div className=\"absolute top-3 left-3 flex gap-2\">\n                          <div\n                            className={`px-2 py-1 rounded-full text-xs font-medium ${\n                              user.status === \"speaking\"\n                                ? \"bg-green-500 text-white\"\n                                : user.status === \"away\"\n                                  ? \"bg-yellow-500 text-white\"\n                                  : \"bg-gray-500 text-white\"\n                            }`}\n                          >\n                            {user.status === \"speaking\"\n                              ? \"🎤 Speaking\"\n                              : user.status === \"away\"\n                                ? \"⏰ Away\"\n                                : \"👂 Listening\"}\n                          </div>\n                        </div>\n\n                        {/* Controls Overlay */}\n                        <div className=\"absolute bottom-3 right-3 flex gap-1\">\n                          <div\n                            className={`p-2 rounded-full ${user.muted ? \"bg-red-500\" : \"bg-green-500\"}`}\n                          >\n                            {user.muted ? (\n                              <MicOff className=\"h-3 w-3 text-white\" />\n                            ) : (\n                              <Mic className=\"h-3 w-3 text-white\" />\n                            )}\n                          </div>\n                          <div\n                            className={`p-2 rounded-full ${user.camera ? \"bg-blue-500\" : \"bg-gray-500\"}`}\n                          >\n                            {user.camera ? (\n                              <Camera className=\"h-3 w-3 text-white\" />\n                            ) : (\n                              <CameraOff className=\"h-3 w-3 text-white\" />\n                            )}\n                          </div>\n                        </div>\n\n                        {/* Audio Visualization */}\n                        {user.status === \"speaking\" && (\n                          <div className=\"absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-green-400 to-blue-500\">\n                            <div className=\"h-full bg-gradient-to-r from-green-500 to-emerald-400 animate-pulse\"></div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                {/* Professional Control Bar */}\n                <div className=\"p-6 bg-white dark:bg-gray-800 border-t\">\n                  <div className=\"flex items-center justify-between\">\n                    {/* Primary Controls */}\n                    <div className=\"flex items-center gap-4\">\n                      <Button\n                        size=\"lg\"\n                        variant={isMuted ? \"destructive\" : \"default\"}\n                        onClick={() => setIsMuted(!isMuted)}\n                        className=\"h-14 w-14 rounded-full\"\n                        data-testid=\"button-toggle-mute\"\n                      >\n                        {isMuted ? (\n                          <MicOff className=\"h-6 w-6\" />\n                        ) : (\n                          <Mic className=\"h-6 w-6\" />\n                        )}\n                      </Button>\n                      <Button\n                        size=\"lg\"\n                        variant={isCameraOn ? \"default\" : \"outline\"}\n                        onClick={() => setIsCameraOn(!isCameraOn)}\n                        className=\"h-14 w-14 rounded-full\"\n                        data-testid=\"button-toggle-camera\"\n                      >\n                        {isCameraOn ? (\n                          <Camera className=\"h-6 w-6\" />\n                        ) : (\n                          <CameraOff className=\"h-6 w-6\" />\n                        )}\n                      </Button>\n                      <Button\n                        size=\"lg\"\n                        variant=\"outline\"\n                        className=\"h-14 w-14 rounded-full\"\n                        data-testid=\"button-screen-share\"\n                      >\n                        <ScreenShare className=\"h-6 w-6\" />\n                      </Button>\n                    </div>\n\n                    {/* Recording Status */}\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"flex items-center gap-2 px-3 py-2 bg-red-50 dark:bg-red-900/20 rounded-lg border border-red-200 dark:border-red-800\">\n                        <div className=\"w-3 h-3 bg-red-500 rounded-full animate-pulse\"></div>\n                        <span className=\"text-sm font-medium text-red-700 dark:text-red-300\">\n                          Recording\n                        </span>\n                        <span className=\"text-xs text-red-600 dark:text-red-400\">\n                          12:34\n                        </span>\n                      </div>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        data-testid=\"button-stop-recording\"\n                      >\n                        <StopCircle className=\"h-4 w-4 mr-2\" />\n                        Stop\n                      </Button>\n                    </div>\n\n                    {/* Leave Button */}\n                    <Button\n                      size=\"lg\"\n                      variant=\"destructive\"\n                      onClick={() => setShowVoiceChat(false)}\n                      className=\"h-14 px-6\"\n                      data-testid=\"button-leave-call\"\n                    >\n                      <StopCircle className=\"h-5 w-5 mr-2\" />\n                      Leave\n                    </Button>\n                  </div>\n\n                  {/* Audio Controls */}\n                  <div className=\"flex items-center gap-6 mt-4 pt-4 border-t\">\n                    <div className=\"flex items-center gap-2\">\n                      <Volume2 className=\"h-4 w-4 text-gray-500\" />\n                      <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        Speaker\n                      </span>\n                      <div className=\"w-20 h-2 bg-gray-200 dark:bg-gray-700 rounded-full\">\n                        <div className=\"w-3/4 h-full bg-blue-500 rounded-full\"></div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Mic className=\"h-4 w-4 text-gray-500\" />\n                      <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        Microphone\n                      </span>\n                      <div className=\"w-20 h-2 bg-gray-200 dark:bg-gray-700 rounded-full\">\n                        <div className=\"w-2/3 h-full bg-green-500 rounded-full\"></div>\n                      </div>\n                    </div>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      data-testid=\"button-audio-test\"\n                    >\n                      <TestTube className=\"h-4 w-4 mr-2\" />\n                      Test Audio\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      data-testid=\"button-noise-cancellation\"\n                    >\n                      <Waves className=\"h-4 w-4 mr-2\" />\n                      Noise Cancellation\n                    </Button>\n                  </div>\n                </div>\n              </div>\n\n              {/* Enhanced Sidebar */}\n              <div className=\"w-80 space-y-4\">\n                {/* Participants List */}\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm flex items-center gap-2\">\n                      <Users className=\"h-4 w-4 text-blue-500\" />\n                      Participants (4)\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    {[\n                      {\n                        name: \"Alice Chen\",\n                        role: \"Host\",\n                        status: \"speaking\",\n                        muted: false,\n                      },\n                      {\n                        name: \"Bob Wilson\",\n                        role: \"Researcher\",\n                        status: \"listening\",\n                        muted: true,\n                      },\n                      {\n                        name: \"Dr. Sarah Kim\",\n                        role: \"Mentor\",\n                        status: \"speaking\",\n                        muted: false,\n                      },\n                      {\n                        name: \"John Doe\",\n                        role: \"Student\",\n                        status: \"away\",\n                        muted: false,\n                      },\n                    ].map((user, idx) => (\n                      <div\n                        key={idx}\n                        className=\"flex items-center justify-between p-2 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800\"\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"relative\">\n                            <Avatar className=\"h-8 w-8\">\n                              <AvatarFallback className=\"bg-gradient-to-br from-blue-500 to-purple-600 text-white text-xs\">\n                                {user.name\n                                  .split(\" \")\n                                  .map((n) => n[0])\n                                  .join(\"\")}\n                              </AvatarFallback>\n                            </Avatar>\n                            <div\n                              className={`absolute -bottom-1 -right-1 w-3 h-3 border-2 border-white dark:border-gray-800 rounded-full ${\n                                user.status === \"speaking\"\n                                  ? \"bg-green-500\"\n                                  : user.status === \"away\"\n                                    ? \"bg-yellow-500\"\n                                    : \"bg-gray-400\"\n                              }`}\n                            ></div>\n                          </div>\n                          <div>\n                            <div className=\"text-sm font-medium\">\n                              {user.name}\n                            </div>\n                            <div className=\"text-xs text-gray-500\">\n                              {user.role}\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          {user.muted && (\n                            <MicOff className=\"h-3 w-3 text-red-500\" />\n                          )}\n                          {user.role === \"Host\" && (\n                            <Crown className=\"h-3 w-3 text-yellow-500\" />\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n\n                {/* Live Chat */}\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm flex items-center gap-2\">\n                      <MessageSquare className=\"h-4 w-4 text-green-500\" />\n                      Live Chat\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"h-32 bg-gray-50 dark:bg-gray-900 rounded-lg p-3 text-sm space-y-2 overflow-y-auto\">\n                      <div className=\"flex gap-2\">\n                        <span className=\"font-medium text-blue-600 text-xs\">\n                          Bob:\n                        </span>\n                        <span className=\"text-xs\">\n                          Can everyone hear me clearly?\n                        </span>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <span className=\"font-medium text-green-600 text-xs\">\n                          Alice:\n                        </span>\n                        <span className=\"text-xs\">\n                          Perfect audio quality! 👍\n                        </span>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <span className=\"font-medium text-purple-600 text-xs\">\n                          Sarah:\n                        </span>\n                        <span className=\"text-xs\">\n                          Let's discuss the VQE optimization now\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Input\n                        placeholder=\"Type a message...\"\n                        className=\"flex-1 text-sm\"\n                        data-testid=\"input-voice-chat-message\"\n                      />\n                      <Button\n                        size=\"icon\"\n                        className=\"h-8 w-8\"\n                        data-testid=\"button-send-voice-message\"\n                      >\n                        <Send className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Meeting Tools */}\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm flex items-center gap-2\">\n                      <Zap className=\"h-4 w-4 text-orange-500\" />\n                      Meeting Tools\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"w-full justify-start\"\n                      data-testid=\"button-share-quantum-circuit\"\n                    >\n                      <Atom className=\"h-4 w-4 mr-2\" />\n                      Share Quantum Circuit\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"w-full justify-start\"\n                      data-testid=\"button-collaborative-whiteboard\"\n                    >\n                      <PenTool className=\"h-4 w-4 mr-2\" />\n                      Open Whiteboard\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"w-full justify-start\"\n                      data-testid=\"button-hardware-scheduler\"\n                    >\n                      <Calendar className=\"h-4 w-4 mr-2\" />\n                      Hardware Scheduler\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"w-full justify-start\"\n                      data-testid=\"button-meeting-notes\"\n                    >\n                      <FileText className=\"h-4 w-4 mr-2\" />\n                      Meeting Notes\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                {/* AI Assistant */}\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm flex items-center gap-2\">\n                      <Brain className=\"h-4 w-4 text-purple-500\" />\n                      AI Meeting Assistant\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-2\">\n                    <div className=\"p-2 bg-purple-50 dark:bg-purple-900/20 rounded text-xs\">\n                      <div className=\"font-medium text-purple-900 dark:text-purple-100\">\n                        Live Transcription\n                      </div>\n                      <div className=\"text-purple-700 dark:text-purple-300 mt-1\">\n                        \"The VQE optimization shows promising results with 8\n                        qubits...\"\n                      </div>\n                    </div>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"w-full justify-start\"\n                      data-testid=\"button-ai-summary\"\n                    >\n                      <Sparkles className=\"h-4 w-4 mr-2\" />\n                      Generate Summary\n                    </Button>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* 3. Enhanced Screen Share Modal */}\n        <Dialog open={showScreenShare} onOpenChange={setShowScreenShare}>\n          <DialogContent className=\"max-w-7xl max-h-[85vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"relative\">\n                    <Monitor className=\"h-6 w-6 text-purple-500\" />\n                    <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full animate-pulse\"></div>\n                  </div>\n                  <div>\n                    <div className=\"text-lg font-semibold\">\n                      Professional Screen Share Studio\n                    </div>\n                    <div className=\"text-sm text-gray-500 font-normal\">\n                      Quantum Circuit Collaboration • HD Quality\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Badge\n                    variant=\"destructive\"\n                    className=\"bg-red-50 text-red-700 border-red-200 animate-pulse\"\n                  >\n                    <div className=\"w-2 h-2 bg-red-500 rounded-full mr-1\"></div>\n                    LIVE • 1080p\n                  </Badge>\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        data-testid=\"button-screen-settings\"\n                      >\n                        <Settings className=\"h-4 w-4\" />\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\">\n                      <DropdownMenuItem>\n                        <Monitor className=\"h-4 w-4 mr-2\" />\n                        Display Settings\n                      </DropdownMenuItem>\n                      <DropdownMenuItem>\n                        <Maximize2 className=\"h-4 w-4 mr-2\" />\n                        Full Screen\n                      </DropdownMenuItem>\n                      <DropdownMenuItem>\n                        <Camera className=\"h-4 w-4 mr-2\" />\n                        Record Session\n                      </DropdownMenuItem>\n                      <DropdownMenuSeparator />\n                      <DropdownMenuItem className=\"text-red-600\">\n                        <StopCircle className=\"h-4 w-4 mr-2\" />\n                        Stop Sharing\n                      </DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </div>\n              </DialogTitle>\n              <DialogDescription>\n                High-definition screen sharing with real-time collaboration,\n                annotations, and quantum circuit visualization\n              </DialogDescription>\n            </DialogHeader>\n\n            <div className=\"flex h-[750px] gap-6\">\n              {/* Main Screen Share Area */}\n              <div className=\"flex-1 flex flex-col\">\n                {/* Screen Share Header */}\n                <div className=\"flex items-center justify-between p-4 bg-gradient-to-r from-purple-50 to-indigo-50 dark:from-purple-950/50 dark:to-indigo-950/50 border border-purple-200 dark:border-purple-800 rounded-lg mb-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <Avatar className=\"h-10 w-10 ring-2 ring-purple-200\">\n                      <AvatarFallback className=\"bg-gradient-to-br from-purple-500 to-indigo-600 text-white font-semibold\">\n                        AC\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <div className=\"font-semibold text-purple-900 dark:text-purple-100\">\n                        Alice Chen is presenting\n                      </div>\n                      <div className=\"text-sm text-purple-700 dark:text-purple-300\">\n                        Quantum Circuit Editor • Application Window\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      data-testid=\"button-request-control\"\n                    >\n                      <MousePointer className=\"h-4 w-4 mr-2\" />\n                      Request Control\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      data-testid=\"button-annotation-mode\"\n                    >\n                      <PenTool className=\"h-4 w-4 mr-2\" />\n                      Annotate\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      data-testid=\"button-presentation-mode\"\n                    >\n                      <Maximize2 className=\"h-4 w-4 mr-2\" />\n                      Full Screen\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Enhanced Shared Screen Content */}\n                <div className=\"flex-1 relative bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900 rounded-xl overflow-hidden border-2 border-purple-200 dark:border-purple-800\">\n                  {/* Screen Content */}\n                  <div className=\"absolute inset-0 p-8\">\n                    {/* Simulated Quantum Circuit Interface */}\n                    <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6 h-full\">\n                      <div className=\"flex items-center justify-between mb-6\">\n                        <div className=\"text-white\">\n                          <h2 className=\"text-2xl font-bold\">\n                            VQE Optimization Circuit\n                          </h2>\n                          <p className=\"text-blue-200\">\n                            8-Qubit Variational Quantum Eigensolver\n                          </p>\n                        </div>\n                        <div className=\"flex gap-4 text-sm\">\n                          <div className=\"bg-blue-500/20 p-3 rounded-lg text-center\">\n                            <div className=\"text-blue-300 font-semibold\">\n                              Depth\n                            </div>\n                            <div className=\"text-white text-xl\">12</div>\n                          </div>\n                          <div className=\"bg-green-500/20 p-3 rounded-lg text-center\">\n                            <div className=\"text-green-300 font-semibold\">\n                              Gates\n                            </div>\n                            <div className=\"text-white text-xl\">156</div>\n                          </div>\n                          <div className=\"bg-purple-500/20 p-3 rounded-lg text-center\">\n                            <div className=\"text-purple-300 font-semibold\">\n                              Fidelity\n                            </div>\n                            <div className=\"text-white text-xl\">92.4%</div>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Circuit Visualization */}\n                      <div className=\"bg-black/20 rounded-lg p-4 mb-4\">\n                        <div className=\"space-y-4\">\n                          {Array.from({ length: 4 }, (_, i) => (\n                            <div key={i} className=\"flex items-center gap-4\">\n                              <div className=\"text-blue-300 text-sm w-8\">\n                                q{i}\n                              </div>\n                              <div className=\"flex-1 h-0.5 bg-blue-400/50 relative\">\n                                <div className=\"absolute left-8 top-1/2 transform -translate-y-1/2 w-6 h-6 border-2 border-yellow-400 bg-yellow-400/20 rounded flex items-center justify-center text-xs text-yellow-300 font-bold\">\n                                  H\n                                </div>\n                                <div className=\"absolute left-20 top-1/2 transform -translate-y-1/2 w-6 h-6 border-2 border-green-400 bg-green-400/20 rounded flex items-center justify-center text-xs text-green-300 font-bold\">\n                                  R\n                                </div>\n                                <div className=\"absolute left-32 top-1/2 transform -translate-y-1/2 w-2 h-2 bg-red-400 rounded-full\"></div>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Live Statistics */}\n                      <div className=\"grid grid-cols-3 gap-4\">\n                        <div className=\"bg-blue-500/20 p-3 rounded\">\n                          <div className=\"text-blue-300 text-sm\">\n                            Expected Value\n                          </div>\n                          <div className=\"text-white font-bold\">-1.236</div>\n                        </div>\n                        <div className=\"bg-green-500/20 p-3 rounded\">\n                          <div className=\"text-green-300 text-sm\">\n                            Convergence\n                          </div>\n                          <div className=\"text-white font-bold\">87.3%</div>\n                        </div>\n                        <div className=\"bg-purple-500/20 p-3 rounded\">\n                          <div className=\"text-purple-300 text-sm\">\n                            Iterations\n                          </div>\n                          <div className=\"text-white font-bold\">156</div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Live Cursors and Annotations */}\n                  <div className=\"absolute top-24 left-40 flex items-center gap-2 pointer-events-none\">\n                    <div className=\"relative\">\n                      <MousePointer className=\"h-5 w-5 text-red-400 transform rotate-12\" />\n                      <div className=\"absolute top-5 left-2 bg-red-500 text-white text-xs px-2 py-1 rounded shadow-lg\">\n                        Bob Wilson\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"absolute top-32 right-32 flex items-center gap-2 pointer-events-none\">\n                    <div className=\"relative\">\n                      <MousePointer className=\"h-5 w-5 text-blue-400 transform -rotate-12\" />\n                      <div className=\"absolute top-5 left-2 bg-blue-500 text-white text-xs px-2 py-1 rounded shadow-lg\">\n                        Dr. Sarah Kim\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Annotation Layer */}\n                  <div className=\"absolute top-48 left-48 pointer-events-none\">\n                    <div className=\"bg-yellow-400/80 text-black text-sm px-2 py-1 rounded-lg font-medium\">\n                      💡 Try increasing this parameter\n                    </div>\n                  </div>\n                </div>\n\n                {/* Enhanced Control Bar */}\n                <div className=\"p-4 bg-white dark:bg-gray-800 border-t mt-4 rounded-lg\">\n                  <div className=\"flex items-center justify-between\">\n                    {/* Annotation Tools */}\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                        Annotation Tools:\n                      </div>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        data-testid=\"button-pen-annotation\"\n                      >\n                        <PenTool className=\"h-4 w-4 mr-1\" />\n                        Draw\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        data-testid=\"button-text-annotation\"\n                      >\n                        <Type className=\"h-4 w-4 mr-1\" />\n                        Text\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        data-testid=\"button-arrow-annotation\"\n                      >\n                        <Mouse className=\"h-4 w-4 mr-1\" />\n                        Arrow\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        data-testid=\"button-highlight-annotation\"\n                      >\n                        <Highlighter className=\"h-4 w-4 mr-1\" />\n                        Highlight\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        data-testid=\"button-clear-annotations\"\n                      >\n                        <Eraser className=\"h-4 w-4 mr-1\" />\n                        Clear\n                      </Button>\n                    </div>\n\n                    {/* Quality and Recording */}\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"flex items-center gap-2 text-sm\">\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                        <span className=\"text-gray-600 dark:text-gray-400\">\n                          1080p • 60fps\n                        </span>\n                      </div>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        data-testid=\"button-record-screen\"\n                      >\n                        <Camera className=\"h-4 w-4 mr-1\" />\n                        Record\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        data-testid=\"button-screenshot\"\n                      >\n                        <Download className=\"h-4 w-4 mr-1\" />\n                        Screenshot\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Enhanced Sidebar */}\n              <div className=\"w-80 space-y-4\">\n                {/* Active Viewers */}\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm flex items-center gap-2\">\n                      <Eye className=\"h-4 w-4 text-blue-500\" />\n                      Active Viewers (4)\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    {[\n                      {\n                        name: \"Bob Wilson\",\n                        status: \"controlling\",\n                        role: \"Researcher\",\n                      },\n                      {\n                        name: \"Dr. Sarah Kim\",\n                        status: \"annotating\",\n                        role: \"Mentor\",\n                      },\n                      { name: \"John Doe\", status: \"viewing\", role: \"Student\" },\n                      {\n                        name: \"Emma Davis\",\n                        status: \"viewing\",\n                        role: \"Researcher\",\n                      },\n                    ].map((user, idx) => (\n                      <div\n                        key={idx}\n                        className=\"flex items-center justify-between p-2 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800\"\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"relative\">\n                            <Avatar className=\"h-8 w-8\">\n                              <AvatarFallback className=\"bg-gradient-to-br from-purple-500 to-blue-600 text-white text-xs\">\n                                {user.name\n                                  .split(\" \")\n                                  .map((n) => n[0])\n                                  .join(\"\")}\n                              </AvatarFallback>\n                            </Avatar>\n                            <div\n                              className={`absolute -bottom-1 -right-1 w-3 h-3 border-2 border-white dark:border-gray-800 rounded-full ${\n                                user.status === \"controlling\"\n                                  ? \"bg-red-500\"\n                                  : user.status === \"annotating\"\n                                    ? \"bg-yellow-500\"\n                                    : \"bg-green-500\"\n                              }`}\n                            ></div>\n                          </div>\n                          <div>\n                            <div className=\"text-sm font-medium\">\n                              {user.name}\n                            </div>\n                            <div className=\"text-xs text-gray-500 capitalize\">\n                              {user.status}\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          {user.status === \"controlling\" && (\n                            <MousePointer className=\"h-3 w-3 text-red-500\" />\n                          )}\n                          {user.status === \"annotating\" && (\n                            <PenTool className=\"h-3 w-3 text-yellow-500\" />\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n\n                {/* Live Comments & Reactions */}\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm flex items-center gap-2\">\n                      <MessageSquare className=\"h-4 w-4 text-green-500\" />\n                      Live Comments\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"h-40 bg-gray-50 dark:bg-gray-900 rounded-lg p-3 space-y-3 overflow-y-auto\">\n                      <div className=\"flex gap-2\">\n                        <div className=\"w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center text-white text-xs font-bold\">\n                          B\n                        </div>\n                        <div className=\"flex-1\">\n                          <div className=\"text-xs text-gray-500\">\n                            Bob Wilson • 2m ago\n                          </div>\n                          <div className=\"text-sm\">\n                            Can we adjust the rotation angle on qubit 3? The\n                            current value seems suboptimal.\n                          </div>\n                          <div className=\"flex items-center gap-1 mt-1\">\n                            <span className=\"text-xs\">👍 2</span>\n                            <span className=\"text-xs\">💡 1</span>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <div className=\"w-6 h-6 bg-green-500 rounded-full flex items-center justify-center text-white text-xs font-bold\">\n                          S\n                        </div>\n                        <div className=\"flex-1\">\n                          <div className=\"text-xs text-gray-500\">\n                            Dr. Sarah Kim • 1m ago\n                          </div>\n                          <div className=\"text-sm\">\n                            Excellent optimization! The convergence rate\n                            improved significantly.\n                          </div>\n                          <div className=\"flex items-center gap-1 mt-1\">\n                            <span className=\"text-xs\">🎉 3</span>\n                            <span className=\"text-xs\">⚛️ 2</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Input\n                        placeholder=\"Add a comment...\"\n                        className=\"flex-1 text-sm\"\n                        data-testid=\"input-screen-comment\"\n                      />\n                      <Button\n                        size=\"icon\"\n                        className=\"h-8 w-8\"\n                        data-testid=\"button-send-screen-comment\"\n                      >\n                        <Send className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-xs text-gray-500\">\n                        Quick reactions:\n                      </span>\n                      <div className=\"flex gap-1\">\n                        {[\"👍\", \"💡\", \"⚛️\", \"🎉\", \"❓\"].map((emoji, idx) => (\n                          <Button\n                            key={idx}\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            className=\"h-6 w-6 text-sm\"\n                            data-testid={`button-reaction-${idx}`}\n                          >\n                            {emoji}\n                          </Button>\n                        ))}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Screen Share Controls */}\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm flex items-center gap-2\">\n                      <Settings className=\"h-4 w-4 text-orange-500\" />\n                      Screen Controls\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"w-full justify-start\"\n                      data-testid=\"button-switch-window\"\n                    >\n                      <Monitor className=\"h-4 w-4 mr-2\" />\n                      Switch Window\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"w-full justify-start\"\n                      data-testid=\"button-share-application\"\n                    >\n                      <ExternalLink className=\"h-4 w-4 mr-2\" />\n                      Share Application\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"w-full justify-start\"\n                      data-testid=\"button-share-desktop\"\n                    >\n                      <Monitor className=\"h-4 w-4 mr-2\" />\n                      Share Desktop\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"w-full justify-start\"\n                      data-testid=\"button-pause-sharing\"\n                    >\n                      <PauseCircle className=\"h-4 w-4 mr-2\" />\n                      Pause Sharing\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                {/* Session Recording */}\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm flex items-center gap-2\">\n                      <Camera className=\"h-4 w-4 text-red-500\" />\n                      Session Recording\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"p-3 bg-red-50 dark:bg-red-900/20 rounded-lg border border-red-200 dark:border-red-800\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\"></div>\n                        <span className=\"text-sm font-medium text-red-700 dark:text-red-300\">\n                          Recording Active\n                        </span>\n                      </div>\n                      <div className=\"text-xs text-red-600 dark:text-red-400\">\n                        Duration: 15:32\n                      </div>\n                      <div className=\"text-xs text-red-600 dark:text-red-400\">\n                        Size: 45.8 MB\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        className=\"flex-1\"\n                        data-testid=\"button-pause-recording\"\n                      >\n                        <PauseCircle className=\"h-4 w-4 mr-1\" />\n                        Pause\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"destructive\"\n                        className=\"flex-1\"\n                        data-testid=\"button-stop-recording\"\n                      >\n                        <StopCircle className=\"h-4 w-4 mr-1\" />\n                        Stop\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* 4. Enhanced Quantum Whiteboard Modal */}\n        <Dialog open={showWhiteboard} onOpenChange={setShowWhiteboard}>\n          <DialogContent className=\"max-w-7xl max-h-[85vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"relative\">\n                    <Palette className=\"h-6 w-6 text-indigo-500\" />\n                    <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-indigo-500 rounded-full animate-pulse\"></div>\n                  </div>\n                  <div>\n                    <div className=\"text-lg font-semibold\">\n                      Quantum Collaborative Whiteboard Studio\n                    </div>\n                    <div className=\"text-sm text-gray-500 font-normal\">\n                      Interactive quantum circuit design and brainstorming\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Badge\n                    variant=\"outline\"\n                    className=\"bg-indigo-50 text-indigo-700 border-indigo-200\"\n                  >\n                    <div className=\"w-2 h-2 bg-indigo-500 rounded-full mr-1 animate-pulse\"></div>\n                    4 active\n                  </Badge>\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        data-testid=\"button-whiteboard-settings\"\n                      >\n                        <Settings className=\"h-4 w-4\" />\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\">\n                      <DropdownMenuItem>\n                        <Layers className=\"h-4 w-4 mr-2\" />\n                        Manage Layers\n                      </DropdownMenuItem>\n                      <DropdownMenuItem>\n                        <Download className=\"h-4 w-4 mr-2\" />\n                        Export as Image\n                      </DropdownMenuItem>\n                      <DropdownMenuItem>\n                        <Upload className=\"h-4 w-4 mr-2\" />\n                        Import Template\n                      </DropdownMenuItem>\n                      <DropdownMenuSeparator />\n                      <DropdownMenuItem>\n                        <Settings2 className=\"h-4 w-4 mr-2\" />\n                        Canvas Settings\n                      </DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </div>\n              </DialogTitle>\n              <DialogDescription>\n                Professional-grade collaborative whiteboard with quantum circuit\n                templates, real-time sync, and advanced drawing tools\n              </DialogDescription>\n            </DialogHeader>\n\n            <div className=\"flex h-[750px] gap-6\">\n              {/* Main Whiteboard Area */}\n              <div className=\"flex-1 flex flex-col\">\n                {/* Enhanced Tool Bar */}\n                <div className=\"p-4 bg-gradient-to-r from-indigo-50 to-purple-50 dark:from-indigo-950/50 dark:to-purple-950/50 border border-indigo-200 dark:border-indigo-800 rounded-lg mb-4\">\n                  <div className=\"flex items-center justify-between\">\n                    {/* Drawing Tools */}\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"flex items-center gap-2 border-r pr-3\">\n                        <span className=\"text-sm font-medium text-indigo-900 dark:text-indigo-100\">\n                          Drawing:\n                        </span>\n                        <Button\n                          size=\"sm\"\n                          variant={\n                            whiteboardTool === \"pen\" ? \"default\" : \"outline\"\n                          }\n                          onClick={() => setWhiteboardTool(\"pen\")}\n                          data-testid=\"button-pen-tool\"\n                        >\n                          <PenTool className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant={\n                            whiteboardTool === \"brush\" ? \"default\" : \"outline\"\n                          }\n                          onClick={() => setWhiteboardTool(\"brush\")}\n                          data-testid=\"button-brush-tool\"\n                        >\n                          <Paintbrush className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant={\n                            whiteboardTool === \"eraser\" ? \"default\" : \"outline\"\n                          }\n                          onClick={() => setWhiteboardTool(\"eraser\")}\n                          data-testid=\"button-eraser-tool\"\n                        >\n                          <Eraser className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n\n                      <div className=\"flex items-center gap-2 border-r pr-3\">\n                        <span className=\"text-sm font-medium text-indigo-900 dark:text-indigo-100\">\n                          Shapes:\n                        </span>\n                        <Button\n                          size=\"sm\"\n                          variant={\n                            whiteboardTool === \"circle\" ? \"default\" : \"outline\"\n                          }\n                          onClick={() => setWhiteboardTool(\"circle\")}\n                          data-testid=\"button-circle-tool\"\n                        >\n                          <Circle className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant={\n                            whiteboardTool === \"square\" ? \"default\" : \"outline\"\n                          }\n                          onClick={() => setWhiteboardTool(\"square\")}\n                          data-testid=\"button-square-tool\"\n                        >\n                          <Square className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant={\n                            whiteboardTool === \"arrow\" ? \"default\" : \"outline\"\n                          }\n                          onClick={() => setWhiteboardTool(\"arrow\")}\n                          data-testid=\"button-arrow-tool\"\n                        >\n                          <ArrowUpRight className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant={\n                            whiteboardTool === \"line\" ? \"default\" : \"outline\"\n                          }\n                          onClick={() => setWhiteboardTool(\"line\")}\n                          data-testid=\"button-line-tool\"\n                        >\n                          <Minus className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-sm font-medium text-indigo-900 dark:text-indigo-100\">\n                          Text:\n                        </span>\n                        <Button\n                          size=\"sm\"\n                          variant={\n                            whiteboardTool === \"text\" ? \"default\" : \"outline\"\n                          }\n                          onClick={() => setWhiteboardTool(\"text\")}\n                          data-testid=\"button-text-tool\"\n                        >\n                          <Type className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant={\n                            whiteboardTool === \"sticky\" ? \"default\" : \"outline\"\n                          }\n                          onClick={() => setWhiteboardTool(\"sticky\")}\n                          data-testid=\"button-sticky-tool\"\n                        >\n                          <StickyNote className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n\n                    {/* Action Tools */}\n                    <div className=\"flex items-center gap-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        data-testid=\"button-undo\"\n                      >\n                        <Undo className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        data-testid=\"button-redo\"\n                      >\n                        <Redo className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        data-testid=\"button-zoom-in\"\n                      >\n                        <ZoomIn className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        data-testid=\"button-zoom-out\"\n                      >\n                        <ZoomOut className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        data-testid=\"button-fit-screen\"\n                      >\n                        <Maximize className=\"h-4 w-4\" />\n                      </Button>\n                      <Button size=\"sm\" data-testid=\"button-save-whiteboard\">\n                        <Save className=\"h-4 w-4 mr-1\" />\n                        Save\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Color and Style Controls */}\n                  <div className=\"flex items-center justify-between mt-3 pt-3 border-t border-indigo-200 dark:border-indigo-700\">\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-xs font-medium text-indigo-800 dark:text-indigo-200\">\n                          Color:\n                        </span>\n                        <div className=\"flex gap-1\">\n                          {[\n                            \"#000000\",\n                            \"#FF0000\",\n                            \"#00FF00\",\n                            \"#0000FF\",\n                            \"#FFFF00\",\n                            \"#FF00FF\",\n                            \"#00FFFF\",\n                          ].map((color, idx) => (\n                            <div\n                              key={idx}\n                              className=\"w-6 h-6 rounded border-2 border-white shadow cursor-pointer hover:scale-110 transition-transform\"\n                              style={{ backgroundColor: color }}\n                              data-testid={`color-${idx}`}\n                            />\n                          ))}\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-xs font-medium text-indigo-800 dark:text-indigo-200\">\n                          Stroke:\n                        </span>\n                        <div className=\"flex gap-1\">\n                          {[1, 2, 4, 8].map((width, idx) => (\n                            <div\n                              key={idx}\n                              className=\"w-8 h-6 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded flex items-center justify-center cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700\"\n                              data-testid={`stroke-${width}`}\n                            >\n                              <div\n                                className=\"bg-black dark:bg-white rounded\"\n                                style={{ width: \"80%\", height: `${width}px` }}\n                              />\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-xs text-indigo-700 dark:text-indigo-300\">\n                      <span>Grid: ON</span>\n                      <span>•</span>\n                      <span>Snap: ON</span>\n                      <span>•</span>\n                      <span>Zoom: 100%</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Enhanced Whiteboard Canvas */}\n                <div className=\"flex-1 relative bg-gradient-to-br from-white via-gray-50 to-indigo-50 dark:from-gray-900 dark:via-gray-800 dark:to-indigo-950 border-2 border-indigo-200 dark:border-indigo-800 rounded-xl overflow-hidden\">\n                  {/* Grid Background */}\n                  <div\n                    className=\"absolute inset-0 opacity-20\"\n                    style={{\n                      backgroundImage: `\n                        linear-gradient(to right, #e5e7eb 1px, transparent 1px),\n                        linear-gradient(to bottom, #e5e7eb 1px, transparent 1px)\n                      `,\n                      backgroundSize: \"20px 20px\",\n                    }}\n                  ></div>\n\n                  {/* Canvas Content */}\n                  <div className=\"absolute inset-0 p-8\">\n                    {/* Quantum Circuit Example */}\n                    <div className=\"absolute top-12 left-12\">\n                      <div className=\"text-indigo-900 dark:text-indigo-100 font-semibold text-lg mb-4\">\n                        Quantum Bell State Circuit\n                      </div>\n                      <div className=\"space-y-6\">\n                        {/* Qubit 0 */}\n                        <div className=\"flex items-center gap-6\">\n                          <div className=\"w-8 h-8 bg-indigo-500 text-white rounded-full flex items-center justify-center text-sm font-bold\">\n                            0\n                          </div>\n                          <div className=\"h-0.5 bg-indigo-400 w-24\"></div>\n                          <div className=\"w-12 h-12 border-3 border-yellow-500 bg-yellow-100 dark:bg-yellow-900 rounded-lg flex items-center justify-center text-lg font-bold text-yellow-800 dark:text-yellow-200\">\n                            H\n                          </div>\n                          <div className=\"h-0.5 bg-indigo-400 w-24\"></div>\n                          <div className=\"w-4 h-4 bg-indigo-600 rounded-full\"></div>\n                          <div className=\"h-0.5 bg-indigo-400 w-24\"></div>\n                        </div>\n\n                        {/* Connection Line */}\n                        <div className=\"ml-52 w-0.5 h-6 bg-indigo-400\"></div>\n\n                        {/* Qubit 1 */}\n                        <div className=\"flex items-center gap-6\">\n                          <div className=\"w-8 h-8 bg-indigo-500 text-white rounded-full flex items-center justify-center text-sm font-bold\">\n                            1\n                          </div>\n                          <div className=\"h-0.5 bg-indigo-400 w-24\"></div>\n                          <div className=\"w-12 h-12 bg-transparent\"></div>\n                          <div className=\"h-0.5 bg-indigo-400 w-24\"></div>\n                          <div className=\"w-12 h-12 border-3 border-green-500 bg-green-100 dark:bg-green-900 rounded-lg flex items-center justify-center\">\n                            <div className=\"w-6 h-6 border-2 border-green-600 dark:border-green-400 rounded-full bg-white dark:bg-gray-800\"></div>\n                          </div>\n                          <div className=\"h-0.5 bg-indigo-400 w-24\"></div>\n                        </div>\n                      </div>\n\n                      {/* Formula */}\n                      <div className=\"mt-6 p-4 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-lg border border-indigo-200 dark:border-indigo-700\">\n                        <div className=\"text-indigo-900 dark:text-indigo-100 font-mono text-lg\">\n                          |ψ⟩ = (|00⟩ + |11⟩) / √2\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Brainstorming Section */}\n                    <div className=\"absolute top-12 right-12\">\n                      <div className=\"space-y-4\">\n                        <div className=\"bg-yellow-200 dark:bg-yellow-800 p-3 rounded-lg shadow-lg w-48\">\n                          <div className=\"font-semibold text-yellow-900 dark:text-yellow-100\">\n                            Optimization Ideas\n                          </div>\n                          <div className=\"text-sm text-yellow-800 dark:text-yellow-200 mt-1\">\n                            • Reduce gate depth • Use hardware-native gates •\n                            Apply error mitigation\n                          </div>\n                        </div>\n                        <div className=\"bg-blue-200 dark:bg-blue-800 p-3 rounded-lg shadow-lg w-48\">\n                          <div className=\"font-semibold text-blue-900 dark:text-blue-100\">\n                            Next Steps\n                          </div>\n                          <div className=\"text-sm text-blue-800 dark:text-blue-200 mt-1\">\n                            1. Test on simulator 2. Hardware reservation 3.\n                            Compare results\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Live Collaboration Cursors */}\n                    <div className=\"absolute top-80 left-60 pointer-events-none\">\n                      <div className=\"relative\">\n                        <MousePointer className=\"h-5 w-5 text-red-500 transform rotate-12\" />\n                        <div className=\"absolute top-5 left-2 bg-red-500 text-white text-xs px-2 py-1 rounded shadow-lg animate-pulse\">\n                          Bob Wilson • Drawing\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"absolute top-96 right-80 pointer-events-none\">\n                      <div className=\"relative\">\n                        <MousePointer className=\"h-5 w-5 text-green-500 transform -rotate-12\" />\n                        <div className=\"absolute top-5 left-2 bg-green-500 text-white text-xs px-2 py-1 rounded shadow-lg animate-pulse\">\n                          Dr. Sarah Kim • Adding text\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Drawing in Progress Indicator */}\n                    <div className=\"absolute bottom-8 left-8\">\n                      <div className=\"flex items-center gap-2 bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm p-3 rounded-lg border border-indigo-200 dark:border-indigo-700 shadow-lg\">\n                        <div className=\"w-3 h-3 bg-indigo-500 rounded-full animate-pulse\"></div>\n                        <span className=\"text-sm font-medium text-indigo-900 dark:text-indigo-100\">\n                          Alice Chen is drawing a circuit diagram...\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Enhanced Status Bar */}\n                <div className=\"p-4 bg-white dark:bg-gray-800 border-t border-indigo-200 dark:border-indigo-700 rounded-lg mt-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-6 text-sm\">\n                      <div className=\"flex items-center gap-2\">\n                        <Users className=\"h-4 w-4 text-green-500\" />\n                        <span className=\"font-medium\">\n                          4 collaborators active\n                        </span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Activity className=\"h-4 w-4 text-blue-500\" />\n                        <span>Auto-save every 30s</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Clock className=\"h-4 w-4 text-purple-500\" />\n                        <span>Last saved: 2 minutes ago</span>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      {[\n                        {\n                          name: \"Alice\",\n                          color: \"from-blue-500 to-indigo-600\",\n                          active: true,\n                        },\n                        {\n                          name: \"Bob\",\n                          color: \"from-red-500 to-pink-600\",\n                          active: true,\n                        },\n                        {\n                          name: \"Sarah\",\n                          color: \"from-green-500 to-emerald-600\",\n                          active: true,\n                        },\n                        {\n                          name: \"John\",\n                          color: \"from-purple-500 to-violet-600\",\n                          active: false,\n                        },\n                      ].map((user, idx) => (\n                        <div key={idx} className=\"relative group\">\n                          <div\n                            className={`w-8 h-8 rounded-full bg-gradient-to-br ${user.color} flex items-center justify-center text-white text-xs font-bold ${user.active ? \"ring-2 ring-white shadow-lg\" : \"opacity-50\"}`}\n                          >\n                            {user.name[0]}\n                          </div>\n                          {user.active && (\n                            <div className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-green-500 border-2 border-white rounded-full\"></div>\n                          )}\n                          <div className=\"absolute bottom-10 left-1/2 transform -translate-x-1/2 bg-black text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity\">\n                            {user.name}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Enhanced Sidebar */}\n              <div className=\"w-80 space-y-4\">\n                {/* Quantum Templates */}\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm flex items-center gap-2\">\n                      <Atom className=\"h-4 w-4 text-blue-500\" />\n                      Quantum Circuit Templates\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-2\">\n                    {[\n                      { name: \"Bell State\", gates: \"H, CNOT\", qubits: 2 },\n                      { name: \"GHZ State\", gates: \"H, CNOT×2\", qubits: 3 },\n                      {\n                        name: \"Quantum Fourier\",\n                        gates: \"H, R, SWAP\",\n                        qubits: 4,\n                      },\n                      { name: \"VQE Ansatz\", gates: \"RY, RZ, CNOT\", qubits: 8 },\n                    ].map((template, idx) => (\n                      <div\n                        key={idx}\n                        className=\"p-3 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 cursor-pointer group\"\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <div className=\"font-medium text-sm\">\n                              {template.name}\n                            </div>\n                            <div className=\"text-xs text-gray-500\">\n                              {template.gates} • {template.qubits} qubits\n                            </div>\n                          </div>\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            className=\"h-6 w-6 opacity-0 group-hover:opacity-100\"\n                            data-testid={`template-${idx}`}\n                          >\n                            <Plus className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n\n                {/* Layer Management */}\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm flex items-center gap-2\">\n                      <Layers className=\"h-4 w-4 text-green-500\" />\n                      Layer Management\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-2\">\n                    {[\n                      { name: \"Circuit Diagram\", visible: true, locked: false },\n                      { name: \"Annotations\", visible: true, locked: false },\n                      { name: \"Background\", visible: true, locked: true },\n                    ].map((layer, idx) => (\n                      <div\n                        key={idx}\n                        className=\"flex items-center justify-between p-2 rounded hover:bg-gray-50 dark:hover:bg-gray-800\"\n                      >\n                        <div className=\"flex items-center gap-2\">\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            className=\"h-4 w-4\"\n                            data-testid={`layer-visibility-${idx}`}\n                          >\n                            {layer.visible ? (\n                              <Eye className=\"h-3 w-3\" />\n                            ) : (\n                              <EyeOff className=\"h-3 w-3\" />\n                            )}\n                          </Button>\n                          <span className=\"text-sm\">{layer.name}</span>\n                        </div>\n                        <Button\n                          size=\"icon\"\n                          variant=\"ghost\"\n                          className=\"h-4 w-4\"\n                          data-testid={`layer-lock-${idx}`}\n                        >\n                          {layer.locked ? (\n                            <Lock className=\"h-3 w-3\" />\n                          ) : (\n                            <Unlock className=\"h-3 w-3\" />\n                          )}\n                        </Button>\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n\n                {/* Live Activity Feed */}\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm flex items-center gap-2\">\n                      <Activity className=\"h-4 w-4 text-orange-500\" />\n                      Live Activity\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-2\">\n                    <div className=\"h-32 space-y-2 overflow-y-auto text-xs\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-4 h-4 bg-blue-500 rounded-full flex items-center justify-center text-white text-xs\">\n                          A\n                        </div>\n                        <span className=\"text-gray-600 dark:text-gray-400\">\n                          Alice added H gate • 30s ago\n                        </span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-4 h-4 bg-red-500 rounded-full flex items-center justify-center text-white text-xs\">\n                          B\n                        </div>\n                        <span className=\"text-gray-600 dark:text-gray-400\">\n                          Bob drew connection line • 1m ago\n                        </span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-4 h-4 bg-green-500 rounded-full flex items-center justify-center text-white text-xs\">\n                          S\n                        </div>\n                        <span className=\"text-gray-600 dark:text-gray-400\">\n                          Sarah added formula • 2m ago\n                        </span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Export Options */}\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm flex items-center gap-2\">\n                      <Download className=\"h-4 w-4 text-purple-500\" />\n                      Export & Share\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"w-full justify-start\"\n                      data-testid=\"button-export-png\"\n                    >\n                      <Camera className=\"h-4 w-4 mr-2\" />\n                      Export as PNG\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"w-full justify-start\"\n                      data-testid=\"button-export-svg\"\n                    >\n                      <FileText className=\"h-4 w-4 mr-2\" />\n                      Export as SVG\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"w-full justify-start\"\n                      data-testid=\"button-export-qasm\"\n                    >\n                      <Code2 className=\"h-4 w-4 mr-2\" />\n                      Export QASM\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"w-full justify-start\"\n                      data-testid=\"button-share-link\"\n                    >\n                      <Share2 className=\"h-4 w-4 mr-2\" />\n                      Share Link\n                    </Button>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* 5. Smart Suggestions Modal */}\n        <Dialog\n          open={showSmartSuggestions}\n          onOpenChange={setShowSmartSuggestions}\n        >\n          <DialogContent className=\"max-w-6xl max-h-[85vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <Lightbulb className=\"h-5 w-5 text-yellow-500\" />\n                AI Smart Suggestions\n              </DialogTitle>\n              <DialogDescription>\n                Intelligent recommendations to optimize your quantum research\n                and collaboration\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4 max-h-[600px] overflow-y-auto\">\n              {/* Team Optimization Suggestions */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2 text-base\">\n                    <Users className=\"h-4 w-4 text-blue-500\" />\n                    Team Collaboration Optimization\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex items-start gap-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                    <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-sm\">\n                      1\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium\">\n                        Schedule team synchronization\n                      </h4>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                        Alice and Bob have overlapping availability for 3 hours\n                        today. Consider scheduling a joint research session on\n                        VQE optimization.\n                      </p>\n                      <div className=\"flex gap-2 mt-2\">\n                        <Button\n                          size=\"sm\"\n                          data-testid=\"button-apply-suggestion-1\"\n                        >\n                          Apply\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          data-testid=\"button-dismiss-suggestion-1\"\n                        >\n                          Dismiss\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start gap-3 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                    <div className=\"w-8 h-8 bg-green-500 rounded-full flex items-center justify-center text-white text-sm\">\n                      2\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium\">\n                        Knowledge sharing opportunity\n                      </h4>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                        Dr. Sarah Kim has expertise in quantum error correction\n                        that could benefit the current project. Suggest adding\n                        her to the research chat.\n                      </p>\n                      <div className=\"flex gap-2 mt-2\">\n                        <Button size=\"sm\" data-testid=\"button-invite-expert\">\n                          Invite Sarah\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          data-testid=\"button-learn-more\"\n                        >\n                          Learn More\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Algorithm Optimization */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2 text-base\">\n                    <BrainCircuit className=\"h-4 w-4 text-purple-500\" />\n                    Algorithm Optimization\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex items-start gap-3 p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg\">\n                    <div className=\"w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center text-white text-sm\">\n                      !\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium\">\n                        Circuit depth reduction available\n                      </h4>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                        Your current VQE circuit can be optimized to reduce\n                        depth by 23% while maintaining fidelity above 90%. This\n                        would improve noise resilience.\n                      </p>\n                      <div className=\"flex gap-2 mt-2\">\n                        <Button size=\"sm\" data-testid=\"button-optimize-circuit\">\n                          Auto-Optimize\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          data-testid=\"button-show-comparison\"\n                        >\n                          Show Comparison\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start gap-3 p-3 bg-orange-50 dark:bg-orange-900/20 rounded-lg\">\n                    <div className=\"w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center text-white text-sm\">\n                      ⚡\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium\">\n                        Hardware-optimized parameters\n                      </h4>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                        Based on ibm_cairo's calibration data, adjusting\n                        rotation angles by 12° would improve gate fidelity for\n                        your specific circuit.\n                      </p>\n                      <div className=\"flex gap-2 mt-2\">\n                        <Button\n                          size=\"sm\"\n                          data-testid=\"button-apply-calibration\"\n                        >\n                          Apply Parameters\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          data-testid=\"button-schedule-test\"\n                        >\n                          Schedule Test\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Resource Optimization */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2 text-base\">\n                    <Cpu className=\"h-4 w-4 text-red-500\" />\n                    Resource & Hardware Optimization\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex items-start gap-3 p-3 bg-red-50 dark:bg-red-900/20 rounded-lg\">\n                    <div className=\"w-8 h-8 bg-red-500 rounded-full flex items-center justify-center text-white text-sm\">\n                      $\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium\">\n                        Cost-efficient hardware scheduling\n                      </h4>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                        Running your experiment at 2 AM UTC (off-peak hours)\n                        would reduce costs by 40% and provide better queue\n                        priority.\n                      </p>\n                      <div className=\"flex gap-2 mt-2\">\n                        <Button size=\"sm\" data-testid=\"button-schedule-optimal\">\n                          Schedule Optimal Time\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          data-testid=\"button-view-pricing\"\n                        >\n                          View Pricing\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* AI Actions */}\n              <div className=\"flex justify-between items-center pt-4 border-t\">\n                <div className=\"text-sm text-gray-600\">\n                  <span className=\"flex items-center gap-1\">\n                    <Activity className=\"h-4 w-4\" />\n                    AI continuously analyzes your workflow for optimization\n                    opportunities\n                  </span>\n                </div>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  data-testid=\"button-configure-ai\"\n                >\n                  <Settings className=\"h-4 w-4 mr-1\" />\n                  Configure AI\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* 6. Team Analytics Modal */}\n        <Dialog open={showTeamAnalytics} onOpenChange={setShowTeamAnalytics}>\n          <DialogContent className=\"max-w-6xl max-h-[85vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <BarChart3 className=\"h-5 w-5 text-green-500\" />\n                Team Analytics Dashboard\n              </DialogTitle>\n              <DialogDescription>\n                Comprehensive analytics and insights about your team's quantum\n                research collaboration\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-6 max-h-[700px] overflow-y-auto\">\n              {/* Key Metrics */}\n              <div className=\"grid grid-cols-4 gap-4\">\n                <Card>\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-blue-500\">47</div>\n                    <div className=\"text-sm text-gray-600\">Active Projects</div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-green-500\">92%</div>\n                    <div className=\"text-sm text-gray-600\">Success Rate</div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-purple-500\">\n                      156h\n                    </div>\n                    <div className=\"text-sm text-gray-600\">Total Runtime</div>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-orange-500\">23</div>\n                    <div className=\"text-sm text-gray-600\">Team Members</div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Team Performance Chart */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <TrendingUp className=\"h-4 w-4\" />\n                    Team Performance Trends\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-48 bg-gradient-to-r from-blue-50 to-green-50 dark:from-blue-900/20 dark:to-green-900/20 rounded-lg flex items-center justify-center\">\n                    <div className=\"text-center\">\n                      <BarChart3 className=\"h-12 w-12 text-blue-500 mx-auto mb-2\" />\n                      <p className=\"text-sm text-gray-600\">\n                        Interactive performance charts\n                      </p>\n                      <p className=\"text-xs text-gray-500\">\n                        7-day trending data\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Team Member Contributions */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Users className=\"h-4 w-4\" />\n                    Member Contributions\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {[\n                      \"Alice Chen\",\n                      \"Bob Wilson\",\n                      \"Dr. Sarah Kim\",\n                      \"John Doe\",\n                      \"Emma Davis\",\n                    ].map((member, idx) => (\n                      <div\n                        key={idx}\n                        className=\"flex items-center justify-between\"\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <Avatar className=\"h-8 w-8\">\n                            <AvatarFallback className=\"bg-gradient-to-br from-blue-500 to-purple-500 text-white text-sm\">\n                              {member\n                                .split(\" \")\n                                .map((n) => n[0])\n                                .join(\"\")}\n                            </AvatarFallback>\n                          </Avatar>\n                          <span className=\"font-medium\">{member}</span>\n                        </div>\n                        <div className=\"flex items-center gap-4 text-sm\">\n                          <div className=\"text-center\">\n                            <div className=\"font-semibold text-blue-500\">\n                              {12 + idx * 5}\n                            </div>\n                            <div className=\"text-gray-500\">Commits</div>\n                          </div>\n                          <div className=\"text-center\">\n                            <div className=\"font-semibold text-green-500\">\n                              {3 + idx * 2}\n                            </div>\n                            <div className=\"text-gray-500\">Projects</div>\n                          </div>\n                          <div className=\"text-center\">\n                            <div className=\"font-semibold text-purple-500\">\n                              {85 + idx * 3}%\n                            </div>\n                            <div className=\"text-gray-500\">Quality</div>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* 7. AI Code Review Modal */}\n        <Dialog open={showAICodeReview} onOpenChange={setShowAICodeReview}>\n          <DialogContent className=\"max-w-6xl max-h-[85vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <Radar className=\"h-5 w-5 text-indigo-500\" />\n                AI Code Review Assistant\n              </DialogTitle>\n              <DialogDescription>\n                Intelligent quantum code analysis and improvement suggestions\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4 max-h-[700px] overflow-y-auto\">\n              {/* Code Review Results */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between text-base\">\n                    <span className=\"flex items-center gap-2\">\n                      <Code2 className=\"h-4 w-4\" />\n                      Latest Code Review: VQE_optimization.py\n                    </span>\n                    <Badge variant=\"default\" className=\"bg-green-500\">\n                      Approved\n                    </Badge>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {/* Code Quality Score */}\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium\">\n                      Overall Code Quality\n                    </span>\n                    <div className=\"flex items-center gap-2\">\n                      <Progress value={87} className=\"w-32\" />\n                      <span className=\"text-sm font-semibold text-green-600\">\n                        87/100\n                      </span>\n                    </div>\n                  </div>\n\n                  {/* Review Items */}\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-start gap-3 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                      <CheckCircle2 className=\"h-5 w-5 text-green-500 mt-0.5\" />\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-green-700 dark:text-green-300\">\n                          Excellent quantum circuit structure\n                        </h4>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                          Your VQE ansatz implementation follows quantum\n                          computing best practices with proper gate sequencing\n                          and parameterization.\n                        </p>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-start gap-3 p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg\">\n                      <AlertTriangle className=\"h-5 w-5 text-yellow-500 mt-0.5\" />\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-yellow-700 dark:text-yellow-300\">\n                          Minor optimization opportunity\n                        </h4>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                          Line 45: Consider using hardware-efficient gate\n                          decomposition for better NISQ performance.\n                        </p>\n                        <Button\n                          size=\"sm\"\n                          className=\"mt-2\"\n                          data-testid=\"button-apply-fix\"\n                        >\n                          Apply Suggested Fix\n                        </Button>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-start gap-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                      <Lightbulb className=\"h-5 w-5 text-blue-500 mt-0.5\" />\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-blue-700 dark:text-blue-300\">\n                          Performance enhancement suggestion\n                        </h4>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                          Your gradient computation could be 23% faster with\n                          parameter-shift rule optimization.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Code Metrics */}\n                  <div className=\"grid grid-cols-3 gap-4 pt-4 border-t\">\n                    <div className=\"text-center\">\n                      <div className=\"text-lg font-semibold text-blue-500\">\n                        156\n                      </div>\n                      <div className=\"text-sm text-gray-600\">Lines of Code</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-lg font-semibold text-green-500\">\n                        94%\n                      </div>\n                      <div className=\"text-sm text-gray-600\">Test Coverage</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-lg font-semibold text-purple-500\">\n                        A+\n                      </div>\n                      <div className=\"text-sm text-gray-600\">\n                        Maintainability\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Recent Reviews */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">Recent AI Reviews</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    {[\n                      {\n                        file: \"QAOA_maxcut.py\",\n                        score: 92,\n                        status: \"approved\",\n                        time: \"2h ago\",\n                      },\n                      {\n                        file: \"quantum_teleportation.py\",\n                        score: 78,\n                        status: \"needs_review\",\n                        time: \"5h ago\",\n                      },\n                      {\n                        file: \"error_mitigation.py\",\n                        score: 95,\n                        status: \"approved\",\n                        time: \"1d ago\",\n                      },\n                    ].map((review, idx) => (\n                      <div\n                        key={idx}\n                        className=\"flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-800 rounded\"\n                      >\n                        <span className=\"font-mono text-sm\">{review.file}</span>\n                        <div className=\"flex items-center gap-3\">\n                          <span className=\"text-sm font-semibold\">\n                            {review.score}/100\n                          </span>\n                          <Badge\n                            variant={\n                              review.status === \"approved\"\n                                ? \"default\"\n                                : \"secondary\"\n                            }\n                          >\n                            {review.status.replace(\"_\", \" \")}\n                          </Badge>\n                          <span className=\"text-xs text-gray-500\">\n                            {review.time}\n                          </span>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* 8. Achievements Modal */}\n        <Dialog open={showAchievements} onOpenChange={setShowAchievements}>\n          <DialogContent className=\"max-w-6xl max-h-[85vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <Medal className=\"h-5 w-5 text-yellow-500\" />\n                Quantum Achievements Gallery\n              </DialogTitle>\n              <DialogDescription>\n                Your team's quantum computing milestones and accomplishments\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-6 max-h-[600px] overflow-y-auto\">\n              {/* Achievement Categories */}\n              <Tabs defaultValue=\"recent\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-4\">\n                  <TabsTrigger value=\"recent\">Recent</TabsTrigger>\n                  <TabsTrigger value=\"collaboration\">Collaboration</TabsTrigger>\n                  <TabsTrigger value=\"research\">Research</TabsTrigger>\n                  <TabsTrigger value=\"mastery\">Mastery</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"recent\" className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    {[\n                      {\n                        name: \"Quantum Pioneer\",\n                        description:\n                          \"Successfully executed your first VQE algorithm\",\n                        icon: Rocket,\n                        rarity: \"rare\",\n                        points: 500,\n                        unlocked: true,\n                        date: \"2 days ago\",\n                      },\n                      {\n                        name: \"Circuit Master\",\n                        description:\n                          \"Optimized a quantum circuit to reduce depth by >20%\",\n                        icon: Lightning,\n                        rarity: \"epic\",\n                        points: 1000,\n                        unlocked: true,\n                        date: \"1 week ago\",\n                      },\n                      {\n                        name: \"Collaboration Expert\",\n                        description: \"Completed 10 successful team projects\",\n                        icon: Users,\n                        rarity: \"legendary\",\n                        points: 2500,\n                        unlocked: false,\n                        progress: 7,\n                      },\n                      {\n                        name: \"Quantum Debugger\",\n                        description:\n                          \"Fixed critical errors in quantum algorithms\",\n                        icon: Shield,\n                        rarity: \"common\",\n                        points: 200,\n                        unlocked: true,\n                        date: \"3 days ago\",\n                      },\n                    ].map((achievement, idx) => (\n                      <Card\n                        key={idx}\n                        className={`relative overflow-hidden ${achievement.unlocked ? \"\" : \"opacity-60\"}`}\n                      >\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-start gap-3\">\n                            <div\n                              className={`w-12 h-12 rounded-full flex items-center justify-center ${\n                                achievement.rarity === \"legendary\"\n                                  ? \"bg-gradient-to-br from-yellow-400 to-orange-500\"\n                                  : achievement.rarity === \"epic\"\n                                    ? \"bg-gradient-to-br from-purple-400 to-pink-500\"\n                                    : achievement.rarity === \"rare\"\n                                      ? \"bg-gradient-to-br from-blue-400 to-cyan-500\"\n                                      : \"bg-gradient-to-br from-gray-400 to-gray-500\"\n                              }`}\n                            >\n                              <achievement.icon className=\"h-6 w-6 text-white\" />\n                            </div>\n                            <div className=\"flex-1\">\n                              <h3 className=\"font-semibold flex items-center gap-2\">\n                                {achievement.name}\n                                {achievement.unlocked && (\n                                  <CheckCircle2 className=\"h-4 w-4 text-green-500\" />\n                                )}\n                              </h3>\n                              <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                                {achievement.description}\n                              </p>\n                              <div className=\"flex items-center justify-between mt-3\">\n                                <Badge\n                                  variant={\n                                    achievement.rarity === \"legendary\"\n                                      ? \"default\"\n                                      : achievement.rarity === \"epic\"\n                                        ? \"secondary\"\n                                        : achievement.rarity === \"rare\"\n                                          ? \"outline\"\n                                          : \"secondary\"\n                                  }\n                                  className=\"text-xs\"\n                                >\n                                  {achievement.rarity}\n                                </Badge>\n                                <div className=\"flex items-center gap-1 text-sm\">\n                                  <Flame className=\"h-3 w-3 text-orange-500\" />\n                                  <span className=\"font-semibold\">\n                                    {achievement.points} pts\n                                  </span>\n                                </div>\n                              </div>\n                              {achievement.unlocked && achievement.date && (\n                                <div className=\"text-xs text-gray-500 mt-2\">\n                                  Unlocked {achievement.date}\n                                </div>\n                              )}\n                              {!achievement.unlocked &&\n                                achievement.progress && (\n                                  <div className=\"mt-2\">\n                                    <div className=\"flex justify-between text-xs mb-1\">\n                                      <span>Progress</span>\n                                      <span>{achievement.progress}/10</span>\n                                    </div>\n                                    <Progress\n                                      value={achievement.progress * 10}\n                                      className=\"h-1\"\n                                    />\n                                  </div>\n                                )}\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"collaboration\">\n                  <div className=\"text-center py-8\">\n                    <Users className=\"h-12 w-12 text-blue-500 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold\">\n                      Team Collaboration Achievements\n                    </h3>\n                    <p className=\"text-gray-600 mt-2\">\n                      Unlock achievements by working together on quantum\n                      projects\n                    </p>\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"research\">\n                  <div className=\"text-center py-8\">\n                    <BookOpen className=\"h-12 w-12 text-green-500 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold\">\n                      Research Milestones\n                    </h3>\n                    <p className=\"text-gray-600 mt-2\">\n                      Achievements for scientific contributions and discoveries\n                    </p>\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"mastery\">\n                  <div className=\"text-center py-8\">\n                    <Crown className=\"h-12 w-12 text-yellow-500 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold\">Quantum Mastery</h3>\n                    <p className=\"text-gray-600 mt-2\">\n                      Expert-level achievements for quantum computing mastery\n                    </p>\n                  </div>\n                </TabsContent>\n              </Tabs>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* 9. Active Challenges Modal */}\n        <Dialog\n          open={showActiveChallenges}\n          onOpenChange={setShowActiveChallenges}\n        >\n          <DialogContent className=\"max-w-6xl max-h-[85vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <Target className=\"h-5 w-5 text-red-500\" />\n                Active Quantum Challenges\n              </DialogTitle>\n              <DialogDescription>\n                Compete in quantum computing challenges and advance your skills\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4 max-h-[700px] overflow-y-auto\">\n              {/* Challenge Categories */}\n              <div className=\"grid grid-cols-3 gap-4\">\n                <Card className=\"text-center\">\n                  <CardContent className=\"p-4\">\n                    <Puzzle className=\"h-8 w-8 text-blue-500 mx-auto mb-2\" />\n                    <div className=\"font-semibold\">Algorithm</div>\n                    <div className=\"text-sm text-gray-600\">5 active</div>\n                  </CardContent>\n                </Card>\n                <Card className=\"text-center\">\n                  <CardContent className=\"p-4\">\n                    <Users className=\"h-8 w-8 text-green-500 mx-auto mb-2\" />\n                    <div className=\"font-semibold\">Team</div>\n                    <div className=\"text-sm text-gray-600\">2 active</div>\n                  </CardContent>\n                </Card>\n                <Card className=\"text-center\">\n                  <CardContent className=\"p-4\">\n                    <Trophy className=\"h-8 w-8 text-yellow-500 mx-auto mb-2\" />\n                    <div className=\"font-semibold\">Competition</div>\n                    <div className=\"text-sm text-gray-600\">1 active</div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Active Challenges List */}\n              <div className=\"space-y-4\">\n                {[\n                  {\n                    name: \"VQE Optimization Challenge\",\n                    description:\n                      \"Optimize a VQE algorithm to achieve >95% accuracy with minimum circuit depth\",\n                    difficulty: \"Expert\",\n                    participants: 156,\n                    timeLeft: \"5 days\",\n                    reward: 5000,\n                    progress: 65,\n                    status: \"in_progress\",\n                  },\n                  {\n                    name: \"Quantum Error Correction\",\n                    description:\n                      \"Implement and test a surface code error correction scheme\",\n                    difficulty: \"Advanced\",\n                    participants: 89,\n                    timeLeft: \"12 days\",\n                    reward: 3500,\n                    progress: 0,\n                    status: \"available\",\n                  },\n                  {\n                    name: \"Team Circuit Design\",\n                    description:\n                      \"Collaborate with 2+ members to design an efficient QAOA circuit\",\n                    difficulty: \"Intermediate\",\n                    participants: 234,\n                    timeLeft: \"8 days\",\n                    reward: 2000,\n                    progress: 30,\n                    status: \"in_progress\",\n                  },\n                ].map((challenge, idx) => (\n                  <Card key={idx}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-3 mb-2\">\n                            <h3 className=\"font-semibold text-lg\">\n                              {challenge.name}\n                            </h3>\n                            <Badge\n                              variant={\n                                challenge.difficulty === \"Expert\"\n                                  ? \"destructive\"\n                                  : challenge.difficulty === \"Advanced\"\n                                    ? \"default\"\n                                    : \"secondary\"\n                              }\n                            >\n                              {challenge.difficulty}\n                            </Badge>\n                            {challenge.status === \"in_progress\" && (\n                              <Badge\n                                variant=\"outline\"\n                                className=\"text-blue-600 border-blue-600\"\n                              >\n                                In Progress\n                              </Badge>\n                            )}\n                          </div>\n                          <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                            {challenge.description}\n                          </p>\n\n                          {challenge.status === \"in_progress\" && (\n                            <div className=\"mb-4\">\n                              <div className=\"flex justify-between text-sm mb-1\">\n                                <span>Your Progress</span>\n                                <span>{challenge.progress}%</span>\n                              </div>\n                              <Progress\n                                value={challenge.progress}\n                                className=\"h-2\"\n                              />\n                            </div>\n                          )}\n\n                          <div className=\"flex items-center gap-6 text-sm\">\n                            <div className=\"flex items-center gap-1\">\n                              <Users className=\"h-4 w-4\" />\n                              <span>{challenge.participants} participants</span>\n                            </div>\n                            <div className=\"flex items-center gap-1\">\n                              <Clock className=\"h-4 w-4\" />\n                              <span>{challenge.timeLeft} left</span>\n                            </div>\n                            <div className=\"flex items-center gap-1\">\n                              <Flame className=\"h-4 w-4 text-orange-500\" />\n                              <span className=\"font-semibold\">\n                                {challenge.reward.toLocaleString()} pts\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"ml-4\">\n                          <Button\n                            data-testid={`button-${challenge.status === \"in_progress\" ? \"continue\" : \"join\"}-challenge-${idx}`}\n                            className=\"mb-2\"\n                          >\n                            {challenge.status === \"in_progress\"\n                              ? \"Continue\"\n                              : \"Join Challenge\"}\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"w-full\"\n                            data-testid={`button-view-details-${idx}`}\n                          >\n                            View Details\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* 10. Team Leaderboard Modal */}\n        <Dialog open={showLeaderboard} onOpenChange={setShowLeaderboard}>\n          <DialogContent className=\"max-w-6xl max-h-[85vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <TrendingUp className=\"h-5 w-5 text-purple-500\" />\n                Team Leaderboard\n              </DialogTitle>\n              <DialogDescription>\n                Rankings and achievements of your quantum research team\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-6 max-h-[600px] overflow-y-auto\">\n              {/* Leaderboard Categories */}\n              <Tabs defaultValue=\"points\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-4\">\n                  <TabsTrigger value=\"points\">Total Points</TabsTrigger>\n                  <TabsTrigger value=\"contributions\">Contributions</TabsTrigger>\n                  <TabsTrigger value=\"achievements\">Achievements</TabsTrigger>\n                  <TabsTrigger value=\"monthly\">This Month</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"points\" className=\"space-y-4\">\n                  <div className=\"space-y-3\">\n                    {[\n                      {\n                        name: \"Dr. Sarah Kim\",\n                        points: 8750,\n                        level: 12,\n                        streak: 28,\n                        rank: 1,\n                        change: \"up\",\n                      },\n                      {\n                        name: \"Alice Chen\",\n                        points: 7200,\n                        level: 10,\n                        streak: 15,\n                        rank: 2,\n                        change: \"same\",\n                      },\n                      {\n                        name: \"Bob Wilson\",\n                        points: 6800,\n                        level: 9,\n                        streak: 12,\n                        rank: 3,\n                        change: \"down\",\n                      },\n                      {\n                        name: \"John Doe\",\n                        points: 5500,\n                        level: 8,\n                        streak: 8,\n                        rank: 4,\n                        change: \"up\",\n                      },\n                      {\n                        name: \"Emma Davis\",\n                        points: 4900,\n                        level: 7,\n                        streak: 5,\n                        rank: 5,\n                        change: \"up\",\n                      },\n                    ].map((member, idx) => (\n                      <Card\n                        key={idx}\n                        className={`${idx < 3 ? \"ring-2 ring-yellow-200 dark:ring-yellow-800\" : \"\"}`}\n                      >\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center gap-4\">\n                              {/* Rank Badge */}\n                              <div\n                                className={`w-10 h-10 rounded-full flex items-center justify-center font-bold text-lg ${\n                                  idx === 0\n                                    ? \"bg-gradient-to-br from-yellow-400 to-yellow-600 text-white\"\n                                    : idx === 1\n                                      ? \"bg-gradient-to-br from-gray-300 to-gray-500 text-white\"\n                                      : idx === 2\n                                        ? \"bg-gradient-to-br from-orange-400 to-orange-600 text-white\"\n                                        : \"bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400\"\n                                }`}\n                              >\n                                {member.rank}\n                              </div>\n\n                              {/* Member Info */}\n                              <div className=\"flex items-center gap-3\">\n                                <Avatar className=\"h-10 w-10\">\n                                  <AvatarFallback className=\"bg-gradient-to-br from-blue-500 to-purple-500 text-white\">\n                                    {member.name\n                                      .split(\" \")\n                                      .map((n) => n[0])\n                                      .join(\"\")}\n                                  </AvatarFallback>\n                                </Avatar>\n                                <div>\n                                  <div className=\"font-semibold flex items-center gap-2\">\n                                    {member.name}\n                                    {idx < 3 && (\n                                      <Crown className=\"h-4 w-4 text-yellow-500\" />\n                                    )}\n                                  </div>\n                                  <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                                    Level {member.level} • {member.streak} day\n                                    streak\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n\n                            {/* Points and Change */}\n                            <div className=\"text-right\">\n                              <div className=\"text-lg font-bold text-blue-600\">\n                                {member.points.toLocaleString()}\n                              </div>\n                              <div\n                                className={`text-sm flex items-center gap-1 ${\n                                  member.change === \"up\"\n                                    ? \"text-green-600\"\n                                    : member.change === \"down\"\n                                      ? \"text-red-600\"\n                                      : \"text-gray-500\"\n                                }`}\n                              >\n                                {member.change === \"up\" && \"↗\"}\n                                {member.change === \"down\" && \"↘\"}\n                                {member.change === \"same\" && \"—\"}\n                                <span>points</span>\n                              </div>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"contributions\">\n                  <div className=\"text-center py-8\">\n                    <GitBranch className=\"h-12 w-12 text-blue-500 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold\">\n                      Contribution Rankings\n                    </h3>\n                    <p className=\"text-gray-600 mt-2\">\n                      Based on commits, reviews, and collaboration\n                    </p>\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"achievements\">\n                  <div className=\"text-center py-8\">\n                    <Medal className=\"h-12 w-12 text-yellow-500 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold\">\n                      Achievement Leaders\n                    </h3>\n                    <p className=\"text-gray-600 mt-2\">\n                      Top performers in quantum achievements\n                    </p>\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"monthly\">\n                  <div className=\"text-center py-8\">\n                    <Calendar className=\"h-12 w-12 text-green-500 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold\">\n                      This Month's Champions\n                    </h3>\n                    <p className=\"text-gray-600 mt-2\">\n                      September 2025 leaderboard\n                    </p>\n                  </div>\n                </TabsContent>\n              </Tabs>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* 11. Learning Path Modal */}\n        <Dialog open={showLearningPath} onOpenChange={setShowLearningPath}>\n          <DialogContent className=\"max-w-6xl max-h-[85vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <GraduationCap className=\"h-5 w-5 text-indigo-500\" />\n                Quantum Learning Path\n              </DialogTitle>\n              <DialogDescription>\n                Structured learning journey to master quantum computing and\n                collaboration\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-6 max-h-[700px] overflow-y-auto\">\n              {/* Progress Overview */}\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"text-lg font-semibold\">\n                      Your Learning Progress\n                    </h3>\n                    <Badge variant=\"default\" className=\"bg-indigo-500\">\n                      Advanced Level\n                    </Badge>\n                  </div>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Overall Completion</span>\n                      <span>73% (11/15 modules)</span>\n                    </div>\n                    <Progress value={73} className=\"h-3\" />\n                    <div className=\"grid grid-cols-3 gap-4 mt-4 text-center\">\n                      <div>\n                        <div className=\"text-2xl font-bold text-green-500\">\n                          11\n                        </div>\n                        <div className=\"text-sm text-gray-600\">Completed</div>\n                      </div>\n                      <div>\n                        <div className=\"text-2xl font-bold text-blue-500\">\n                          2\n                        </div>\n                        <div className=\"text-sm text-gray-600\">In Progress</div>\n                      </div>\n                      <div>\n                        <div className=\"text-2xl font-bold text-gray-500\">\n                          2\n                        </div>\n                        <div className=\"text-sm text-gray-600\">Locked</div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Learning Modules */}\n              <div className=\"space-y-4\">\n                {[\n                  {\n                    title: \"Quantum Fundamentals\",\n                    description:\n                      \"Master the basics of qubits, superposition, and entanglement\",\n                    modules: [\n                      \"Qubit States\",\n                      \"Quantum Gates\",\n                      \"Measurement\",\n                      \"Entanglement\",\n                    ],\n                    completed: 4,\n                    total: 4,\n                    status: \"completed\",\n                    difficulty: \"Beginner\",\n                  },\n                  {\n                    title: \"Quantum Algorithms\",\n                    description:\n                      \"Learn key quantum algorithms and their implementations\",\n                    modules: [\n                      \"Deutsch Algorithm\",\n                      \"Grover Search\",\n                      \"Shor's Algorithm\",\n                      \"VQE\",\n                    ],\n                    completed: 3,\n                    total: 4,\n                    status: \"in_progress\",\n                    difficulty: \"Intermediate\",\n                  },\n                  {\n                    title: \"Quantum Machine Learning\",\n                    description:\n                      \"Explore the intersection of quantum computing and ML\",\n                    modules: [\n                      \"Quantum Features\",\n                      \"QSVM\",\n                      \"Quantum Neural Networks\",\n                      \"Hybrid Models\",\n                    ],\n                    completed: 2,\n                    total: 4,\n                    status: \"in_progress\",\n                    difficulty: \"Advanced\",\n                  },\n                  {\n                    title: \"NISQ Programming\",\n                    description:\n                      \"Programming for Noisy Intermediate-Scale Quantum devices\",\n                    modules: [\n                      \"Error Mitigation\",\n                      \"Circuit Optimization\",\n                      \"Hardware Constraints\",\n                      \"Benchmarking\",\n                    ],\n                    completed: 2,\n                    total: 4,\n                    status: \"available\",\n                    difficulty: \"Expert\",\n                  },\n                  {\n                    title: \"Quantum Collaboration\",\n                    description:\n                      \"Advanced teamwork and collaboration in quantum research\",\n                    modules: [\n                      \"Team Protocols\",\n                      \"Shared Resources\",\n                      \"Peer Review\",\n                      \"Knowledge Sharing\",\n                    ],\n                    completed: 0,\n                    total: 4,\n                    status: \"locked\",\n                    difficulty: \"Expert\",\n                  },\n                ].map((path, idx) => (\n                  <Card\n                    key={idx}\n                    className={`${path.status === \"locked\" ? \"opacity-60\" : \"\"}`}\n                  >\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-3 mb-2\">\n                            <h3 className=\"text-lg font-semibold\">\n                              {path.title}\n                            </h3>\n                            <Badge\n                              variant={\n                                path.status === \"completed\"\n                                  ? \"default\"\n                                  : path.status === \"in_progress\"\n                                    ? \"secondary\"\n                                    : path.status === \"locked\"\n                                      ? \"outline\"\n                                      : \"outline\"\n                              }\n                            >\n                              {path.difficulty}\n                            </Badge>\n                            {path.status === \"completed\" && (\n                              <CheckCircle2 className=\"h-5 w-5 text-green-500\" />\n                            )}\n                            {path.status === \"locked\" && (\n                              <Lock className=\"h-5 w-5 text-gray-400\" />\n                            )}\n                          </div>\n                          <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                            {path.description}\n                          </p>\n\n                          <div className=\"mb-4\">\n                            <div className=\"flex justify-between text-sm mb-2\">\n                              <span>Progress</span>\n                              <span>\n                                {path.completed}/{path.total} modules\n                              </span>\n                            </div>\n                            <Progress\n                              value={(path.completed / path.total) * 100}\n                              className=\"h-2\"\n                            />\n                          </div>\n\n                          <div className=\"flex flex-wrap gap-2\">\n                            {path.modules.map((module, midx) => (\n                              <Badge\n                                key={midx}\n                                variant={\n                                  midx < path.completed\n                                    ? \"default\"\n                                    : midx === path.completed &&\n                                        path.status === \"in_progress\"\n                                      ? \"secondary\"\n                                      : \"outline\"\n                                }\n                                className=\"text-xs\"\n                              >\n                                {midx < path.completed && \"✓ \"}\n                                {module}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n\n                        <div className=\"ml-4\">\n                          <Button\n                            disabled={path.status === \"locked\"}\n                            data-testid={`button-${path.status === \"completed\" ? \"review\" : path.status === \"in_progress\" ? \"continue\" : \"start\"}-path-${idx}`}\n                            className=\"mb-2\"\n                          >\n                            {path.status === \"completed\"\n                              ? \"Review\"\n                              : path.status === \"in_progress\"\n                                ? \"Continue\"\n                                : path.status === \"locked\"\n                                  ? \"Locked\"\n                                  : \"Start\"}\n                          </Button>\n                          {path.status !== \"locked\" && (\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"w-full\"\n                              data-testid={`button-view-curriculum-${idx}`}\n                            >\n                              View Curriculum\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n\n              {/* Recommended Next Steps */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2 text-base\">\n                    <Route className=\"h-4 w-4\" />\n                    Recommended Next Steps\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                      <BookOpen className=\"h-5 w-5 text-blue-500\" />\n                      <div>\n                        <div className=\"font-medium\">Complete VQE Module</div>\n                        <div className=\"text-sm text-gray-600\">\n                          Finish the last module in Quantum Algorithms\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-3 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                      <Users className=\"h-5 w-5 text-green-500\" />\n                      <div>\n                        <div className=\"font-medium\">Join Study Group</div>\n                        <div className=\"text-sm text-gray-600\">\n                          Connect with peers learning Quantum ML\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* ================ QUANTUM HARDWARE & RESOURCES MODAL INTERFACES ================ */}\n\n        {/* 1. Smart Scheduler Modal */}\n        <Dialog open={showSmartScheduler} onOpenChange={setShowSmartScheduler}>\n          <DialogContent className=\"max-w-7xl max-h-[85vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <Calendar className=\"h-5 w-5 text-orange-500\" />\n                  Smart Hardware Scheduler\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full mr-1\"></div>\n                    3 backends available\n                  </Badge>\n                  <Button size=\"icon\" variant=\"ghost\" data-testid=\"button-scheduler-settings\">\n                    <Settings className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </DialogTitle>\n              <DialogDescription>\n                Intelligent quantum hardware scheduling with optimal resource allocation and cost optimization\n              </DialogDescription>\n            </DialogHeader>\n\n            <div className=\"flex h-[650px] gap-4\">\n              {/* Main Scheduler Interface */}\n              <div className=\"flex-1 flex flex-col bg-white dark:bg-gray-950 rounded-lg border\">\n                {/* Hardware Status Overview */}\n                <div className=\"p-4 border-b bg-gradient-to-r from-orange-50 to-red-50 dark:from-orange-950/50 dark:to-red-950/50\">\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-green-600\">3</div>\n                      <div className=\"text-sm text-gray-500\">Available</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-yellow-600\">1</div>\n                      <div className=\"text-sm text-gray-500\">Busy</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-red-600\">1</div>\n                      <div className=\"text-sm text-gray-500\">Maintenance</div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Backend Selection Grid */}\n                <div className=\"flex-1 p-4 space-y-4\">\n                  <h3 className=\"text-lg font-semibold\">Select Quantum Backend</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {mockBackends.slice(0, 4).map((backend) => (\n                      <Card key={backend.id} className=\"cursor-pointer hover:shadow-md transition-all duration-200 border-2 hover:border-orange-300\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <h4 className=\"font-semibold\">{backend.name}</h4>\n                            <Badge className={backend.status === 'available' ? 'bg-green-100 text-green-800' : backend.status === 'busy' ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'}>\n                              {backend.status}\n                            </Badge>\n                          </div>\n                          <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                            <div><span className=\"text-gray-500\">Qubits:</span> <span className=\"font-medium\">{backend.qubits}</span></div>\n                            <div><span className=\"text-gray-500\">Queue:</span> <span className=\"font-medium\">{backend.queueLength}</span></div>\n                            <div><span className=\"text-gray-500\">Wait:</span> <span className=\"font-medium\">{backend.averageWaitTime}min</span></div>\n                            <div><span className=\"text-gray-500\">Uptime:</span> <span className=\"font-medium\">{backend.uptime}</span></div>\n                          </div>\n                          <div className=\"mt-3\">\n                            <div className=\"flex justify-between text-xs mb-1\">\n                              <span>Utilization</span>\n                              <span>{backend.currentJobs}/{backend.maxJobs}</span>\n                            </div>\n                            <Progress value={(backend.currentJobs / backend.maxJobs) * 100} className=\"h-2\" />\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n\n                  {/* Quick Schedule Form */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-base\">Schedule New Reservation</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <Label>Start Time</Label>\n                          <Input type=\"datetime-local\" />\n                        </div>\n                        <div>\n                          <Label>Duration (minutes)</Label>\n                          <Select>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select duration\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"30\">30 minutes</SelectItem>\n                              <SelectItem value=\"60\">1 hour</SelectItem>\n                              <SelectItem value=\"120\">2 hours</SelectItem>\n                              <SelectItem value=\"240\">4 hours</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n                      <div>\n                        <Label>Purpose</Label>\n                        <Textarea placeholder=\"Describe your experiment or research purpose...\" />\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Button className=\"flex-1\">\n                          <Calendar className=\"h-4 w-4 mr-2\" />\n                          Schedule Reservation\n                        </Button>\n                        <Button variant=\"outline\">\n                          <Target className=\"h-4 w-4 mr-2\" />\n                          Optimize Schedule\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n\n              {/* Sidebar - Current Reservations & AI Suggestions */}\n              <div className=\"w-80 space-y-4\">\n                {/* Current Reservations */}\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm flex items-center gap-2\">\n                      <Clock className=\"h-4 w-4 text-orange-500\" />\n                      Current Reservations\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    {mockHardwareSchedule.map((reservation) => (\n                      <div key={reservation.id} className=\"p-3 border rounded-lg space-y-2\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"font-medium text-sm\">{reservation.backend}</span>\n                          <Badge className={reservation.status === 'confirmed' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}>\n                            {reservation.status}\n                          </Badge>\n                        </div>\n                        <div className=\"text-xs text-gray-500\">{reservation.purpose}</div>\n                        <div className=\"text-xs text-gray-500\">\n                          {formatDistanceToNow(reservation.startTime)} • {reservation.duration}min\n                        </div>\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n\n                {/* AI Scheduling Suggestions */}\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm flex items-center gap-2\">\n                      <Sparkles className=\"h-4 w-4 text-purple-500\" />\n                      AI Scheduling Suggestions\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                      <div className=\"text-sm font-medium text-blue-900 dark:text-blue-100\">Optimal Time Slot</div>\n                      <div className=\"text-xs text-blue-700 dark:text-blue-300 mt-1\">\n                        Schedule for 2:00 AM EST for 40% faster execution\n                      </div>\n                    </div>\n                    <div className=\"p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                      <div className=\"text-sm font-medium text-green-900 dark:text-green-100\">Cost Savings</div>\n                      <div className=\"text-xs text-green-700 dark:text-green-300 mt-1\">\n                        Use simulator for testing first - save $25/hour\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* 2. Resource Optimizer Modal */}\n        <Dialog open={showResourceOptimizer} onOpenChange={setShowResourceOptimizer}>\n          <DialogContent className=\"max-w-7xl max-h-[85vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <Zap className=\"h-5 w-5 text-yellow-500\" />\n                  AI Resource Optimizer\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant=\"outline\" className=\"bg-purple-50 text-purple-700 border-purple-200\">\n                    <div className=\"w-2 h-2 bg-purple-500 rounded-full mr-1 animate-pulse\"></div>\n                    AI Active\n                  </Badge>\n                  <Button size=\"icon\" variant=\"ghost\">\n                    <RefreshCw className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </DialogTitle>\n              <DialogDescription>\n                AI-powered optimization recommendations for efficient resource utilization and cost reduction\n              </DialogDescription>\n            </DialogHeader>\n\n            <div className=\"flex h-[650px] gap-4\">\n              {/* Main Optimization Dashboard */}\n              <div className=\"flex-1 flex flex-col bg-white dark:bg-gray-950 rounded-lg border\">\n                {/* Optimization Metrics */}\n                <div className=\"p-4 border-b bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-950/50 dark:to-orange-950/50\">\n                  <div className=\"grid grid-cols-4 gap-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-green-600\">85%</div>\n                      <div className=\"text-sm text-gray-500\">Efficiency</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-blue-600\">$450</div>\n                      <div className=\"text-sm text-gray-500\">Weekly Savings</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-purple-600\">12</div>\n                      <div className=\"text-sm text-gray-500\">Active Jobs</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-orange-600\">94%</div>\n                      <div className=\"text-sm text-gray-500\">Success Rate</div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Optimization Recommendations */}\n                <div className=\"flex-1 p-4 space-y-4\">\n                  <h3 className=\"text-lg font-semibold\">AI Optimization Recommendations</h3>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {/* Cost Optimization */}\n                    <Card className=\"border-green-200 dark:border-green-800\">\n                      <CardHeader className=\"pb-3\">\n                        <CardTitle className=\"text-base flex items-center gap-2\">\n                          <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                          Cost Optimization\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-3\">\n                        <div className=\"p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                          <div className=\"font-medium text-green-900 dark:text-green-100 text-sm\">Switch to Simulator</div>\n                          <div className=\"text-xs text-green-700 dark:text-green-300 mt-1\">\n                            Use quantum simulator for development and testing\n                          </div>\n                          <div className=\"text-xs font-medium text-green-600 mt-2\">Potential savings: $200/month</div>\n                        </div>\n                        <Button size=\"sm\" className=\"w-full\">Apply Recommendation</Button>\n                      </CardContent>\n                    </Card>\n\n                    {/* Performance Optimization */}\n                    <Card className=\"border-blue-200 dark:border-blue-800\">\n                      <CardHeader className=\"pb-3\">\n                        <CardTitle className=\"text-base flex items-center gap-2\">\n                          <Clock className=\"h-4 w-4 text-blue-500\" />\n                          Performance Boost\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-3\">\n                        <div className=\"p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                          <div className=\"font-medium text-blue-900 dark:text-blue-100 text-sm\">Optimize Queue Timing</div>\n                          <div className=\"text-xs text-blue-700 dark:text-blue-300 mt-1\">\n                            Schedule during off-peak hours (2-6 AM EST)\n                          </div>\n                          <div className=\"text-xs font-medium text-blue-600 mt-2\">Time savings: 2-3 hours/day</div>\n                        </div>\n                        <Button size=\"sm\" variant=\"outline\" className=\"w-full\">View Schedule</Button>\n                      </CardContent>\n                    </Card>\n\n                    {/* Efficiency Optimization */}\n                    <Card className=\"border-purple-200 dark:border-purple-800\">\n                      <CardHeader className=\"pb-3\">\n                        <CardTitle className=\"text-base flex items-center gap-2\">\n                          <Target className=\"h-4 w-4 text-purple-500\" />\n                          Efficiency Boost\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-3\">\n                        <div className=\"p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg\">\n                          <div className=\"font-medium text-purple-900 dark:text-purple-100 text-sm\">Batch Experiments</div>\n                          <div className=\"text-xs text-purple-700 dark:text-purple-300 mt-1\">\n                            Group similar VQE experiments to reduce overhead\n                          </div>\n                          <div className=\"text-xs font-medium text-purple-600 mt-2\">Efficiency gain: 30%</div>\n                        </div>\n                        <Button size=\"sm\" variant=\"outline\" className=\"w-full\">Auto-Batch Jobs</Button>\n                      </CardContent>\n                    </Card>\n                  </div>\n\n                  {/* Resource Usage Analytics */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-base flex items-center gap-2\">\n                        <BarChart3 className=\"h-4 w-4 text-orange-500\" />\n                        Resource Usage Analytics\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-3 gap-6\">\n                        <div className=\"text-center\">\n                          <div className=\"text-lg font-bold\">42.5h</div>\n                          <div className=\"text-sm text-gray-500\">Weekly Usage</div>\n                          <div className=\"text-xs text-green-600 mt-1\">+12% from last week</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-lg font-bold\">85%</div>\n                          <div className=\"text-sm text-gray-500\">Cost Efficiency</div>\n                          <div className=\"text-xs text-yellow-600 mt-1\">Can improve by 15%</div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-lg font-bold\">94.2%</div>\n                          <div className=\"text-sm text-gray-500\">Success Rate</div>\n                          <div className=\"text-xs text-green-600 mt-1\">Above average</div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n\n              {/* Sidebar - Real-time Metrics */}\n              <div className=\"w-80 space-y-4\">\n                {/* Live Resource Monitor */}\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm flex items-center gap-2\">\n                      <Activity className=\"h-4 w-4 text-green-500\" />\n                      Live Resource Monitor\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>CPU Usage</span>\n                        <span>68%</span>\n                      </div>\n                      <Progress value={68} className=\"h-2\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Memory</span>\n                        <span>45%</span>\n                      </div>\n                      <Progress value={45} className=\"h-2\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Queue Load</span>\n                        <span>32%</span>\n                      </div>\n                      <Progress value={32} className=\"h-2\" />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Optimization History */}\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm\">Recent Optimizations</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-2\">\n                    <div className=\"text-xs space-y-1\">\n                      <div className=\"flex justify-between\">\n                        <span>Queue optimization</span>\n                        <span className=\"text-green-600\">+15% speed</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Cost reduction</span>\n                        <span className=\"text-green-600\">-$45/day</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Job batching</span>\n                        <span className=\"text-green-600\">+30% efficiency</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* 3. Live Circuit Editor Modal */}\n        <Dialog open={showLiveCircuitEditor} onOpenChange={setShowLiveCircuitEditor}>\n          <DialogContent className=\"max-w-7xl max-h-[85vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <BrainCircuit className=\"h-5 w-5 text-blue-500\" />\n                  Live Quantum Circuit Editor\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-700 border-blue-200\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full mr-1 animate-pulse\"></div>\n                    3 collaborators\n                  </Badge>\n                  <Button size=\"icon\" variant=\"ghost\">\n                    <Share2 className=\"h-4 w-4\" />\n                  </Button>\n                  <Button size=\"icon\" variant=\"ghost\">\n                    <Save className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </DialogTitle>\n              <DialogDescription>\n                Real-time collaborative quantum circuit design with live simulation and shared editing\n              </DialogDescription>\n            </DialogHeader>\n\n            <div className=\"flex h-[650px] gap-4\">\n              {/* Main Circuit Editor */}\n              <div className=\"flex-1 flex flex-col bg-white dark:bg-gray-950 rounded-lg border\">\n                {/* Toolbar */}\n                <div className=\"p-4 border-b bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-950/50 dark:to-indigo-950/50\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Button size=\"sm\" variant=\"outline\">\n                        <Play className=\"h-4 w-4 mr-1\" />\n                        Run\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\">\n                        <Pause className=\"h-4 w-4 mr-1\" />\n                        Pause\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\">\n                        <Save className=\"h-4 w-4 mr-1\" />\n                        Save\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\">\n                        <Download className=\"h-4 w-4 mr-1\" />\n                        Export\n                      </Button>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-sm text-gray-600\">Circuit: VQE_optimization_v2.qasm</span>\n                      <Button size=\"sm\" variant=\"outline\">\n                        <Eye className=\"h-4 w-4 mr-1\" />\n                        Simulate\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Circuit Design Area */}\n                <div className=\"flex-1 p-4\">\n                  <div className=\"bg-gray-50 dark:bg-gray-900 rounded-lg p-6 h-full flex flex-col\">\n                    {/* Circuit Stats */}\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center gap-4 text-sm\">\n                        <div><span className=\"text-gray-500\">Qubits:</span> <span className=\"font-medium\">8</span></div>\n                        <div><span className=\"text-gray-500\">Gates:</span> <span className=\"font-medium\">156</span></div>\n                        <div><span className=\"text-gray-500\">Depth:</span> <span className=\"font-medium\">12</span></div>\n                        <div><span className=\"text-gray-500\">Backend:</span> <span className=\"font-medium\">ibm_cairo</span></div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                        <span className=\"text-sm text-gray-600\">Alice Chen (editing)</span>\n                        <div className=\"w-2 h-2 bg-blue-500 rounded-full ml-2\"></div>\n                        <span className=\"text-sm text-gray-600\">Bob Wilson (viewing)</span>\n                      </div>\n                    </div>\n\n                    {/* Circuit Visualization */}\n                    <div className=\"flex-1 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4\">\n                      <div className=\"h-full flex items-center justify-center\">\n                        <div className=\"text-center\">\n                          <CircuitBoard className=\"h-16 w-16 mx-auto mb-4 text-gray-400\" />\n                          <div className=\"text-lg font-medium text-gray-600 dark:text-gray-300\">Interactive Circuit Canvas</div>\n                          <div className=\"text-sm text-gray-500 mt-2\">\n                            Drag and drop quantum gates to build your circuit\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Gate Palette */}\n                    <div className=\"mt-4 p-3 bg-white dark:bg-gray-800 rounded-lg border\">\n                      <div className=\"text-sm font-medium mb-2\">Quantum Gates</div>\n                      <div className=\"flex items-center gap-2\">\n                        <Button size=\"sm\" variant=\"outline\" className=\"text-xs\">H</Button>\n                        <Button size=\"sm\" variant=\"outline\" className=\"text-xs\">X</Button>\n                        <Button size=\"sm\" variant=\"outline\" className=\"text-xs\">Y</Button>\n                        <Button size=\"sm\" variant=\"outline\" className=\"text-xs\">Z</Button>\n                        <Button size=\"sm\" variant=\"outline\" className=\"text-xs\">CNOT</Button>\n                        <Button size=\"sm\" variant=\"outline\" className=\"text-xs\">RZ</Button>\n                        <Button size=\"sm\" variant=\"outline\" className=\"text-xs\">RY</Button>\n                        <Button size=\"sm\" variant=\"outline\" className=\"text-xs\">Measure</Button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Sidebar - Collaboration & Results */}\n              <div className=\"w-80 space-y-4\">\n                {/* Active Collaborators */}\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm flex items-center gap-2\">\n                      <Users className=\"h-4 w-4 text-blue-500\" />\n                      Active Collaborators\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    {mockLiveCircuits[0].collaborators.map((collaborator, idx) => (\n                      <div key={idx} className=\"flex items-center gap-3\">\n                        <div className=\"relative\">\n                          <Avatar className=\"h-8 w-8\">\n                            <AvatarFallback className=\"bg-gradient-to-br from-blue-500 to-purple-600 text-white text-xs\">\n                              {collaborator.name.split(' ').map(n => n[0]).join('')}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className={`absolute -bottom-1 -right-1 w-3 h-3 border-2 border-white dark:border-gray-800 rounded-full ${\n                            collaborator.status === 'editing' ? 'bg-green-500' : 'bg-blue-500'\n                          }`}></div>\n                        </div>\n                        <div className=\"flex-1\">\n                          <div className=\"text-sm font-medium\">{collaborator.name}</div>\n                          <div className=\"text-xs text-gray-500 capitalize\">{collaborator.status}</div>\n                        </div>\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n\n                {/* Simulation Results */}\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm flex items-center gap-2\">\n                      <BarChart3 className=\"h-4 w-4 text-green-500\" />\n                      Simulation Results\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"text-sm\">\n                      <div className=\"flex justify-between mb-2\">\n                        <span>Fidelity</span>\n                        <span className=\"font-medium\">94.2%</span>\n                      </div>\n                      <Progress value={94.2} className=\"h-2 mb-3\" />\n                      \n                      <div className=\"space-y-1 text-xs\">\n                        <div className=\"flex justify-between\">\n                          <span>|00⟩</span>\n                          <span>487 (47.9%)</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>|11⟩</span>\n                          <span>501 (49.2%)</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>|01⟩</span>\n                          <span>18 (1.8%)</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>|10⟩</span>\n                          <span>18 (1.8%)</span>\n                        </div>\n                      </div>\n                    </div>\n                    <Button size=\"sm\" className=\"w-full\">\n                      <Play className=\"h-4 w-4 mr-2\" />\n                      Run on Hardware\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                {/* Recent Changes */}\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm\">Recent Changes</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-2\">\n                    <div className=\"text-xs space-y-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                        <span>Alice added H gate to qubit 0</span>\n                        <span className=\"text-gray-500 ml-auto\">2m ago</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                        <span>Bob optimized circuit depth</span>\n                        <span className=\"text-gray-500 ml-auto\">5m ago</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-2 h-2 bg-purple-500 rounded-full\"></div>\n                        <span>Circuit saved as v2.1</span>\n                        <span className=\"text-gray-500 ml-auto\">8m ago</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* 4. Experiment Tracker Modal */}\n        <Dialog open={showExperimentTracker} onOpenChange={setShowExperimentTracker}>\n          <DialogContent className=\"max-w-7xl max-h-[85vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <FlaskConical className=\"h-5 w-5 text-purple-500\" />\n                  Quantum Experiment Tracker\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant=\"outline\" className=\"bg-purple-50 text-purple-700 border-purple-200\">\n                    <div className=\"w-2 h-2 bg-orange-500 rounded-full mr-1 animate-pulse\"></div>\n                    5 active experiments\n                  </Badge>\n                  <Button size=\"icon\" variant=\"ghost\">\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                  <Button size=\"icon\" variant=\"ghost\">\n                    <Filter className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </DialogTitle>\n              <DialogDescription>\n                Comprehensive tracking and management of quantum research experiments with hypothesis testing\n              </DialogDescription>\n            </DialogHeader>\n\n            <div className=\"flex h-[650px] gap-4\">\n              {/* Main Experiments Dashboard */}\n              <div className=\"flex-1 flex flex-col bg-white dark:bg-gray-950 rounded-lg border\">\n                {/* Experiment Overview */}\n                <div className=\"p-4 border-b bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-950/50 dark:to-pink-950/50\">\n                  <div className=\"grid grid-cols-4 gap-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-green-600\">2</div>\n                      <div className=\"text-sm text-gray-500\">Running</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-blue-600\">1</div>\n                      <div className=\"text-sm text-gray-500\">Completed</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-yellow-600\">1</div>\n                      <div className=\"text-sm text-gray-500\">Paused</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-gray-600\">1</div>\n                      <div className=\"text-sm text-gray-500\">Planning</div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Experiments List */}\n                <div className=\"flex-1 p-4 space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-lg font-semibold\">Active Experiments</h3>\n                    <Button size=\"sm\">\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      New Experiment\n                    </Button>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    {mockExperiments.slice(0, 4).map((experiment) => (\n                      <Card key={experiment.id} className=\"hover:shadow-md transition-all duration-200\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-semibold\">{experiment.title}</h4>\n                              <p className=\"text-sm text-gray-600 mt-1\">{experiment.description}</p>\n                            </div>\n                            <Badge className={experiment.status === 'running' ? 'bg-green-100 text-green-800' : \n                                             experiment.status === 'completed' ? 'bg-blue-100 text-blue-800' :\n                                             experiment.status === 'paused' ? 'bg-yellow-100 text-yellow-800' : \n                                             'bg-gray-100 text-gray-800'}>\n                              {experiment.status}\n                            </Badge>\n                          </div>\n\n                          <div className=\"grid grid-cols-4 gap-4 mb-3 text-sm\">\n                            <div>\n                              <span className=\"text-gray-500\">Owner:</span>\n                              <div className=\"font-medium\">{experiment.owner}</div>\n                            </div>\n                            <div>\n                              <span className=\"text-gray-500\">Progress:</span>\n                              <div className=\"font-medium\">{experiment.progress}%</div>\n                            </div>\n                            <div>\n                              <span className=\"text-gray-500\">Jobs:</span>\n                              <div className=\"font-medium\">{experiment.jobsCompleted}/{experiment.totalJobs}</div>\n                            </div>\n                            <div>\n                              <span className=\"text-gray-500\">Backend:</span>\n                              <div className=\"font-medium\">{experiment.currentBackend || 'N/A'}</div>\n                            </div>\n                          </div>\n\n                          {experiment.progress > 0 && (\n                            <div className=\"mb-3\">\n                              <Progress value={experiment.progress} className=\"h-2\" />\n                            </div>\n                          )}\n\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex flex-wrap gap-1\">\n                              {experiment.tags.map((tag, idx) => (\n                                <Badge key={idx} variant=\"secondary\" className=\"text-xs\">\n                                  {tag}\n                                </Badge>\n                              ))}\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <Button size=\"sm\" variant=\"outline\">\n                                <Eye className=\"h-4 w-4\" />\n                              </Button>\n                              {experiment.status === 'running' && (\n                                <Button size=\"sm\" variant=\"outline\">\n                                  <Pause className=\"h-4 w-4\" />\n                                </Button>\n                              )}\n                              {experiment.status === 'paused' && (\n                                <Button size=\"sm\" variant=\"outline\">\n                                  <Play className=\"h-4 w-4\" />\n                                </Button>\n                              )}\n                              <Button size=\"sm\" variant=\"outline\">\n                                <Edit3 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </div>\n              </div>\n\n              {/* Sidebar - Experiment Details & Insights */}\n              <div className=\"w-80 space-y-4\">\n                {/* Experiment Insights */}\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm flex items-center gap-2\">\n                      <Lightbulb className=\"h-4 w-4 text-yellow-500\" />\n                      AI Experiment Insights\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                      <div className=\"text-sm font-medium text-blue-900 dark:text-blue-100\">\n                        Hypothesis Validation\n                      </div>\n                      <div className=\"text-xs text-blue-700 dark:text-blue-300 mt-1\">\n                        VQE experiment shows 15% improvement - hypothesis confirmed\n                      </div>\n                    </div>\n                    <div className=\"p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                      <div className=\"text-sm font-medium text-green-900 dark:text-green-100\">\n                        Optimization Suggestion\n                      </div>\n                      <div className=\"text-xs text-green-700 dark:text-green-300 mt-1\">\n                        Increase ansatz depth to 16 layers for better convergence\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Quick Stats */}\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm\">Experiment Statistics</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                      <div className=\"text-center\">\n                        <div className=\"font-bold text-green-600\">95%</div>\n                        <div className=\"text-gray-500\">Success Rate</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"font-bold text-blue-600\">8.5h</div>\n                        <div className=\"text-gray-500\">Avg Runtime</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"font-bold text-purple-600\">24</div>\n                        <div className=\"text-gray-500\">Total Circuits</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"font-bold text-orange-600\">341</div>\n                        <div className=\"text-gray-500\">Jobs Run</div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Recent Activity */}\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm\">Recent Activity</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-2\">\n                    <div className=\"text-xs space-y-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                        <span>VQE experiment completed</span>\n                        <span className=\"text-gray-500 ml-auto\">5m ago</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                        <span>New QAOA experiment started</span>\n                        <span className=\"text-gray-500 ml-auto\">12m ago</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-2 h-2 bg-yellow-500 rounded-full\"></div>\n                        <span>Error mitigation paused</span>\n                        <span className=\"text-gray-500 ml-auto\">1h ago</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":334733},"client/src/components/ai/ai-assistant.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Send, Bot, X, Loader2, Sparkles, MessageCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Card } from \"@/components/ui/card\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface Message {\n  id: string;\n  content: string;\n  isUser: boolean;\n  timestamp: Date;\n}\n\ninterface AIAssistantProps {\n  className?: string;\n}\n\nexport function AIAssistant({ className = \"\" }: AIAssistantProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: \"welcome\",\n      content: \"Hi! I'm your AI assistant. I can help you with quantum computing questions, dashboard features, or general inquiries. How can I assist you today?\",\n      isUser: false,\n      timestamp: new Date(),\n    },\n  ]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  useEffect(() => {\n    if (isOpen && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isOpen]);\n\n  const chatMutation = useMutation({\n    mutationFn: async (message: string) => {\n      const response = await apiRequest(\"POST\", \"/api/ai/chat\", { message });\n      return await response.json();\n    },\n    onSuccess: (data: any) => {\n      const aiMessage: Message = {\n        id: Date.now().toString() + \"_ai\",\n        content: data.response,\n        isUser: false,\n        timestamp: new Date(),\n      };\n      setMessages((prev) => [...prev, aiMessage]);\n    },\n    onError: (error) => {\n      console.error(\"Chat error:\", error);\n      const errorMessage: Message = {\n        id: Date.now().toString() + \"_error\",\n        content: \"I'm sorry, I'm experiencing some technical difficulties. Please try again in a moment.\",\n        isUser: false,\n        timestamp: new Date(),\n      };\n      setMessages((prev) => [...prev, errorMessage]);\n    },\n  });\n\n  const handleSendMessage = async () => {\n    if (!inputMessage.trim() || chatMutation.isPending) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      content: inputMessage,\n      isUser: true,\n      timestamp: new Date(),\n    };\n\n    setMessages((prev) => [...prev, userMessage]);\n    setInputMessage(\"\");\n    chatMutation.mutate(inputMessage);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <>\n      {/* Floating AI Button */}\n      <motion.div\n        className={`fixed bottom-6 right-6 z-50 ${className}`}\n        whileHover={{ scale: 1.1 }}\n        whileTap={{ scale: 0.95 }}\n      >\n        <Button\n          onClick={() => setIsOpen(!isOpen)}\n          size=\"lg\"\n          className=\"relative h-14 w-14 rounded-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 shadow-lg hover:shadow-xl transition-all duration-300 border-0 group\"\n          data-testid=\"button-ai-assistant\"\n        >\n          <AnimatePresence mode=\"wait\">\n            {isOpen ? (\n              <motion.div\n                key=\"close\"\n                initial={{ rotate: -90, opacity: 0 }}\n                animate={{ rotate: 0, opacity: 1 }}\n                exit={{ rotate: 90, opacity: 0 }}\n                transition={{ duration: 0.2 }}\n              >\n                <X className=\"h-6 w-6 text-white\" />\n              </motion.div>\n            ) : (\n              <motion.div\n                key=\"bot\"\n                initial={{ rotate: 90, opacity: 0 }}\n                animate={{ rotate: 0, opacity: 1 }}\n                exit={{ rotate: -90, opacity: 0 }}\n                transition={{ duration: 0.2 }}\n                className=\"relative\"\n              >\n                <Bot className=\"h-6 w-6 text-white\" />\n                <motion.div\n                  className=\"absolute -top-1 -right-1 h-3 w-3 bg-green-400 rounded-full\"\n                  animate={{ scale: [1, 1.2, 1] }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                />\n              </motion.div>\n            )}\n          </AnimatePresence>\n          \n          {/* Pulse animation */}\n          <motion.div\n            className=\"absolute inset-0 rounded-full bg-gradient-to-r from-blue-400 to-purple-400 opacity-75\"\n            animate={{ scale: [1, 1.4, 1] }}\n            transition={{ duration: 2, repeat: Infinity, repeatDelay: 1 }}\n          />\n          \n          {/* Sparkle effects */}\n          <motion.div\n            className=\"absolute -top-1 -left-1 text-yellow-300\"\n            animate={{ \n              rotate: [0, 180, 360],\n              scale: [0.8, 1.2, 0.8]\n            }}\n            transition={{ duration: 3, repeat: Infinity }}\n          >\n            <Sparkles className=\"h-4 w-4\" />\n          </motion.div>\n        </Button>\n      </motion.div>\n\n      {/* AI Chat Sidebar */}\n      <AnimatePresence>\n        {isOpen && (\n          <>\n            {/* Backdrop */}\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              className=\"fixed inset-0 bg-black bg-opacity-20 z-40 md:hidden\"\n              onClick={() => setIsOpen(false)}\n            />\n\n            {/* Sidebar */}\n            <motion.div\n              initial={{ x: \"100%\", opacity: 0 }}\n              animate={{ x: 0, opacity: 1 }}\n              exit={{ x: \"100%\", opacity: 0 }}\n              transition={{ type: \"spring\", damping: 20, stiffness: 200 }}\n              className=\"fixed right-0 top-0 h-full w-full md:w-96 bg-white dark:bg-gray-900 shadow-2xl z-50 border-l border-gray-200 dark:border-gray-700\"\n            >\n              <Card className=\"h-full flex flex-col border-0 rounded-none\">\n                {/* Header */}\n                <div className=\"flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"relative\">\n                      <div className=\"h-10 w-10 rounded-full bg-gradient-to-r from-blue-600 to-purple-600 flex items-center justify-center\">\n                        <Bot className=\"h-6 w-6 text-white\" />\n                      </div>\n                      <motion.div\n                        className=\"absolute -bottom-1 -right-1 h-4 w-4 bg-green-400 rounded-full border-2 border-white dark:border-gray-900\"\n                        animate={{ scale: [1, 1.1, 1] }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                      />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900 dark:text-white\">AI Assistant</h3>\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400\">Always here to help</p>\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setIsOpen(false)}\n                    className=\"h-8 w-8 p-0 hover:bg-gray-100 dark:hover:bg-gray-800\"\n                    data-testid=\"button-close-ai\"\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n\n                {/* Messages */}\n                <ScrollArea className=\"flex-1 p-4\">\n                  <div className=\"space-y-4\">\n                    {messages.map((message) => (\n                      <motion.div\n                        key={message.id}\n                        initial={{ opacity: 0, y: 20 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        transition={{ duration: 0.3 }}\n                        className={`flex ${message.isUser ? \"justify-end\" : \"justify-start\"}`}\n                      >\n                        <div\n                          className={`max-w-[80%] rounded-2xl px-4 py-2 ${\n                            message.isUser\n                              ? \"bg-gradient-to-r from-blue-600 to-purple-600 text-white\"\n                              : \"bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white\"\n                          }`}\n                        >\n                          {!message.isUser && (\n                            <div className=\"flex items-center space-x-2 mb-1\">\n                              <MessageCircle className=\"h-3 w-3 text-blue-500\" />\n                              <span className=\"text-xs text-gray-500 dark:text-gray-400\">AI Assistant</span>\n                            </div>\n                          )}\n                          <p className=\"text-sm leading-relaxed whitespace-pre-wrap\">\n                            {message.content}\n                          </p>\n                        </div>\n                      </motion.div>\n                    ))}\n                    \n                    {chatMutation.isPending && (\n                      <motion.div\n                        initial={{ opacity: 0, y: 20 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        className=\"flex justify-start\"\n                      >\n                        <div className=\"bg-gray-100 dark:bg-gray-800 rounded-2xl px-4 py-2\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Loader2 className=\"h-4 w-4 animate-spin text-blue-500\" />\n                            <span className=\"text-sm text-gray-500 dark:text-gray-400\">Thinking...</span>\n                          </div>\n                        </div>\n                      </motion.div>\n                    )}\n                  </div>\n                  <div ref={messagesEndRef} />\n                </ScrollArea>\n\n                {/* Input */}\n                <div className=\"border-t border-gray-200 dark:border-gray-700 p-4 bg-gray-50 dark:bg-gray-800/50\">\n                  <div className=\"flex space-x-2\">\n                    <Input\n                      ref={inputRef}\n                      value={inputMessage}\n                      onChange={(e) => setInputMessage(e.target.value)}\n                      onKeyPress={handleKeyPress}\n                      placeholder=\"Ask me anything...\"\n                      className=\"flex-1 border-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-400\"\n                      disabled={chatMutation.isPending}\n                      data-testid=\"input-ai-message\"\n                    />\n                    <Button\n                      onClick={handleSendMessage}\n                      disabled={!inputMessage.trim() || chatMutation.isPending}\n                      className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 border-0\"\n                      data-testid=\"button-send-message\"\n                    >\n                      {chatMutation.isPending ? (\n                        <Loader2 className=\"h-4 w-4 animate-spin\" />\n                      ) : (\n                        <Send className=\"h-4 w-4\" />\n                      )}\n                    </Button>\n                  </div>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-2 text-center\">\n                    Press Enter to send • Ask about quantum computing, dashboard features, or anything else\n                  </p>\n                </div>\n              </Card>\n            </motion.div>\n          </>\n        )}\n      </AnimatePresence>\n    </>\n  );\n}","size_bytes":12027},"client/src/components/ai/ai-failure-analysis.tsx":{"content":"import { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { AlertTriangle, Bot, Lightbulb, Wrench, Shield, RefreshCw, ChevronRight, BookOpen, Zap } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { useMutation } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface FailureAnalysis {\n  possibleCauses: string[];\n  suggestions: string[];\n  circuitImprovements: string[];\n  preventionTips: string[];\n}\n\ninterface AIFailureAnalysisProps {\n  jobId: string;\n  jobName?: string;\n  error?: string;\n  onRetryWithSuggestion?: (suggestion: string) => void;\n}\n\nexport function AIFailureAnalysis({ jobId, jobName, error, onRetryWithSuggestion }: AIFailureAnalysisProps) {\n  const [analysis, setAnalysis] = useState<FailureAnalysis | null>(null);\n  const [showDetailedInstructions, setShowDetailedInstructions] = useState(false);\n  const [detailedInstructions, setDetailedInstructions] = useState<string>('');\n\n  const analyzeMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/ai/analyze-failure/${jobId}`, {\n        method: 'POST'\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setAnalysis(data);\n    }\n  });\n\n  const handleAnalyze = () => {\n    analyzeMutation.mutate();\n  };\n\n  // Get circuit improvement instructions\n  const getCircuitInstructionsMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/ai/circuit-instructions/${jobId}`, {\n        method: 'POST'\n      });\n      const data = await response.json();\n      return data.instructions;\n    },\n    onSuccess: (instructions) => {\n      setDetailedInstructions(instructions);\n      setShowDetailedInstructions(true);\n    }\n  });\n\n  // Get guided circuit improvements\n  const getGuidedImprovementsMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/ai/guided-improvements/${jobId}`, {\n        method: 'POST'\n      });\n      return response.json();\n    },\n    onSuccess: (improvements) => {\n      // Apply guided improvements to the current analysis\n      if (analysis && improvements) {\n        setAnalysis({\n          ...analysis,\n          circuitImprovements: [...analysis.circuitImprovements, ...improvements]\n        });\n      }\n    }\n  });\n\n  return (\n    <Card className=\"bg-gradient-to-r from-red-50 to-orange-50 dark:from-red-900/20 dark:to-orange-900/20 border-red-200 dark:border-red-700\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"p-2 bg-gradient-to-r from-red-500 to-orange-500 rounded-lg\">\n            <AlertTriangle className=\"w-5 h-5 text-white\" />\n          </div>\n          <div>\n            <CardTitle className=\"text-lg\">AI Failure Analysis</CardTitle>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n              Get insights on why this job failed and how to fix it\n            </p>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {error && (\n          <Alert className=\"border-orange-200 bg-orange-50 dark:border-orange-700 dark:bg-orange-900/20\">\n            <AlertTriangle className=\"h-4 w-4 text-orange-600\" />\n            <AlertDescription className=\"text-sm text-orange-800 dark:text-orange-200\">\n              <strong>Error:</strong> {error}\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {!analysis ? (\n          <div className=\"text-center py-6\">\n            <Button \n              onClick={handleAnalyze}\n              disabled={analyzeMutation.isPending}\n              className=\"bg-gradient-to-r from-red-500 to-orange-500 hover:from-red-600 hover:to-orange-600\"\n              data-testid=\"button-analyze-failure\"\n            >\n              <Bot className=\"w-4 h-4 mr-2\" />\n              {analyzeMutation.isPending ? 'Analyzing...' : 'Analyze Failure'}\n            </Button>\n          </div>\n        ) : (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.3 }}\n            className=\"space-y-4\"\n          >\n            {/* Possible Causes */}\n            {analysis.possibleCauses.length > 0 && (\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-2\">\n                  <AlertTriangle className=\"w-4 h-4 text-red-500\" />\n                  <h4 className=\"font-semibold text-sm\">Possible Causes</h4>\n                </div>\n                <div className=\"space-y-2\">\n                  {analysis.possibleCauses.map((cause, index) => (\n                    <motion.div\n                      key={index}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                      className=\"flex items-start gap-3 p-3 bg-white/70 dark:bg-gray-800/70 rounded-lg border-l-4 border-red-300\"\n                    >\n                      <ChevronRight className=\"w-4 h-4 text-red-500 mt-0.5 flex-shrink-0\" />\n                      <span className=\"text-sm\">{cause}</span>\n                    </motion.div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            <Separator />\n\n            {/* Suggestions */}\n            {analysis.suggestions.length > 0 && (\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-2\">\n                  <Lightbulb className=\"w-4 h-4 text-yellow-500\" />\n                  <h4 className=\"font-semibold text-sm\">Recommended Solutions</h4>\n                </div>\n                <div className=\"space-y-2\">\n                  {analysis.suggestions.map((suggestion, index) => (\n                    <motion.div\n                      key={index}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1 + 0.3 }}\n                      className=\"flex items-start gap-3 p-3 bg-white/70 dark:bg-gray-800/70 rounded-lg border-l-4 border-yellow-300\"\n                    >\n                      <Lightbulb className=\"w-4 h-4 text-yellow-500 mt-0.5 flex-shrink-0\" />\n                      <div className=\"flex-1\">\n                        <span className=\"text-sm\">{suggestion}</span>\n                      </div>\n                      {onRetryWithSuggestion && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => onRetryWithSuggestion(suggestion)}\n                          className=\"text-xs px-2 py-1\"\n                          data-testid={`button-apply-suggestion-${index}`}\n                        >\n                          Try This\n                        </Button>\n                      )}\n                    </motion.div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            <Separator />\n\n            {/* Circuit Improvements */}\n            {analysis.circuitImprovements.length > 0 && (\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <Wrench className=\"w-4 h-4 text-blue-500\" />\n                    <h4 className=\"font-semibold text-sm\">Circuit Improvements</h4>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => getCircuitInstructionsMutation.mutate()}\n                      disabled={getCircuitInstructionsMutation.isPending}\n                      className=\"text-xs px-3 py-1 h-7\"\n                      data-testid=\"button-circuit-instructions\"\n                    >\n                      <BookOpen className=\"w-3 h-3 mr-1\" />\n                      {getCircuitInstructionsMutation.isPending ? 'Loading...' : 'Get Instructions'}\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => getGuidedImprovementsMutation.mutate()}\n                      disabled={getGuidedImprovementsMutation.isPending}\n                      className=\"text-xs px-3 py-1 h-7\"\n                      data-testid=\"button-guided-improvements\"\n                    >\n                      <Zap className=\"w-3 h-3 mr-1\" />\n                      {getGuidedImprovementsMutation.isPending ? 'Loading...' : 'Get AI Guide'}\n                    </Button>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  {analysis.circuitImprovements.map((improvement, index) => (\n                    <motion.div\n                      key={index}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1 + 0.6 }}\n                      className=\"flex items-start gap-3 p-3 bg-white/70 dark:bg-gray-800/70 rounded-lg border-l-4 border-blue-300\"\n                    >\n                      <Wrench className=\"w-4 h-4 text-blue-500 mt-0.5 flex-shrink-0\" />\n                      <span className=\"text-sm\">{improvement}</span>\n                    </motion.div>\n                  ))}\n                </div>\n\n                {/* Detailed Instructions Panel */}\n                {showDetailedInstructions && detailedInstructions && (\n                  <motion.div\n                    initial={{ opacity: 0, height: 0 }}\n                    animate={{ opacity: 1, height: 'auto' }}\n                    transition={{ duration: 0.3 }}\n                    className=\"mt-4 p-4 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-lg border border-blue-200 dark:border-blue-700\"\n                  >\n                    <div className=\"flex items-center gap-2 mb-3\">\n                      <BookOpen className=\"w-4 h-4 text-blue-600\" />\n                      <h5 className=\"font-semibold text-sm text-blue-800 dark:text-blue-200\">\n                        Detailed Circuit Instructions\n                      </h5>\n                    </div>\n                    <div className=\"text-sm text-blue-900 dark:text-blue-100 whitespace-pre-wrap\">\n                      {detailedInstructions}\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => setShowDetailedInstructions(false)}\n                      className=\"mt-3 text-xs\"\n                      data-testid=\"button-hide-instructions\"\n                    >\n                      Hide Instructions\n                    </Button>\n                  </motion.div>\n                )}\n              </div>\n            )}\n\n            {/* Prevention Tips */}\n            {analysis.preventionTips.length > 0 && (\n              <>\n                <Separator />\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2\">\n                    <Shield className=\"w-4 h-4 text-green-500\" />\n                    <h4 className=\"font-semibold text-sm\">Prevention Tips</h4>\n                  </div>\n                  <div className=\"space-y-2\">\n                    {analysis.preventionTips.map((tip, index) => (\n                      <motion.div\n                        key={index}\n                        initial={{ opacity: 0, x: -20 }}\n                        animate={{ opacity: 1, x: 0 }}\n                        transition={{ delay: index * 0.1 + 0.9 }}\n                        className=\"flex items-start gap-3 p-3 bg-white/70 dark:bg-gray-800/70 rounded-lg border-l-4 border-green-300\"\n                      >\n                        <Shield className=\"w-4 h-4 text-green-500 mt-0.5 flex-shrink-0\" />\n                        <span className=\"text-sm\">{tip}</span>\n                      </motion.div>\n                    ))}\n                  </div>\n                </div>\n              </>\n            )}\n\n            {/* Re-analyze button */}\n            <div className=\"pt-3\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={handleAnalyze}\n                disabled={analyzeMutation.isPending}\n                className=\"w-full\"\n                data-testid=\"button-reanalyze\"\n              >\n                <RefreshCw className=\"w-3 h-3 mr-2\" />\n                Re-analyze\n              </Button>\n            </div>\n          </motion.div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":13070},"client/src/components/ai/ai-job-assistant.tsx":{"content":"import { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Bot, Sparkles, Code, Lightbulb, Cpu, Clock, ChevronDown, ChevronUp, Wand2 } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Separator } from '@/components/ui/separator';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface AISuggestions {\n  circuitSuggestions: string[];\n  optimizationTips: string[];\n  backendRecommendations: string[];\n  estimatedRuntime: string;\n}\n\ninterface AIJobAssistantProps {\n  jobData: {\n    qubits: number;\n    shots: number;\n    backend: string;\n    program?: string;\n  };\n  onSuggestionApply: (suggestion: string) => void;\n  onCircuitGenerate: (code: string) => void;\n}\n\nexport function AIJobAssistant({ jobData, onSuggestionApply, onCircuitGenerate }: AIJobAssistantProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [isGeneratingCode, setIsGeneratingCode] = useState(false);\n  const [circuitDescription, setCircuitDescription] = useState('');\n\n  // Get AI suggestions based on current job configuration\n  const { data: suggestions, isLoading: loadingSuggestions, refetch } = useQuery<AISuggestions>({\n    queryKey: ['/api/ai/job-suggestions', jobData],\n    queryFn: async () => {\n      const response = await fetch('/api/ai/job-suggestions', {\n        method: 'POST',\n        body: JSON.stringify(jobData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n      return response.json();\n    },\n    enabled: jobData.qubits > 0 && jobData.shots > 0 && !!jobData.backend\n  });\n\n  // Generate circuit code mutation\n  const generateCircuitMutation = useMutation({\n    mutationFn: async (description: string) => {\n      const response = await fetch('/api/ai/generate-circuit', {\n        method: 'POST',\n        body: JSON.stringify({\n          description,\n          qubits: jobData.qubits\n        }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n      const data = await response.json();\n      return data.circuitCode;\n    },\n    onSuccess: (circuitCode) => {\n      onCircuitGenerate(circuitCode);\n      setCircuitDescription('');\n    }\n  });\n\n  const handleGenerateCircuit = () => {\n    if (circuitDescription.trim()) {\n      generateCircuitMutation.mutate(circuitDescription.trim());\n    }\n  };\n\n  const getRuntimeColor = (runtime: string) => {\n    switch (runtime.toLowerCase()) {\n      case 'very fast': return 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300';\n      case 'fast': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300';\n      case 'medium': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300';\n      case 'slow': return 'bg-orange-100 text-orange-800 dark:bg-orange-900/30 dark:text-orange-300';\n      case 'very slow': return 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-300';\n    }\n  };\n\n  if (!jobData.qubits || !jobData.shots || !jobData.backend) {\n    return (\n      <Card className=\"bg-gradient-to-r from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20 border-purple-200 dark:border-purple-700\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center gap-3 text-sm text-gray-600 dark:text-gray-400\">\n            <Bot className=\"w-5 h-5 text-purple-500\" />\n            <span>Fill in job details to get AI-powered suggestions and optimizations</span>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-gradient-to-r from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20 border-purple-200 dark:border-purple-700\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"p-2 bg-gradient-to-r from-purple-500 to-blue-500 rounded-lg\">\n              <Sparkles className=\"w-4 h-4 text-white\" />\n            </div>\n            <CardTitle className=\"text-lg\">AI Assistant</CardTitle>\n            <Badge variant=\"secondary\" className=\"bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300\">\n              Beta\n            </Badge>\n          </div>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\"\n            onClick={() => setIsExpanded(!isExpanded)}\n            data-testid=\"button-toggle-ai-assistant\"\n          >\n            {isExpanded ? <ChevronUp className=\"w-4 h-4\" /> : <ChevronDown className=\"w-4 h-4\" />}\n          </Button>\n        </div>\n      </CardHeader>\n\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ height: 0, opacity: 0 }}\n            animate={{ height: \"auto\", opacity: 1 }}\n            exit={{ height: 0, opacity: 0 }}\n            transition={{ duration: 0.3 }}\n          >\n            <CardContent className=\"space-y-4\">\n              {/* Circuit Code Generator */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-2\">\n                  <Code className=\"w-4 h-4 text-blue-500\" />\n                  <h4 className=\"font-medium\">Generate Circuit Code</h4>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"circuit-description\">Describe your quantum circuit:</Label>\n                  <Textarea\n                    id=\"circuit-description\"\n                    placeholder=\"e.g., Create a Bell state, implement Grover's algorithm, quantum teleportation...\"\n                    value={circuitDescription}\n                    onChange={(e) => setCircuitDescription(e.target.value)}\n                    className=\"min-h-[80px]\"\n                    data-testid=\"textarea-circuit-description\"\n                  />\n                  <Button \n                    onClick={handleGenerateCircuit}\n                    disabled={!circuitDescription.trim() || generateCircuitMutation.isPending}\n                    className=\"bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600\"\n                    data-testid=\"button-generate-circuit\"\n                  >\n                    <Wand2 className=\"w-4 h-4 mr-2\" />\n                    {generateCircuitMutation.isPending ? 'Generating...' : 'Generate Code'}\n                  </Button>\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* AI Suggestions */}\n              {loadingSuggestions ? (\n                <div className=\"flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400\">\n                  <Bot className=\"w-4 h-4 animate-pulse\" />\n                  <span>Analyzing your job configuration...</span>\n                </div>\n              ) : suggestions ? (\n                <div className=\"space-y-4\">\n                  {/* Runtime Estimate */}\n                  <div className=\"flex items-center gap-3\">\n                    <Clock className=\"w-4 h-4 text-gray-500\" />\n                    <span className=\"text-sm font-medium\">Estimated Runtime:</span>\n                    <Badge className={getRuntimeColor(suggestions.estimatedRuntime)}>\n                      {suggestions.estimatedRuntime}\n                    </Badge>\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\"\n                      onClick={() => refetch()}\n                      className=\"ml-auto\"\n                      data-testid=\"button-refresh-suggestions\"\n                    >\n                      <Sparkles className=\"w-3 h-3\" />\n                      Refresh\n                    </Button>\n                  </div>\n\n                  {/* Circuit Suggestions */}\n                  {suggestions.circuitSuggestions.length > 0 && (\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <Code className=\"w-4 h-4 text-green-500\" />\n                        <h4 className=\"font-medium text-sm\">Circuit Improvements</h4>\n                      </div>\n                      <div className=\"space-y-1\">\n                        {suggestions.circuitSuggestions.map((suggestion, index) => (\n                          <div \n                            key={index} \n                            className=\"flex items-start gap-2 p-2 bg-white/50 dark:bg-gray-800/50 rounded-lg text-sm\"\n                          >\n                            <Lightbulb className=\"w-3 h-3 text-yellow-500 mt-0.5 flex-shrink-0\" />\n                            <span className=\"flex-1\">{suggestion}</span>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              onClick={() => onSuggestionApply(suggestion)}\n                              className=\"text-xs px-2 py-1\"\n                              data-testid={`button-apply-circuit-suggestion-${index}`}\n                            >\n                              Apply\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Optimization Tips */}\n                  {suggestions.optimizationTips.length > 0 && (\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <Cpu className=\"w-4 h-4 text-blue-500\" />\n                        <h4 className=\"font-medium text-sm\">Optimization Tips</h4>\n                      </div>\n                      <div className=\"space-y-1\">\n                        {suggestions.optimizationTips.map((tip, index) => (\n                          <div \n                            key={index} \n                            className=\"flex items-start gap-2 p-2 bg-white/50 dark:bg-gray-800/50 rounded-lg text-sm\"\n                          >\n                            <Sparkles className=\"w-3 h-3 text-purple-500 mt-0.5 flex-shrink-0\" />\n                            <span>{tip}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Backend Recommendations */}\n                  {suggestions.backendRecommendations.length > 0 && (\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <Cpu className=\"w-4 h-4 text-orange-500\" />\n                        <h4 className=\"font-medium text-sm\">Backend Recommendations</h4>\n                      </div>\n                      <div className=\"space-y-1\">\n                        {suggestions.backendRecommendations.map((backend, index) => (\n                          <div \n                            key={index} \n                            className=\"flex items-center gap-2 p-2 bg-white/50 dark:bg-gray-800/50 rounded-lg text-sm\"\n                          >\n                            <Cpu className=\"w-3 h-3 text-orange-500 flex-shrink-0\" />\n                            <span className=\"flex-1\">{backend}</span>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              onClick={() => onSuggestionApply(backend)}\n                              className=\"text-xs px-2 py-1\"\n                              data-testid={`button-apply-backend-suggestion-${index}`}\n                            >\n                              Consider\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ) : (\n                <div className=\"text-sm text-gray-500 dark:text-gray-400 text-center py-4\">\n                  Unable to generate suggestions. Please check your job configuration.\n                </div>\n              )}\n            </CardContent>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </Card>\n  );\n}","size_bytes":12481},"client/src/components/dashboard/active-sessions.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Plus } from \"lucide-react\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useSessions } from \"@/hooks/use-jobs\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nconst sessionVariants = {\n  hidden: { opacity: 0, x: -20 },\n  visible: (i: number) => ({\n    opacity: 1,\n    x: 0,\n    transition: {\n      delay: i * 0.1,\n      duration: 0.5,\n    },\n  }),\n  hover: {\n    scale: 1.02,\n    transition: { duration: 0.2 },\n  },\n};\n\ninterface ActiveSessionsProps {\n  onOpenSessionForm?: () => void;\n}\n\nexport function ActiveSessions({ onOpenSessionForm }: ActiveSessionsProps) {\n  const { data: sessions = [], isLoading } = useSessions();\n\n  const activeSessions = sessions.filter(session => session.status === \"active\");\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-gray-200/50 dark:border-gray-700/50\">\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse space-y-3\">\n            {Array.from({ length: 2 }).map((_, i) => (\n              <div key={i} className=\"p-4 bg-gray-200 dark:bg-gray-700 rounded-lg\">\n                <div className=\"h-4 bg-gray-300 dark:bg-gray-600 rounded w-3/4 mb-2\"></div>\n                <div className=\"h-3 bg-gray-300 dark:bg-gray-600 rounded w-1/2\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-gray-200/50 dark:border-gray-700/50\">\n      <CardHeader>\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Active Sessions</h3>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        {activeSessions.length === 0 ? (\n          <div className=\"text-center py-4\">\n            <p className=\"text-gray-500 dark:text-gray-400 text-sm\">No active sessions</p>\n          </div>\n        ) : (\n          activeSessions.map((session, index) => (\n            <motion.div\n              key={session.id}\n              custom={index}\n              variants={sessionVariants}\n              initial=\"hidden\"\n              animate=\"visible\"\n              whileHover=\"hover\"\n              className=\"p-4 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 border border-blue-200 dark:border-blue-700 rounded-lg cursor-pointer group\"\n              data-testid={`session-${session.id}`}\n            >\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"font-medium text-gray-900 dark:text-white text-sm\">{session.name}</div>\n                <motion.div \n                  className=\"w-2 h-2 bg-green-500 rounded-full\"\n                  animate={{ opacity: [1, 0.3, 1] }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                />\n              </div>\n              <div className=\"text-xs text-gray-600 dark:text-gray-400 mb-1\">\n                {session.jobCount} jobs • Started {formatDistanceToNow(new Date(session.createdAt), { addSuffix: true })}\n              </div>\n              <div className=\"text-xs text-gray-500 dark:text-gray-500\">\n                Last activity: {formatDistanceToNow(new Date(session.lastActivity), { addSuffix: true })}\n              </div>\n            </motion.div>\n          ))\n        )}\n\n        <Button \n          variant=\"outline\"\n          className=\"w-full border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-700\"\n          onClick={onOpenSessionForm}\n          data-testid=\"button-new-session\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          New Session\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3814},"client/src/components/dashboard/all-backends-view.tsx":{"content":"\nimport { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { ArrowLeft, Plus, Eye, Square, Download, RotateCcw } from \"lucide-react\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useJobs, useBackends, useUpdateJobStatus } from \"@/hooks/use-jobs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { JobDetailsModal } from \"./job-details-modal\";\nimport type { Job, JobStatus, BackendStatus } from \"@shared/schema\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nconst statusColors: Record<JobStatus, string> = {\n  queued: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400\",\n  running: \"bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400\",\n  done: \"bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400\",\n  failed: \"bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400\",\n  cancelled: \"bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400\",\n};\n\nconst backendStatusColors: Record<BackendStatus, string> = {\n  available: \"bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300\",\n  busy: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-300\",\n  maintenance: \"bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300\",\n  offline: \"bg-gray-100 text-gray-800 dark:bg-gray-900/50 dark:text-gray-300\",\n};\n\ninterface AllBackendsViewProps {\n  onBack: () => void;\n}\n\nexport function AllBackendsView({ onBack }: AllBackendsViewProps) {\n  const [selectedBackend, setSelectedBackend] = useState<string>(\"all\");\n  const [selectedJob, setSelectedJob] = useState<Job | null>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  \n  const { data: jobsData, isLoading: jobsLoading } = useJobs(currentPage, 20);\n  const { data: backends = [], isLoading: backendsLoading } = useBackends();\n  const updateJobStatus = useUpdateJobStatus();\n  const { toast } = useToast();\n\n  const jobs = jobsData?.jobs || [];\n  const pagination = jobsData?.pagination;\n\n  // Filter jobs by selected backend\n  const filteredJobs = jobs.filter(job => \n    selectedBackend === \"all\" || job.backend === selectedBackend\n  );\n\n  const handleStatusUpdate = async (jobId: string, status: JobStatus) => {\n    try {\n      await updateJobStatus.mutateAsync({ id: jobId, status });\n      toast({\n        title: \"Job updated\",\n        description: `Job ${jobId} status changed to ${status}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update job status\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const formatDuration = (duration: number | null) => {\n    if (!duration) return \"-\";\n    const minutes = Math.floor(duration / 60);\n    const seconds = duration % 60;\n    return `${minutes}:${seconds.toString().padStart(2, \"0\")}`;\n  };\n\n  if (jobsLoading || backendsLoading) {\n    return (\n      <Card className=\"bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-gray-200/50 dark:border-gray-700/50\">\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            {Array.from({ length: 8 }).map((_, i) => (\n              <div key={i} className=\"h-12 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card className=\"bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-gray-200/50 dark:border-gray-700/50\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={onBack}\n                className=\"hover:bg-gray-100 dark:hover:bg-gray-700\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n              </Button>\n              <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">All Backends</h2>\n            </div>\n            <Select value={selectedBackend} onValueChange={setSelectedBackend}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Filter by backend\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Backends</SelectItem>\n                {backends.map(backend => (\n                  <SelectItem key={backend.id} value={backend.id}>\n                    {backend.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Backends Status Overview */}\n      <Card className=\"bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-gray-200/50 dark:border-gray-700/50\">\n        <CardHeader>\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Backend Status Overview</h3>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {backends.map((backend, index) => (\n              <motion.div\n                key={backend.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: index * 0.1 }}\n                className=\"p-4 border rounded-lg hover:shadow-md transition-shadow\"\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h4 className=\"font-medium text-gray-900 dark:text-white\">{backend.name}</h4>\n                  <Badge className={backendStatusColors[backend.status as BackendStatus]}>\n                    {backend.status.charAt(0).toUpperCase() + backend.status.slice(1)}\n                  </Badge>\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400 space-y-1\">\n                  <p>Queue: {backend.queueLength} jobs</p>\n                  <p>Qubits: {backend.qubits}</p>\n                  <p>Uptime: {backend.uptime}</p>\n                  {backend.averageWaitTime && (\n                    <p>Avg wait: {Math.floor(backend.averageWaitTime / 60)}m</p>\n                  )}\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Jobs Table */}\n      <Card className=\"bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-gray-200/50 dark:border-gray-700/50\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n              All Jobs {selectedBackend !== \"all\" && `(${backends.find(b => b.id === selectedBackend)?.name})`}\n            </h3>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              {filteredJobs.length} jobs found\n            </p>\n          </div>\n        </CardHeader>\n        <div className=\"overflow-x-auto\">\n          <Table>\n            <TableHeader className=\"bg-gray-50 dark:bg-gray-900/50\">\n              <TableRow>\n                <TableHead>Job ID</TableHead>\n                <TableHead>Backend</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Queue Position</TableHead>\n                <TableHead>Submitted</TableHead>\n                <TableHead>Duration</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              <AnimatePresence>\n                {filteredJobs.map((job, index) => (\n                  <motion.tr\n                    key={job.id}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    exit={{ opacity: 0, x: 20 }}\n                    transition={{ delay: index * 0.05 }}\n                    className=\"hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors duration-150\"\n                  >\n                    <TableCell className=\"font-mono text-sm\">{job.id}</TableCell>\n                    <TableCell>{job.backend}</TableCell>\n                    <TableCell>\n                      <Badge className={statusColors[job.status as JobStatus]}>\n                        <motion.div \n                          className=\"w-2 h-2 rounded-full mr-1.5\"\n                          animate={job.status === \"running\" ? { opacity: [1, 0.3, 1] } : {}}\n                          transition={{ duration: 2, repeat: Infinity }}\n                          style={{\n                            backgroundColor: job.status === \"running\" ? \"#10b981\" : \n                                           job.status === \"queued\" ? \"#f59e0b\" :\n                                           job.status === \"done\" ? \"#3b82f6\" :\n                                           job.status === \"failed\" ? \"#ef4444\" : \"#6b7280\"\n                          }}\n                        />\n                        {job.status.charAt(0).toUpperCase() + job.status.slice(1)}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      {job.queuePosition ? `#${job.queuePosition}` : \"-\"}\n                    </TableCell>\n                    <TableCell className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      {formatDistanceToNow(new Date(job.submissionTime), { addSuffix: true })}\n                    </TableCell>\n                    <TableCell className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      {formatDuration(job.duration)}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"text-blue-600 hover:text-blue-700\"\n                          onClick={() => setSelectedJob(job)}\n                        >\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                        {job.status === \"running\" && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"text-red-500 hover:text-red-600\"\n                            onClick={() => handleStatusUpdate(job.id, \"cancelled\")}\n                          >\n                            <Square className=\"w-4 h-4\" />\n                          </Button>\n                        )}\n                        {job.status === \"done\" && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"text-green-500 hover:text-green-600\"\n                          >\n                            <Download className=\"w-4 h-4\" />\n                          </Button>\n                        )}\n                        {job.status === \"failed\" && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"text-yellow-500 hover:text-yellow-600\"\n                            onClick={() => handleStatusUpdate(job.id, \"queued\")}\n                          >\n                            <RotateCcw className=\"w-4 h-4\" />\n                          </Button>\n                        )}\n                      </div>\n                    </TableCell>\n                  </motion.tr>\n                ))}\n              </AnimatePresence>\n            </TableBody>\n          </Table>\n        </div>\n\n        {/* Pagination */}\n        {pagination && (\n          <div className=\"px-6 py-3 border-t border-gray-200 dark:border-gray-700\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Showing {((pagination.currentPage - 1) * pagination.limit) + 1} to {Math.min(pagination.currentPage * pagination.limit, pagination.totalJobs)} of {pagination.totalJobs} jobs\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  disabled={pagination.currentPage === 1}\n                  onClick={() => setCurrentPage(pagination.currentPage - 1)}\n                >\n                  Previous\n                </Button>\n                \n                {Array.from({ length: Math.min(5, pagination.totalPages) }, (_, i) => {\n                  let pageNum;\n                  if (pagination.totalPages <= 5) {\n                    pageNum = i + 1;\n                  } else if (pagination.currentPage <= 3) {\n                    pageNum = i + 1;\n                  } else if (pagination.currentPage >= pagination.totalPages - 2) {\n                    pageNum = pagination.totalPages - 4 + i;\n                  } else {\n                    pageNum = pagination.currentPage - 2 + i;\n                  }\n                  \n                  return (\n                    <Button\n                      key={pageNum}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className={pagination.currentPage === pageNum ? \"bg-blue-600 text-white\" : \"\"}\n                      onClick={() => setCurrentPage(pageNum)}\n                    >\n                      {pageNum}\n                    </Button>\n                  );\n                })}\n                \n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  disabled={pagination.currentPage === pagination.totalPages}\n                  onClick={() => setCurrentPage(pagination.currentPage + 1)}\n                >\n                  Next\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </Card>\n\n      {/* Job Details Modal */}\n      <AnimatePresence>\n        {selectedJob && (\n          <JobDetailsModal \n            job={selectedJob} \n            onClose={() => setSelectedJob(null)} \n          />\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n","size_bytes":14496},"client/src/components/dashboard/analytics-charts.tsx":{"content":"\nimport { motion } from \"framer-motion\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { \n  LineChart, \n  Line, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  ResponsiveContainer, \n  PieChart, \n  Pie, \n  Cell, \n  BarChart, \n  Bar, \n  Area, \n  AreaChart,\n  RadialBarChart,\n  RadialBar,\n  Legend\n} from \"recharts\";\nimport { useJobStats, useJobTrends, useJobs } from \"@/hooks/use-jobs\";\nimport { TrendingUp, Activity, CheckCircle, XCircle, Clock, Zap, BarChart3 } from \"lucide-react\";\n\nconst COLORS = {\n  done: \"#10b981\",\n  running: \"#3b82f6\", \n  queued: \"#f59e0b\",\n  failed: \"#ef4444\",\n  cancelled: \"#6b7280\"\n};\n\nconst chartVariants = {\n  hidden: { opacity: 0, scale: 0.8 },\n  visible: {\n    opacity: 1,\n    scale: 1,\n    transition: {\n      duration: 0.5,\n      ease: \"easeOut\",\n    },\n  },\n};\n\nconst CustomTooltip = ({ active, payload, label }: any) => {\n  if (active && payload && payload.length) {\n    return (\n      <div className=\"bg-white dark:bg-gray-800 p-3 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700\">\n        <p className=\"text-sm font-medium text-gray-900 dark:text-white\">{label}</p>\n        {payload.map((entry: any, index: number) => (\n          <p key={index} className=\"text-sm\" style={{ color: entry.color }}>\n            {entry.name}: {entry.value}\n          </p>\n        ))}\n      </div>\n    );\n  }\n  return null;\n};\n\nexport function AnalyticsCharts() {\n  const { data: stats, isLoading: statsLoading } = useJobStats();\n  const { data: trends, isLoading: trendsLoading } = useJobTrends();\n  const { data: jobsData } = useJobs(1, 100);\n  const jobs = jobsData?.jobs || [];\n\n  // Prepare comprehensive status data\n  const statusData = [\n    { \n      name: \"Completed\", \n      value: jobs.filter(j => j.status === \"done\").length,\n      color: COLORS.done,\n      icon: CheckCircle\n    },\n    { \n      name: \"Running\", \n      value: jobs.filter(j => j.status === \"running\").length,\n      color: COLORS.running,\n      icon: Zap\n    },\n    { \n      name: \"Queued\", \n      value: jobs.filter(j => j.status === \"queued\").length,\n      color: COLORS.queued,\n      icon: Clock\n    },\n    { \n      name: \"Failed\", \n      value: jobs.filter(j => j.status === \"failed\").length,\n      color: COLORS.failed,\n      icon: XCircle\n    },\n    { \n      name: \"Cancelled\", \n      value: jobs.filter(j => j.status === \"cancelled\").length,\n      color: COLORS.cancelled,\n      icon: Activity\n    },\n  ].filter(item => item.value > 0);\n\n  // Success rate data for radial chart\n  const totalJobs = jobs.length;\n  const successfulJobs = jobs.filter(j => j.status === \"done\").length;\n  const successRate = totalJobs > 0 ? Math.round((successfulJobs / totalJobs) * 100) : 0;\n\n  const successRateData = [\n    {\n      name: \"Success Rate\",\n      value: successRate,\n      fill: successRate >= 80 ? \"#10b981\" : successRate >= 60 ? \"#f59e0b\" : \"#ef4444\"\n    }\n  ];\n\n  // Job performance over time data\n  const performanceData = trends?.map(trend => ({\n    ...trend,\n    successRate: Math.round(Math.random() * 100), // Mock data - replace with real calculation\n    efficiency: Math.round(Math.random() * 100), // Mock data - replace with real calculation\n  })) || [];\n\n  if (statsLoading || trendsLoading) {\n    return (\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n        {Array.from({ length: 6 }).map((_, i) => (\n          <Card key={i} className=\"bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-gray-200/50 dark:border-gray-700/50\">\n            <CardContent className=\"p-6\">\n              <div className=\"animate-pulse\">\n                <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/2 mb-4\"></div>\n                <div className=\"h-64 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n      {/* Job Status Distribution - Enhanced Pie Chart */}\n      <motion.div\n        variants={chartVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n        className=\"lg:col-span-1\"\n      >\n        <Card className=\"bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-gray-200/50 dark:border-gray-700/50 hover:shadow-lg transition-shadow\">\n          <CardHeader className=\"pb-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Activity className=\"w-5 h-5 text-blue-500\" />\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Job Distribution</h3>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\" data-testid=\"chart-jobs-by-status\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <PieChart>\n                  <Pie\n                    data={statusData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    innerRadius={50}\n                    outerRadius={90}\n                    paddingAngle={3}\n                    dataKey=\"value\"\n                  >\n                    {statusData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <Tooltip content={<CustomTooltip />} />\n                  <Legend />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n            <div className=\"grid grid-cols-2 gap-2 mt-4\">\n              {statusData.map((entry, index) => {\n                const IconComponent = entry.icon;\n                return (\n                  <div key={entry.name} className=\"flex items-center space-x-2 p-2 rounded-lg bg-gray-50 dark:bg-gray-900/50\">\n                    <IconComponent className=\"w-4 h-4\" style={{ color: entry.color }} />\n                    <span className=\"text-xs font-medium text-gray-700 dark:text-gray-300\">\n                      {entry.name}\n                    </span>\n                    <span className=\"text-xs font-bold\" style={{ color: entry.color }}>\n                      {entry.value}\n                    </span>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n\n      {/* Success Rate - Radial Chart */}\n      <motion.div\n        variants={chartVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n        transition={{ delay: 0.1 }}\n      >\n        <Card className=\"bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-gray-200/50 dark:border-gray-700/50 hover:shadow-lg transition-shadow\">\n          <CardHeader className=\"pb-4\">\n            <div className=\"flex items-center space-x-2\">\n              <TrendingUp className=\"w-5 h-5 text-green-500\" />\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Success Rate</h3>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64 flex items-center justify-center\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <RadialBarChart\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  innerRadius=\"60%\"\n                  outerRadius=\"90%\"\n                  data={successRateData}\n                  startAngle={90}\n                  endAngle={-270}\n                >\n                  <RadialBar\n                    dataKey=\"value\"\n                    cornerRadius={10}\n                    fill={successRateData[0].fill}\n                  />\n                  <text\n                    x=\"50%\"\n                    y=\"50%\"\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"middle\"\n                    className=\"text-3xl font-bold fill-gray-900 dark:fill-white\"\n                  >\n                    {successRate}%\n                  </text>\n                  <Tooltip content={<CustomTooltip />} />\n                </RadialBarChart>\n              </ResponsiveContainer>\n            </div>\n            <div className=\"text-center mt-4\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                {successfulJobs} of {totalJobs} jobs completed successfully\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n\n      {/* Job Trends - Area Chart */}\n      <motion.div\n        variants={chartVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n        transition={{ delay: 0.2 }}\n      >\n        <Card className=\"bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-gray-200/50 dark:border-gray-700/50 hover:shadow-lg transition-shadow\">\n          <CardHeader className=\"pb-4\">\n            <div className=\"flex items-center space-x-2\">\n              <TrendingUp className=\"w-5 h-5 text-blue-500\" />\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Job Trends</h3>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\" data-testid=\"chart-job-trends\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <AreaChart data={trends || []}>\n                  <defs>\n                    <linearGradient id=\"colorJobs\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"5%\" stopColor=\"#3b82f6\" stopOpacity={0.8}/>\n                      <stop offset=\"95%\" stopColor=\"#3b82f6\" stopOpacity={0.1}/>\n                    </linearGradient>\n                  </defs>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--border)\" opacity={0.3} />\n                  <XAxis \n                    dataKey=\"label\" \n                    stroke=\"var(--muted-foreground)\"\n                    fontSize={11}\n                    tick={{ fontSize: 11 }}\n                  />\n                  <YAxis \n                    stroke=\"var(--muted-foreground)\"\n                    fontSize={11}\n                    tick={{ fontSize: 11 }}\n                  />\n                  <Tooltip content={<CustomTooltip />} />\n                  <Area\n                    type=\"monotone\"\n                    dataKey=\"count\"\n                    stroke=\"#3b82f6\"\n                    strokeWidth={2}\n                    fill=\"url(#colorJobs)\"\n                  />\n                </AreaChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n\n      {/* Job Status Bar Chart */}\n      <motion.div\n        variants={chartVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n        transition={{ delay: 0.3 }}\n      >\n        <Card className=\"bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-gray-200/50 dark:border-gray-700/50 hover:shadow-lg transition-shadow\">\n          <CardHeader className=\"pb-4\">\n            <div className=\"flex items-center space-x-2\">\n              <BarChart3 className=\"w-5 h-5 text-purple-500\" />\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Status Overview</h3>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={statusData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--border)\" opacity={0.3} />\n                  <XAxis \n                    dataKey=\"name\" \n                    stroke=\"var(--muted-foreground)\"\n                    fontSize={11}\n                    angle={-45}\n                    textAnchor=\"end\"\n                    height={60}\n                  />\n                  <YAxis \n                    stroke=\"var(--muted-foreground)\"\n                    fontSize={11}\n                  />\n                  <Tooltip content={<CustomTooltip />} />\n                  <Bar dataKey=\"value\" radius={[4, 4, 0, 0]}>\n                    {statusData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Bar>\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n\n      {/* Performance Metrics */}\n      <motion.div\n        variants={chartVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n        transition={{ delay: 0.4 }}\n        className=\"lg:col-span-2\"\n      >\n        <Card className=\"bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-gray-200/50 dark:border-gray-700/50 hover:shadow-lg transition-shadow\">\n          <CardHeader className=\"pb-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Activity className=\"w-5 h-5 text-indigo-500\" />\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Performance Timeline</h3>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={performanceData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--border)\" opacity={0.3} />\n                  <XAxis \n                    dataKey=\"label\" \n                    stroke=\"var(--muted-foreground)\"\n                    fontSize={11}\n                  />\n                  <YAxis \n                    stroke=\"var(--muted-foreground)\"\n                    fontSize={11}\n                  />\n                  <Tooltip content={<CustomTooltip />} />\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"count\"\n                    stroke=\"#3b82f6\"\n                    strokeWidth={3}\n                    dot={{ fill: \"#3b82f6\", strokeWidth: 2, r: 4 }}\n                    activeDot={{ r: 6, stroke: \"#3b82f6\", strokeWidth: 2 }}\n                    name=\"Jobs Submitted\"\n                  />\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"successRate\"\n                    stroke=\"#10b981\"\n                    strokeWidth={2}\n                    dot={{ fill: \"#10b981\", strokeWidth: 2, r: 3 }}\n                    name=\"Success Rate %\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":14390},"client/src/components/dashboard/backend-advisor.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useBackends } from \"@/hooks/use-jobs\";\nimport type { BackendStatus } from \"@shared/schema\";\n\nconst statusColors: Record<BackendStatus, string> = {\n  available: \"bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-700\",\n  busy: \"bg-yellow-50 dark:bg-yellow-900/20 border-yellow-200 dark:border-yellow-700\",\n  maintenance: \"bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-700\",\n  offline: \"bg-gray-50 dark:bg-gray-900/20 border-gray-200 dark:border-gray-700\",\n};\n\nconst statusBadgeColors: Record<BackendStatus, string> = {\n  available: \"bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300\",\n  busy: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-300\",\n  maintenance: \"bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300\",\n  offline: \"bg-gray-100 text-gray-800 dark:bg-gray-900/50 dark:text-gray-300\",\n};\n\nconst cardVariants = {\n  hidden: { opacity: 0, y: 20 },\n  visible: (i: number) => ({\n    opacity: 1,\n    y: 0,\n    transition: {\n      delay: i * 0.1,\n      duration: 0.5,\n    },\n  }),\n  hover: {\n    scale: 1.02,\n    transition: { duration: 0.2 },\n  },\n};\n\ninterface BackendAdvisorProps {\n  onViewChange?: (view: string) => void;\n}\n\nexport function BackendAdvisor({ onViewChange }: BackendAdvisorProps) {\n  const { data: backends = [], isLoading } = useBackends();\n\n  const sortedBackends = [...backends].sort((a, b) => {\n    const statusPriority: Record<BackendStatus, number> = { available: 0, busy: 1, maintenance: 2, offline: 3 };\n    return statusPriority[a.status as BackendStatus] - statusPriority[b.status as BackendStatus];\n  });\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-gray-200/50 dark:border-gray-700/50\">\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            {Array.from({ length: 3 }).map((_, i) => (\n              <div key={i} className=\"p-4 bg-gray-200 dark:bg-gray-700 rounded-lg\">\n                <div className=\"h-4 bg-gray-300 dark:bg-gray-600 rounded w-3/4 mb-2\"></div>\n                <div className=\"h-3 bg-gray-300 dark:bg-gray-600 rounded w-1/2\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-gray-200/50 dark:border-gray-700/50\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Backend Advisor</h3>\n          <motion.div \n            className=\"w-2 h-2 bg-green-500 rounded-full\"\n            animate={{ opacity: [1, 0.3, 1] }}\n            transition={{ duration: 2, repeat: Infinity }}\n          />\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {sortedBackends.map((backend, index) => (\n          <motion.div\n            key={backend.id}\n            custom={index}\n            variants={cardVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            whileHover=\"hover\"\n            className={`p-4 border rounded-lg cursor-pointer ${statusColors[backend.status as BackendStatus]}`}\n            data-testid={`backend-${backend.id}`}\n          >\n            <div className=\"flex items-center justify-between mb-2\">\n              <div className=\"font-medium text-gray-900 dark:text-white\">{backend.name}</div>\n              <Badge className={statusBadgeColors[backend.status as BackendStatus]}>\n                {backend.status.charAt(0).toUpperCase() + backend.status.slice(1)}\n              </Badge>\n            </div>\n            \n            <div className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">\n              {backend.status === \"available\" && (\n                <>Queue: {backend.queueLength} jobs • Avg wait: {backend.averageWaitTime}s</>\n              )}\n              {backend.status === \"busy\" && (\n                <>Queue: {backend.queueLength} jobs • Avg wait: ~{Math.floor(backend.averageWaitTime! / 60)}min</>\n              )}\n              {backend.status === \"maintenance\" && (\n                <>Expected back: In maintenance</>\n              )}\n              {backend.status === \"offline\" && (\n                <>Currently offline</>\n              )}\n            </div>\n            \n            <div className=\"flex items-center justify-between text-xs text-gray-500 dark:text-gray-400\">\n              <span>{backend.qubits} qubits</span>\n              <span>Uptime: {backend.uptime}</span>\n            </div>\n          </motion.div>\n        ))}\n\n        <Button \n          className=\"w-full bg-blue-600 hover:bg-blue-700\"\n          onClick={() => onViewChange?.('all-backends')}\n          data-testid=\"button-view-all-backends\"\n        >\n          View All Backends\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5110},"client/src/components/dashboard/export-options.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { FileText, Download, FileType } from \"lucide-react\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { exportToCSV, exportToJSON } from \"@/lib/export\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst buttonVariants = {\n  hover: {\n    scale: 1.02,\n    transition: { duration: 0.2 },\n  },\n  tap: {\n    scale: 0.98,\n  },\n};\n\nexport function ExportOptions() {\n  const { toast } = useToast();\n\n  const handleExportCSV = async () => {\n    try {\n      await exportToCSV();\n      toast({\n        title: \"Export successful\",\n        description: \"Jobs data exported to CSV format\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Export failed\",\n        description: \"Failed to export CSV file\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleExportJSON = async () => {\n    try {\n      await exportToJSON();\n      toast({\n        title: \"Export successful\", \n        description: \"Jobs data exported to JSON format\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Export failed\",\n        description: \"Failed to export JSON file\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleGenerateReport = () => {\n    // TODO: Implement PDF report generation\n    toast({\n      title: \"Coming soon\",\n      description: \"PDF report generation will be available soon\",\n    });\n  };\n\n  return (\n    <Card className=\"bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-gray-200/50 dark:border-gray-700/50\">\n      <CardHeader>\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Export Data</h3>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        <motion.div\n          variants={buttonVariants}\n          whileHover=\"hover\"\n          whileTap=\"tap\"\n        >\n          <Button\n            onClick={handleExportCSV}\n            className=\"w-full bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white\"\n            data-testid=\"button-export-csv\"\n          >\n            <FileText className=\"w-4 h-4 mr-2\" />\n            Export to CSV\n          </Button>\n        </motion.div>\n\n        <motion.div\n          variants={buttonVariants}\n          whileHover=\"hover\"\n          whileTap=\"tap\"\n        >\n          <Button\n            onClick={handleExportJSON}\n            className=\"w-full bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white\"\n            data-testid=\"button-export-json\"\n          >\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export to JSON\n          </Button>\n        </motion.div>\n\n        <motion.div\n          variants={buttonVariants}\n          whileHover=\"hover\"\n          whileTap=\"tap\"\n        >\n          <Button\n            onClick={handleGenerateReport}\n            className=\"w-full bg-gradient-to-r from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white\"\n            data-testid=\"button-generate-report\"\n          >\n            <FileType className=\"w-4 h-4 mr-2\" />\n            Generate Report\n          </Button>\n        </motion.div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3250},"client/src/components/dashboard/header.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport {\n  Moon,\n  Sun,\n  Search,\n  RefreshCw,\n  Bell,\n  CloudDownload,\n  X,\n  Users,\n  Play,\n} from \"lucide-react\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { useTheme } from \"@/hooks/use-theme\";\nimport { useJobStats, useJobs } from \"@/hooks/use-jobs\";\nimport { motion } from \"framer-motion\";\nimport {\n  Settings,\n  Filter,\n  Download,\n  BarChart3,\n  LogOut,\n  User,\n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n} from \"@/components/ui/dropdown-menu\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { cn } from \"@/lib/utils\"; // Assuming cn utility is available\n\ninterface HeaderProps {\n  onSearch: (query: string) => void;\n  onRefreshIntervalChange: (interval: number) => void;\n  onManualRefresh: () => void;\n  onViewChange?: (view: string) => void;\n  onNotificationToggle?: () => void;\n}\n\nfunction LiveJobIndicator() {\n  const { data: stats } = useJobStats();\n  const runningJobs = stats?.runningJobs || 0;\n\n  if (runningJobs === 0) return null;\n\n  return (\n    <div className=\"flex items-center space-x-1\">\n      <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n      <span className=\"text-xs text-green-600 font-medium\">\n        {runningJobs} LIVE\n      </span>\n    </div>\n  );\n}\n\nexport function Header({\n  onSearch,\n  onRefreshIntervalChange,\n  onManualRefresh,\n  onViewChange,\n  onNotificationToggle,\n}: HeaderProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [suggestions, setSuggestions] = useState<string[]>([]);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [refreshInterval, setRefreshInterval] = useState(\"10\");\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const { theme, setTheme } = useTheme();\n  const { user, logout } = useAuth();\n  const { toast } = useToast();\n\n  const [syncStatus, setSyncStatus] = useState<\n    \"idle\" | \"syncing\" | \"success\" | \"error\"\n  >(\"idle\");\n  const [connectionStatus, setConnectionStatus] = useState<\n    \"connected\" | \"connecting\" | \"disconnected\"\n  >(\"connected\");\n  const [lastSync, setLastSync] = useState<Date>(new Date());\n\n  // Simulate connection status updates\n  useEffect(() => {\n    const interval = setInterval(() => {\n      // Randomly simulate connection status changes for demo\n      const statuses: Array<\"connected\" | \"connecting\" | \"disconnected\"> = [\n        \"connected\",\n        \"connected\",\n        \"connected\",\n        \"connecting\",\n        \"disconnected\",\n      ];\n      const randomStatus =\n        statuses[Math.floor(Math.random() * statuses.length)];\n      setConnectionStatus(randomStatus);\n    }, 10000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const handleSync = async () => {\n    setSyncStatus(\"syncing\");\n    setConnectionStatus(\"connecting\");\n    try {\n      const response = await fetch(\"/api/sync/ibm\", { method: \"POST\" });\n      if (response.ok) {\n        setSyncStatus(\"success\");\n        setConnectionStatus(\"connected\");\n        setLastSync(new Date());\n        setTimeout(() => setSyncStatus(\"idle\"), 2000);\n      } else {\n        setSyncStatus(\"error\");\n        setConnectionStatus(\"disconnected\");\n        setTimeout(() => setSyncStatus(\"idle\"), 2000);\n      }\n    } catch (error) {\n      setSyncStatus(\"error\");\n      setConnectionStatus(\"disconnected\");\n      setTimeout(() => setSyncStatus(\"idle\"), 2000);\n    }\n  };\n\n  const { data: jobsData } = useJobs(1, 50);\n\n  const jobs = jobsData?.jobs || [];\n\n  // Get recent completed jobs (last 24 hours) and running jobs for notification count\n  const recentCompletedJobs = jobs.filter(\n    (job) =>\n      (job.status === \"done\" || job.status === \"failed\") &&\n      job.endTime &&\n      new Date(job.endTime).getTime() > Date.now() - 24 * 60 * 60 * 1000,\n  );\n\n  const runningJobs = jobs.filter((job) => job.status === \"running\");\n  const notificationCount = recentCompletedJobs.length + runningJobs.length;\n\n  useEffect(() => {\n    const debounceTimer = setTimeout(() => {\n      onSearch(searchQuery);\n    }, 300);\n\n    return () => clearTimeout(debounceTimer);\n  }, [searchQuery, onSearch]);\n\n  const handleManualRefresh = () => {\n    setIsRefreshing(true);\n    onManualRefresh();\n    setTimeout(() => setIsRefreshing(false), 1000);\n  };\n\n  const handleRefreshIntervalChange = (value: string) => {\n    setRefreshInterval(value);\n    onRefreshIntervalChange(parseInt(value));\n  };\n\n  const handleIBMSync = async () => {\n    setIsRefreshing(true); // Assuming setIsRefreshing is a typo and should be setIsSyncing\n    try {\n      const response = await fetch(\"/api/sync/ibm\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      if (response.ok) {\n        onManualRefresh(); // Refresh the data after sync\n        toast({\n          title: \"IBM Quantum Sync\",\n          description: \"Successfully synced with IBM Quantum Cloud\",\n        });\n      } else {\n        throw new Error(\"Sync failed\");\n      }\n    } catch (error) {\n      toast({\n        title: \"Sync Error\",\n        description: \"Failed to sync with IBM Quantum Cloud\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsRefreshing(false); // Assuming setIsRefreshing is a typo and should be setIsSyncing\n    }\n  };\n\n  // Search suggestions based on common keywords\n  const searchSuggestions = [\n    \"running\",\n    \"queued\",\n    \"done\",\n    \"failed\",\n    \"cancelled\",\n    \"ibm_cairo\",\n    \"ibm_brisbane\",\n    \"ibm_kyoto\",\n    \"simulator\",\n    \"VQE\",\n    \"QAOA\",\n    \"Grover\",\n    \"Shor\",\n    \"optimization\",\n    \"error\",\n    \"success\",\n    \"timeout\",\n    \"circuit\",\n    \"backend\",\n  ];\n\n  useEffect(() => {\n    if (searchQuery.length > 0) {\n      const filtered = searchSuggestions.filter((suggestion) =>\n        suggestion.toLowerCase().includes(searchQuery.toLowerCase()),\n      );\n      setSuggestions(filtered);\n      setShowSuggestions(filtered.length > 0);\n    } else {\n      setShowSuggestions(false);\n    }\n  }, [searchQuery]);\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSearch(searchQuery);\n    setShowSuggestions(false);\n  };\n\n  const handleSearchChange = (value: string) => {\n    setSearchQuery(value);\n    onSearch(value); // Real-time search\n  };\n\n  const handleSuggestionClick = (suggestion: string) => {\n    setSearchQuery(suggestion);\n    onSearch(suggestion);\n    setShowSuggestions(false);\n  };\n\n  const clearSearch = () => {\n    setSearchQuery(\"\");\n    onSearch(\"\");\n    setShowSuggestions(false);\n  };\n\n  return (\n    <motion.header\n      className=\"sticky top-0 z-50 backdrop-blur-md bg-white/80 dark:bg-gray-900/80 border-b border-gray-200 dark:border-gray-700\"\n      initial={{ y: -100 }}\n      animate={{ y: 0 }}\n      transition={{ duration: 0.3 }}\n    >\n      <div className=\"max-w-7xl mx-auto px-2.5 sm:px-4 lg:px-6\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo and Title */}\n          <motion.div\n            className=\"flex items-center space-x-4\"\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ delay: 0.1 }}\n          >\n            <Link\n              to=\"/dashboard\"\n              className=\"flex items-center space-x-3 cursor-pointer hover:opacity-80 transition-opacity\"\n            >\n              <div className=\"w-12 h-12 bg-gradient-to-r from-quantum-blue to-quantum-purple rounded-lg flex items-center justify-center\">\n                <motion.div\n                  animate={{ rotate: 360 }}\n                  transition={{ duration: 8, repeat: Infinity, ease: \"linear\" }}\n                >\n                  <div className=\"w-7 h-7 text-white flex items-center justify-center\">\n                    ⚛️\n                  </div>\n                </motion.div>\n              </div>\n              <div className=\"flex flex-col justify-center\">\n                <h1 className=\"text-xl font-bold text-gray-900 dark:text-white leading-tight\">\n                  IBMQuantum\n                </h1>\n                <p className=\"text-sm text-gray-500 dark:text-gray-400 leading-tight\">\n                  Jobs Dashboard\n                </p>\n              </div>\n            </Link>\n          </motion.div>\n\n          {/* Search and Controls */}\n          <motion.div\n            className=\"flex items-center space-x-4\"\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ delay: 0.2 }}\n          >\n            {/* Enhanced Search Bar */}\n            <form onSubmit={handleSearch} className=\"flex-1 max-w-md mx-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4 z-10\" />\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search jobs, backends, status, keywords...\"\n                  value={searchQuery}\n                  onChange={(e) => handleSearchChange(e.target.value)}\n                  onFocus={() =>\n                    searchQuery.length > 0 && setShowSuggestions(true)\n                  }\n                  onBlur={() =>\n                    setTimeout(() => setShowSuggestions(false), 150)\n                  }\n                  className=\"pl-9 pr-8 bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-gray-200/50 dark:border-gray-700/50\"\n                />\n                {searchQuery && (\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={clearSearch}\n                    className=\"absolute right-1 top-1/2 transform -translate-y-1/2 h-6 w-6 p-0 hover:bg-gray-200 dark:hover:bg-gray-700\"\n                  >\n                    <X className=\"h-3 w-3\" />\n                  </Button>\n                )}\n\n                {/* Search Suggestions Dropdown */}\n                {showSuggestions && suggestions.length > 0 && (\n                  <div className=\"absolute top-full left-0 right-0 mt-1 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-md shadow-lg z-50 max-h-40 overflow-y-auto\">\n                    {suggestions.map((suggestion, index) => (\n                      <div\n                        key={index}\n                        onClick={() => handleSuggestionClick(suggestion)}\n                        className=\"px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer text-sm border-b border-gray-100 dark:border-gray-600 last:border-b-0\"\n                      >\n                        <div className=\"flex items-center\">\n                          <Search className=\"h-3 w-3 mr-2 text-gray-400\" />\n                          <span className=\"capitalize\">{suggestion}</span>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </form>\n\n            {/* Auto-refresh Controls */}\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Auto-refresh:\n              </span>\n              <Select\n                value={refreshInterval}\n                onValueChange={handleRefreshIntervalChange}\n              >\n                <SelectTrigger\n                  className=\"w-20 h-8\"\n                  data-testid=\"select-refresh-interval\"\n                >\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"0\">Off</SelectItem>\n                  <SelectItem value=\"5\">5s</SelectItem>\n                  <SelectItem value=\"10\">10s</SelectItem>\n                  <SelectItem value=\"30\">30s</SelectItem>\n                  <SelectItem value=\"60\">1min</SelectItem>\n                </SelectContent>\n              </Select>\n              {parseInt(refreshInterval) > 0 && (\n                <motion.div\n                  className=\"w-2 h-2 bg-green-500 rounded-full\"\n                  animate={{ opacity: [1, 0.3, 1] }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                />\n              )}\n            </div>\n\n            {/* Center controls group */}\n            <div className=\"flex items-center gap-4\">\n              {/* Connection Status Indicator */}\n              <div className=\"hidden lg:flex items-center gap-2 text-sm text-muted-foreground\">\n                <div\n                  className={cn(\"h-2 w-2 rounded-full\", {\n                    \"bg-green-500 animate-pulse\":\n                      connectionStatus === \"connected\",\n                    \"bg-yellow-500 animate-pulse\":\n                      connectionStatus === \"connecting\",\n                    \"bg-red-500\": connectionStatus === \"disconnected\",\n                  })}\n                />\n                <span className=\"capitalize\">{connectionStatus}</span>\n                <span className=\"text-xs\">\n                  • Last sync: {lastSync.toLocaleTimeString()}\n                </span>\n              </div>\n\n              <Button\n                onClick={handleSync}\n                disabled={syncStatus === \"syncing\"}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"flex items-center gap-2\"\n                data-testid=\"button-sync\"\n              >\n                <RefreshCw\n                  className={cn(\n                    \"h-4 w-4\",\n                    syncStatus === \"syncing\" && \"animate-spin\",\n                  )}\n                />\n                <span className=\"hidden sm:inline\">\n                  {syncStatus === \"syncing\" && \"Syncing...\"}\n                  {syncStatus === \"success\" && \"Synced!\"}\n                  {syncStatus === \"error\" && \"Error\"}\n                  {syncStatus === \"idle\" && \"Sync IBM\"}\n                </span>\n              </Button>\n            </div>\n\n            {/* Action buttons group */}\n            <div className=\"flex items-center gap-2\">\n              {/* Teamwork Button */}\n              <Link to=\"/teamwork\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"hidden md:flex items-center gap-2 text-blue-600 border-blue-200 hover:bg-blue-50 dark:text-blue-400 dark:border-blue-800 dark:hover:bg-blue-900/20\"\n                  data-testid=\"button-teamwork\"\n                >\n                  <Users className=\"h-4 w-4\" />\n                  <span className=\"hidden lg:inline\">Teamwork</span>\n                </Button>\n              </Link>\n\n              {/* Play and Learn Button */}\n              <motion.div\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n              >\n                <Button\n                  variant=\"default\"\n                  size=\"sm\"\n                  className=\"flex items-center gap-2 bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white border-0 shadow-lg hover:shadow-xl transition-all duration-200 font-semibold\"\n                  data-testid=\"button-play-learn\"\n                  onClick={() => {\n                    window.location.href = \"/quantum-quest\";\n                  }}\n                >\n                  <motion.div\n                    animate={{ rotate: [0, 360] }}\n                    transition={{ duration: 3, repeat: Infinity, ease: \"linear\" }}\n                  >\n                    <Play className=\"h-4 w-4\" fill=\"currentColor\" />\n                  </motion.div>\n                  <span className=\"hidden sm:inline\">Play and Learn</span>\n                </Button>\n              </motion.div>\n            </div>\n\n            {/* Right side controls */}\n            <div className=\"flex items-center gap-3\">\n              {/* Notification Bell */}\n              <div className=\"relative\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={onNotificationToggle}\n                  className=\"relative\"\n                  data-testid=\"button-notifications\"\n                >\n                  <Bell className=\"w-5 h-5\" />\n                  <Badge\n                    variant=\"destructive\"\n                    className=\"absolute -top-2 -right-2 w-5 h-5 p-0 flex items-center justify-center text-xs\"\n                  >\n                    3\n                  </Badge>\n                </Button>\n              </div>\n\n              {/* User Menu */}\n              <div className=\"relative\">\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button \n                      variant=\"ghost\" \n                      size=\"icon\"\n                      data-testid=\"button-user-menu\"\n                    >\n                      <User className=\"w-5 h-5\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"w-56\">\n                    <div className=\"px-2 py-2\">\n                      <p className=\"text-sm font-medium\">\n                        {user?.name || \"User\"}\n                      </p>\n                      <p className=\"text-xs text-gray-500\">\n                        {user?.email || \"user@example.com\"}\n                      </p>\n                    </div>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem\n                      onClick={() =>\n                        setTheme(theme === \"dark\" ? \"light\" : \"dark\")\n                      }\n                    >\n                      {theme === \"dark\" ? (\n                        <Sun className=\"w-4 h-4 mr-2\" />\n                      ) : (\n                        <Moon className=\"w-4 h-4 mr-2\" />\n                      )}\n                      {theme === \"dark\" ? \"Light Mode\" : \"Dark Mode\"}\n                    </DropdownMenuItem>\n                    <DropdownMenuItem>\n                      <Settings className=\"w-4 h-4 mr-2\" />\n                      Settings\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem\n                      onClick={() => {\n                        logout();\n                        window.location.href = \"/\";\n                      }}\n                      className=\"text-red-600 dark:text-red-400\"\n                    >\n                      <LogOut className=\"w-4 w-4 mr-2\" />\n                      Sign Out\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </div>\n            </div>\n          </motion.div>\n        </div>\n      </div>\n    </motion.header>\n  );\n}\n","size_bytes":19107},"client/src/components/dashboard/job-details-modal.tsx":{"content":"import { motion, AnimatePresence } from \"framer-motion\";\nimport { X, Calendar, Clock, Server, Hash, Tag, CheckCircle, XCircle, Play, Pause, Cpu, Zap, Code, BarChart3, Target, Activity, Database, Settings, TrendingUp, GitBranch } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AIFailureAnalysis } from \"@/components/ai/ai-failure-analysis\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line, AreaChart, Area, ScatterChart, Scatter } from \"recharts\";\nimport type { Job, JobStatus } from \"@shared/schema\";\nimport { format, formatDistanceToNow } from \"date-fns\";\n\nconst statusColors: Record<JobStatus, string> = {\n  queued: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400\",\n  running: \"bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400\",\n  done: \"bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400\",\n  failed: \"bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400\",\n  cancelled: \"bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400\",\n};\n\nconst statusIcons: Record<JobStatus, React.ReactNode> = {\n  queued: <Clock className=\"w-4 h-4\" />,\n  running: <Play className=\"w-4 h-4\" />,\n  done: <CheckCircle className=\"w-4 h-4\" />,\n  failed: <XCircle className=\"w-4 h-4\" />,\n  cancelled: <Pause className=\"w-4 h-4\" />,\n};\n\ninterface JobDetailsModalProps {\n  job: Job;\n  onClose: () => void;\n}\n\nexport function JobDetailsModal({ job, onClose }: JobDetailsModalProps) {\n  const formatDuration = (duration: number | null) => {\n    if (!duration) return \"N/A\";\n    const minutes = Math.floor(duration / 60);\n    const seconds = duration % 60;\n    return `${minutes}:${seconds.toString().padStart(2, \"0\")}`;\n  };\n\n  // Generate sample data for visualizations\n  const generateErrorData = () => {\n    return [\n      { name: 'T1 (μs)', value: 311.79, min: 85.2, max: 523.4, type: 'coherence' },\n      { name: 'T2 (μs)', value: 353.48, min: 127.8, max: 489.3, type: 'coherence' },\n      { name: 'Readout Error', value: 4.7e-3, min: 1.343e-3, max: 1.936e-1, type: 'error' },\n      { name: 'CZ Error', value: 1.681e-3, min: 6.943e-4, max: 1.99e-1, type: 'error' },\n      { name: 'SX Error', value: 1.832e-4, min: 4.2e-5, max: 8.9e-4, type: 'error' }\n    ];\n  };\n\n  const generateQueueData = () => {\n    const data = [];\n    const now = Date.now();\n    for (let i = 0; i < 24; i++) {\n      data.push({\n        time: format(new Date(now - (24 - i) * 3600000), 'HH:mm'),\n        position: Math.max(1, Math.floor(Math.random() * 50) - i * 2),\n        estimatedWait: Math.max(5, 120 - i * 4)\n      });\n    }\n    return data;\n  };\n\n  const generateTopologyData = () => {\n    const nodes = [];\n    const connections = [];\n    const qubits = job.qubits || 27;\n    \n    // Generate qubit nodes in a grid-like pattern\n    for (let i = 0; i < qubits; i++) {\n      const row = Math.floor(i / Math.ceil(Math.sqrt(qubits)));\n      const col = i % Math.ceil(Math.sqrt(qubits));\n      nodes.push({\n        id: i,\n        x: col * 60 + 30,\n        y: row * 60 + 30,\n        error: Math.random() * 0.01,\n        connected: i < qubits - 1\n      });\n      \n      // Add connections to adjacent qubits\n      if (col < Math.ceil(Math.sqrt(qubits)) - 1) {\n        connections.push({ from: i, to: i + 1, error: Math.random() * 0.005 });\n      }\n      if (row < Math.floor(qubits / Math.ceil(Math.sqrt(qubits)))) {\n        connections.push({ from: i, to: i + Math.ceil(Math.sqrt(qubits)), error: Math.random() * 0.005 });\n      }\n    }\n    \n    return { nodes, connections };\n  };\n\n  const errorData = generateErrorData();\n  const queueData = generateQueueData();\n  const topologyData = generateTopologyData();\n\n  const formatScientific = (value: number) => {\n    if (value < 0.001) {\n      return value.toExponential(2);\n    }\n    return value.toFixed(3);\n  };\n\n  const modalVariants = {\n    hidden: { opacity: 0, scale: 0.95 },\n    visible: { opacity: 1, scale: 1 },\n    exit: { opacity: 0, scale: 0.95 },\n  };\n\n  return (\n    <AnimatePresence>\n      <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\">\n        {/* Backdrop */}\n        <motion.div\n          className=\"absolute inset-0 bg-black/50 backdrop-blur-sm\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          onClick={onClose}\n        />\n\n        {/* Modal */}\n        <motion.div\n          className=\"relative w-full max-w-6xl max-h-[90vh] overflow-auto\"\n          variants={modalVariants}\n          initial=\"hidden\"\n          animate=\"visible\"\n          exit=\"exit\"\n          transition={{ duration: 0.3 }}\n        >\n          <Card className=\"bg-gradient-to-br from-white via-white to-gray-50/30 dark:from-gray-900 dark:via-gray-900 dark:to-gray-800 shadow-2xl border-0 ring-1 ring-gray-200/50 dark:ring-gray-700/50\">\n            <div className=\"relative overflow-hidden\">\n              <div className=\"absolute inset-0 bg-gradient-to-r from-blue-600/5 via-indigo-600/5 to-purple-600/5\"></div>\n              <div className=\"absolute inset-0 opacity-30\"></div>\n              <CardHeader className=\"relative flex flex-row items-center justify-between space-y-0 py-6 px-8 border-b border-gray-200/70 dark:border-gray-700/70\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"p-3 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl shadow-lg\">\n                    <Database className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                      {job.name}\n                    </CardTitle>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400 font-mono bg-gray-100 dark:bg-gray-800 px-3 py-1 rounded-full mt-1\">\n                      ID: {job.id}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-4\">\n                  <Badge className={`${statusColors[job.status as JobStatus]} flex items-center gap-2 text-sm px-4 py-2 font-medium shadow-sm`}>\n                    {statusIcons[job.status as JobStatus]}\n                    {job.status.charAt(0).toUpperCase() + job.status.slice(1)}\n                  </Badge>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={onClose}\n                    className=\"h-10 w-10 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-xl transition-all duration-200\"\n                    data-testid=\"close-job-details\"\n                  >\n                    <X className=\"h-5 w-5\" />\n                  </Button>\n                </div>\n              </CardHeader>\n            </div>\n\n            <CardContent className=\"p-0\">\n              <Tabs defaultValue=\"overview\" className=\"w-full\">\n                <div className=\"border-b border-gray-200/70 dark:border-gray-700/70 bg-gradient-to-r from-gray-50/80 to-blue-50/30 dark:from-gray-800/80 dark:to-gray-700/50\">\n                  <TabsList className=\"grid w-full grid-cols-5 bg-transparent p-2 mx-8\">\n                    <TabsTrigger value=\"overview\" className=\"flex items-center gap-2 font-medium transition-all duration-200 data-[state=active]:bg-white data-[state=active]:shadow-lg dark:data-[state=active]:bg-gray-700 data-[state=active]:scale-105 rounded-xl\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Overview\n                    </TabsTrigger>\n                    <TabsTrigger value=\"circuit\" className=\"flex items-center gap-2 font-medium transition-all duration-200 data-[state=active]:bg-white data-[state=active]:shadow-lg dark:data-[state=active]:bg-gray-700 data-[state=active]:scale-105 rounded-xl\">\n                      <Code className=\"w-4 h-4\" />\n                      Circuit\n                    </TabsTrigger>\n                    <TabsTrigger value=\"execution\" className=\"flex items-center gap-2 font-medium transition-all duration-200 data-[state=active]:bg-white data-[state=active]:shadow-lg dark:data-[state=active]:bg-gray-700 data-[state=active]:scale-105 rounded-xl\">\n                      <Cpu className=\"w-4 h-4\" />\n                      Execution\n                    </TabsTrigger>\n                    <TabsTrigger value=\"results\" className=\"flex items-center gap-2 font-medium transition-all duration-200 data-[state=active]:bg-white data-[state=active]:shadow-lg dark:data-[state=active]:bg-gray-700 data-[state=active]:scale-105 rounded-xl\">\n                      <Target className=\"w-4 h-4\" />\n                      Results\n                    </TabsTrigger>\n                    <TabsTrigger value=\"calibration\" className=\"flex items-center gap-2 font-medium transition-all duration-200 data-[state=active]:bg-white data-[state=active]:shadow-lg dark:data-[state=active]:bg-gray-700 data-[state=active]:scale-105 rounded-xl\">\n                      <Settings className=\"w-4 h-4\" />\n                      System\n                    </TabsTrigger>\n                  </TabsList>\n                </div>\n\n                <TabsContent value=\"overview\" className=\"px-8 py-6 space-y-8\">\n                  <div className=\"space-y-6\">\n                    <div className=\"flex items-center gap-3 mb-6\">\n                      <div className=\"p-2 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-lg shadow-md\">\n                        <BarChart3 className=\"w-5 h-5 text-white\" />\n                      </div>\n                      <h4 className=\"text-xl font-bold text-gray-900 dark:text-white\">\n                        Job Overview\n                      </h4>\n                    </div>\n\n                    {/* Key Metrics Cards */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n                      <motion.div \n                        whileHover={{ scale: 1.02 }}\n                        className=\"bg-gradient-to-br from-blue-50 to-blue-100/70 dark:from-blue-900/30 dark:to-blue-800/30 border border-blue-200/60 dark:border-blue-700/60 rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all duration-300\"\n                      >\n                        <div className=\"flex items-center gap-3 mb-4\">\n                          <div className=\"p-2 bg-blue-500 rounded-lg shadow-sm\">\n                            <Calendar className=\"w-5 h-5 text-white\" />\n                          </div>\n                          <span className=\"font-semibold text-blue-800 dark:text-blue-200\">Created</span>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <div className=\"text-lg font-bold text-blue-900 dark:text-blue-100\">\n                            {format(job.submissionTime, \"MMM dd, yyyy\")}\n                          </div>\n                          <div className=\"text-sm text-blue-700 dark:text-blue-300\">\n                            {format(job.submissionTime, \"HH:mm:ss\")}\n                          </div>\n                        </div>\n                      </motion.div>\n                      \n                      <motion.div \n                        whileHover={{ scale: 1.02 }}\n                        className=\"bg-gradient-to-br from-purple-50 to-purple-100/70 dark:from-purple-900/30 dark:to-purple-800/30 border border-purple-200/60 dark:border-purple-700/60 rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all duration-300\"\n                      >\n                        <div className=\"flex items-center gap-3 mb-4\">\n                          <div className=\"p-2 bg-purple-500 rounded-lg shadow-sm\">\n                            <Clock className=\"w-5 h-5 text-white\" />\n                          </div>\n                          <span className=\"font-semibold text-purple-800 dark:text-purple-200\">Duration</span>\n                        </div>\n                        <div className=\"text-2xl font-bold text-purple-900 dark:text-purple-100\">\n                          {formatDuration(job.duration)}\n                        </div>\n                      </motion.div>\n                      \n                      <motion.div \n                        whileHover={{ scale: 1.02 }}\n                        className=\"bg-gradient-to-br from-green-50 to-green-100/70 dark:from-green-900/30 dark:to-green-800/30 border border-green-200/60 dark:border-green-700/60 rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all duration-300\"\n                      >\n                        <div className=\"flex items-center gap-3 mb-4\">\n                          <div className=\"p-2 bg-green-500 rounded-lg shadow-sm\">\n                            <Server className=\"w-5 h-5 text-white\" />\n                          </div>\n                          <span className=\"font-semibold text-green-800 dark:text-green-200\">Backend</span>\n                        </div>\n                        <div className=\"text-sm text-green-900 dark:text-green-100 font-mono bg-green-100 dark:bg-green-800/30 px-3 py-2 rounded-lg\">\n                          {job.backend}\n                        </div>\n                      </motion.div>\n                      \n                      <motion.div \n                        whileHover={{ scale: 1.02 }}\n                        className=\"bg-gradient-to-br from-amber-50 to-amber-100/70 dark:from-amber-900/30 dark:to-amber-800/30 border border-amber-200/60 dark:border-amber-700/60 rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all duration-300\"\n                      >\n                        <div className=\"flex items-center gap-3 mb-4\">\n                          <div className=\"p-2 bg-amber-500 rounded-lg shadow-sm\">\n                            <Hash className=\"w-5 h-5 text-white\" />\n                          </div>\n                          <span className=\"font-semibold text-amber-800 dark:text-amber-200\">Priority</span>\n                        </div>\n                        <div className=\"text-xl font-bold text-amber-900 dark:text-amber-100\">\n                          Normal\n                        </div>\n                      </motion.div>\n                    </div>\n\n                    {/* Detailed Information */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                      <div className=\"bg-gradient-to-br from-gray-50/50 via-white to-blue-50/30 dark:from-gray-900/50 dark:via-gray-800/50 dark:to-gray-700/50 border border-gray-200/60 dark:border-gray-700/60 rounded-2xl p-6 shadow-lg\">\n                        <h5 className=\"font-bold text-gray-900 dark:text-white flex items-center gap-2 mb-4\">\n                          <Activity className=\"w-5 h-5 text-blue-600\" />\n                          Job Information\n                        </h5>\n                        <div className=\"space-y-4\">\n                          <div className=\"flex items-center justify-between p-3 bg-gray-50/50 dark:bg-gray-800/50 rounded-lg\">\n                            <div className=\"flex items-center gap-3\">\n                              <Server className=\"w-4 h-4 text-blue-600\" />\n                              <span className=\"text-sm font-semibold text-gray-900 dark:text-white\">Backend:</span>\n                            </div>\n                            <span className=\"text-sm text-gray-700 dark:text-gray-300 font-mono bg-white dark:bg-gray-700 px-2 py-1 rounded\">\n                              {job.backend}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center justify-between p-3 bg-gray-50/50 dark:bg-gray-800/50 rounded-lg\">\n                            <div className=\"flex items-center gap-3\">\n                              <Calendar className=\"w-4 h-4 text-blue-600\" />\n                              <span className=\"text-sm font-semibold text-gray-900 dark:text-white\">Submitted:</span>\n                            </div>\n                            <span className=\"text-sm text-gray-700 dark:text-gray-300\">\n                              {format(new Date(job.submissionTime), \"PPpp\")}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center justify-between p-3 bg-gray-50/50 dark:bg-gray-800/50 rounded-lg\">\n                            <div className=\"flex items-center gap-3\">\n                              <Clock className=\"w-4 h-4 text-blue-600\" />\n                              <span className=\"text-sm font-semibold text-gray-900 dark:text-white\">Duration:</span>\n                            </div>\n                            <span className=\"text-sm text-gray-700 dark:text-gray-300 font-mono\">\n                              {formatDuration(job.duration)}\n                            </span>\n                          </div>\n                          {job.queuePosition && (\n                            <div className=\"flex items-center justify-between p-3 bg-gray-50/50 dark:bg-gray-800/50 rounded-lg\">\n                              <div className=\"flex items-center gap-3\">\n                                <Hash className=\"w-4 h-4 text-blue-600\" />\n                                <span className=\"text-sm font-semibold text-gray-900 dark:text-white\">Queue Position:</span>\n                              </div>\n                              <Badge variant=\"outline\" className=\"font-mono\">#{job.queuePosition}</Badge>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n\n                      <div className=\"bg-gradient-to-br from-gray-50/50 via-white to-purple-50/30 dark:from-gray-900/50 dark:via-gray-800/50 dark:to-gray-700/50 border border-gray-200/60 dark:border-gray-700/60 rounded-2xl p-6 shadow-lg\">\n                        <h5 className=\"font-bold text-gray-900 dark:text-white flex items-center gap-2 mb-4\">\n                          <Zap className=\"w-5 h-5 text-purple-600\" />\n                          Circuit Specifications\n                        </h5>\n                        <div className=\"space-y-4\">\n                          {job.qubits && (\n                            <div className=\"flex items-center justify-between p-3 bg-gray-50/50 dark:bg-gray-800/50 rounded-lg\">\n                              <div className=\"flex items-center gap-3\">\n                                <Cpu className=\"w-4 h-4 text-purple-600\" />\n                                <span className=\"text-sm font-semibold text-gray-900 dark:text-white\">Qubits:</span>\n                              </div>\n                              <span className=\"text-lg font-bold text-purple-600 bg-purple-100 dark:bg-purple-900/30 px-3 py-1 rounded-lg\">\n                                {job.qubits}\n                              </span>\n                            </div>\n                          )}\n                          {job.shots && (\n                            <div className=\"flex items-center justify-between p-3 bg-gray-50/50 dark:bg-gray-800/50 rounded-lg\">\n                              <div className=\"flex items-center gap-3\">\n                                <Target className=\"w-4 h-4 text-purple-600\" />\n                                <span className=\"text-sm font-semibold text-gray-900 dark:text-white\">Shots:</span>\n                              </div>\n                              <span className=\"text-lg font-bold text-purple-600 bg-purple-100 dark:bg-purple-900/30 px-3 py-1 rounded-lg\">\n                                {job.shots.toLocaleString()}\n                              </span>\n                            </div>\n                          )}\n                          {job.program && (\n                            <div className=\"space-y-3\">\n                              <div className=\"flex items-center gap-3\">\n                                <Code className=\"w-4 h-4 text-purple-600\" />\n                                <span className=\"text-sm font-semibold text-gray-900 dark:text-white\">Program Preview:</span>\n                              </div>\n                              <div className=\"bg-gradient-to-r from-gray-900 to-gray-800 rounded-xl p-4 shadow-inner\">\n                                <div className=\"text-xs font-mono text-green-400\">\n                                  {job.program.length > 150\n                                    ? `${job.program.substring(0, 150)}...`\n                                    : job.program}\n                                </div>\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* AI Failure Analysis - Only show for failed jobs */}\n                    {job.status === 'failed' && (\n                      <div className=\"pt-6\">\n                        <AIFailureAnalysis \n                          jobId={job.id} \n                          jobName={job.name || undefined}\n                          error={job.error || undefined}\n                          onRetryWithSuggestion={(suggestion) => {\n                            // Handle retry with AI suggestion\n                            console.log('Retry with suggestion:', suggestion);\n                          }}\n                        />\n                      </div>\n                    )}\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"circuit\" className=\"px-6 pb-6 space-y-6\">\n                  <div className=\"space-y-6\">\n                    <h4 className=\"font-medium text-gray-900 dark:text-white flex items-center gap-2\">\n                      <Code className=\"w-4 h-4\" />\n                      Quantum Circuit Details\n                    </h4>\n                    \n                    {/* Circuit Specifications Grid */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <Cpu className=\"w-5 h-5 text-blue-600\" />\n                          <span className=\"font-medium text-blue-800 dark:text-blue-200\">Qubits</span>\n                        </div>\n                        <span className=\"text-2xl font-bold text-blue-900 dark:text-blue-100\">\n                          {job.qubits || 'N/A'}\n                        </span>\n                      </div>\n                      \n                      <div className=\"bg-purple-50 dark:bg-purple-900/20 border border-purple-200 dark:border-purple-800 rounded-lg p-4\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <Target className=\"w-5 h-5 text-purple-600\" />\n                          <span className=\"font-medium text-purple-800 dark:text-purple-200\">Shots</span>\n                        </div>\n                        <span className=\"text-2xl font-bold text-purple-900 dark:text-purple-100\">\n                          {job.shots?.toLocaleString() || 'N/A'}\n                        </span>\n                      </div>\n                      \n                      <div className=\"bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <Activity className=\"w-5 h-5 text-green-600\" />\n                          <span className=\"font-medium text-green-800 dark:text-green-200\">Circuit Depth</span>\n                        </div>\n                        <span className=\"text-2xl font-bold text-green-900 dark:text-green-100\">\n                          {job.qubits ? Math.floor(Math.random() * 50) + 10 : 'N/A'}\n                        </span>\n                      </div>\n                    </div>\n\n                    {/* Quantum Processor Topology */}\n                    <div>\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <h5 className=\"font-medium flex items-center gap-2\">\n                          <GitBranch className=\"w-4 h-4\" />\n                          Processor Topology\n                        </h5>\n                        <div className=\"flex gap-2\">\n                          <Badge variant=\"outline\" className=\"text-xs\">Map View</Badge>\n                        </div>\n                      </div>\n                      <div className=\"bg-gradient-to-br from-gray-50/50 via-white to-gray-50 dark:from-gray-900/50 dark:via-gray-800/50 dark:to-gray-900/50 border border-gray-200/60 dark:border-gray-700/60 rounded-2xl p-6 shadow-lg\">\n                        <div className=\"relative w-full h-96 flex items-center justify-center\">\n                          <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 400 300\" className=\"rounded-xl\">\n                            <defs>\n                              <radialGradient id=\"nodeGradient\" cx=\"0.5\" cy=\"0.5\" r=\"0.5\">\n                                <stop offset=\"0%\" stopColor=\"#ffffff\" stopOpacity=\"0.8\" />\n                                <stop offset=\"100%\" stopColor=\"#000000\" stopOpacity=\"0.2\" />\n                              </radialGradient>\n                              <filter id=\"glow\">\n                                <feGaussianBlur stdDeviation=\"3\" result=\"coloredBlur\"/>\n                                <feMerge> \n                                  <feMergeNode in=\"coloredBlur\"/>\n                                  <feMergeNode in=\"SourceGraphic\"/> \n                                </feMerge>\n                              </filter>\n                            </defs>\n                            \n                            {/* Draw connections first (behind nodes) */}\n                            {topologyData.connections.map((conn, i) => {\n                              const fromNode = topologyData.nodes[conn.from];\n                              const toNode = topologyData.nodes[conn.to];\n                              if (!fromNode || !toNode) return null;\n                              \n                              const opacity = Math.max(0.3, 1 - conn.error * 100);\n                              const color = conn.error > 0.003 ? '#ef4444' : conn.error > 0.002 ? '#f59e0b' : '#10b981';\n                              return (\n                                <line\n                                  key={`conn-${i}`}\n                                  x1={fromNode.x}\n                                  y1={fromNode.y}\n                                  x2={toNode.x}\n                                  y2={toNode.y}\n                                  stroke={color}\n                                  strokeWidth=\"3\"\n                                  opacity={opacity}\n                                  filter=\"url(#glow)\"\n                                />\n                              );\n                            })}\n                            \n                            {/* Draw qubit nodes */}\n                            {topologyData.nodes.map((node) => {\n                              const color = node.error > 0.005 ? '#ef4444' : node.error > 0.002 ? '#f59e0b' : '#10b981';\n                              return (\n                                <g key={`node-${node.id}`}>\n                                  <circle\n                                    cx={node.x}\n                                    cy={node.y}\n                                    r=\"16\"\n                                    fill={color}\n                                    stroke=\"#ffffff\"\n                                    strokeWidth=\"2\"\n                                    filter=\"url(#glow)\"\n                                    className=\"hover:r-18 transition-all duration-200 cursor-pointer\"\n                                  />\n                                  <circle\n                                    cx={node.x}\n                                    cy={node.y}\n                                    r=\"16\"\n                                    fill=\"url(#nodeGradient)\"\n                                  />\n                                  <text\n                                    x={node.x}\n                                    y={node.y + 4}\n                                    textAnchor=\"middle\"\n                                    fontSize=\"11\"\n                                    fill=\"white\"\n                                    fontWeight=\"bold\"\n                                    className=\"pointer-events-none\"\n                                  >\n                                    {node.id}\n                                  </text>\n                                </g>\n                              );\n                            })}\n                          </svg>\n                        </div>\n                        <div className=\"flex items-center gap-4 mt-2 text-xs\">\n                          <div className=\"flex items-center gap-1\">\n                            <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n                            <span>Good (&lt; 0.002)</span>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n                            <span>Fair (0.002-0.005)</span>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n                            <span>Poor (&gt; 0.005)</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Circuit Program */}\n                    {job.program && (\n                      <div>\n                        <h5 className=\"font-medium mb-2\">Quantum Circuit Program</h5>\n                        <div className=\"bg-gray-50 dark:bg-gray-900/50 border rounded-lg p-4 overflow-x-auto\">\n                          <pre className=\"text-sm font-mono text-gray-700 dark:text-gray-300\">\n                            {job.program}\n                          </pre>\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Basis Gates */}\n                    <div>\n                      <h5 className=\"font-medium mb-2\">Basis Gates</h5>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {['cx', 'u1', 'u2', 'u3', 'measure'].map((gate) => (\n                          <Badge key={gate} variant=\"outline\" className=\"font-mono\">\n                            {gate}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"execution\" className=\"px-6 pb-6 space-y-6\">\n                  <div className=\"space-y-6\">\n                    <h4 className=\"font-medium text-gray-900 dark:text-white flex items-center gap-2\">\n                      <Cpu className=\"w-4 h-4\" />\n                      Backend & Execution Details\n                    </h4>\n                    \n                    {/* Backend Information */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div className=\"space-y-4\">\n                        <h5 className=\"font-medium text-gray-700 dark:text-gray-300\">Backend Specifications</h5>\n                        <div className=\"space-y-3\">\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm font-medium\">Backend Name:</span>\n                            <span className=\"text-sm text-gray-600 dark:text-gray-400 font-mono\">{job.backend}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm font-medium\">Total Qubits:</span>\n                            <span className=\"text-sm text-gray-600 dark:text-gray-400\">127</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm font-medium\">Processor Type:</span>\n                            <span className=\"text-sm text-gray-600 dark:text-gray-400\">Eagle r3</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm font-medium\">Region:</span>\n                            <span className=\"text-sm text-gray-600 dark:text-gray-400\">US-East</span>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-4\">\n                        <h5 className=\"font-medium text-gray-700 dark:text-gray-300\">Queue Information</h5>\n                        <div className=\"space-y-3\">\n                          {job.queuePosition && (\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-sm font-medium\">Position in Queue:</span>\n                              <Badge variant=\"outline\">#{job.queuePosition}</Badge>\n                            </div>\n                          )}\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm font-medium\">Estimated Wait:</span>\n                            <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                              {job.status === 'queued' ? '~15 minutes' : 'N/A'}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm font-medium\">Queue Length:</span>\n                            <span className=\"text-sm text-gray-600 dark:text-gray-400\">23 jobs</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Queue Timeline Chart */}\n                    {job.status === 'queued' && (\n                      <div>\n                        <h5 className=\"font-medium mb-4 flex items-center gap-2\">\n                          <TrendingUp className=\"w-4 h-4\" />\n                          Queue Position Timeline (24h)\n                        </h5>\n                        <div className=\"bg-gradient-to-br from-blue-50/50 via-white to-indigo-50/50 dark:from-gray-900/50 dark:via-gray-800/50 dark:to-indigo-900/20 border border-blue-200/60 dark:border-gray-700/60 rounded-2xl p-6 shadow-lg\">\n                          <ResponsiveContainer width=\"100%\" height={250}>\n                            <AreaChart data={queueData}>\n                              <defs>\n                                <linearGradient id=\"areaGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                                  <stop offset=\"5%\" stopColor=\"#3b82f6\" stopOpacity={0.8}/>\n                                  <stop offset=\"95%\" stopColor=\"#3b82f6\" stopOpacity={0.1}/>\n                                </linearGradient>\n                              </defs>\n                              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e2e8f0\" opacity={0.5} />\n                              <XAxis \n                                dataKey=\"time\" \n                                fontSize={12} \n                                stroke=\"#64748b\"\n                                tickLine={false}\n                                axisLine={false}\n                              />\n                              <YAxis \n                                fontSize={12} \n                                stroke=\"#64748b\"\n                                tickLine={false}\n                                axisLine={false}\n                              />\n                              <Tooltip \n                                contentStyle={{\n                                  backgroundColor: 'white',\n                                  border: '1px solid #e2e8f0',\n                                  borderRadius: '12px',\n                                  boxShadow: '0 10px 25px -5px rgba(0, 0, 0, 0.1)'\n                                }}\n                                formatter={(value, name) => [\n                                  name === 'position' ? `#${value}` : `${value} min`,\n                                  name === 'position' ? 'Queue Position' : 'Est. Wait Time'\n                                ]}\n                              />\n                              <Area \n                                type=\"monotone\" \n                                dataKey=\"position\" \n                                stroke=\"#3b82f6\" \n                                strokeWidth={3}\n                                fill=\"url(#areaGradient)\"\n                                dot={{ fill: '#3b82f6', strokeWidth: 2, r: 4 }}\n                                activeDot={{ r: 6, stroke: '#3b82f6', strokeWidth: 2, fill: '#ffffff' }}\n                              />\n                            </AreaChart>\n                          </ResponsiveContainer>\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Performance Metrics Chart */}\n                    <div>\n                      <h5 className=\"font-medium mb-4\">Backend Performance Metrics</h5>\n                      <div className=\"bg-gradient-to-br from-red-50/50 via-white to-orange-50/50 dark:from-gray-900/50 dark:via-gray-800/50 dark:to-red-900/20 border border-red-200/60 dark:border-gray-700/60 rounded-2xl p-6 shadow-lg\">\n                        <ResponsiveContainer width=\"100%\" height={280}>\n                          <BarChart data={errorData.filter(d => d.type === 'error')} margin={{ bottom: 80 }}>\n                            <defs>\n                              <linearGradient id=\"errorGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                                <stop offset=\"5%\" stopColor=\"#ef4444\" stopOpacity={0.9}/>\n                                <stop offset=\"95%\" stopColor=\"#f97316\" stopOpacity={0.6}/>\n                              </linearGradient>\n                            </defs>\n                            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e2e8f0\" opacity={0.5} />\n                            <XAxis \n                              dataKey=\"name\" \n                              fontSize={12} \n                              angle={-45} \n                              textAnchor=\"end\" \n                              height={80}\n                              stroke=\"#64748b\"\n                              tickLine={false}\n                              axisLine={false}\n                            />\n                            <YAxis \n                              fontSize={12} \n                              tickFormatter={formatScientific}\n                              stroke=\"#64748b\"\n                              tickLine={false}\n                              axisLine={false}\n                            />\n                            <Tooltip \n                              contentStyle={{\n                                backgroundColor: 'white',\n                                border: '1px solid #e2e8f0',\n                                borderRadius: '12px',\n                                boxShadow: '0 10px 25px -5px rgba(0, 0, 0, 0.1)'\n                              }}\n                              formatter={(value) => [formatScientific(Number(value)), 'Error Rate']} \n                            />\n                            <Bar \n                              dataKey=\"value\" \n                              fill=\"url(#errorGradient)\"\n                              radius={[8, 8, 0, 0]}\n                            />\n                          </BarChart>\n                        </ResponsiveContainer>\n                      </div>\n                    </div>\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"results\" className=\"px-6 pb-6 space-y-6\">\n                  <div className=\"space-y-4\">\n                    <h4 className=\"font-medium text-gray-900 dark:text-white flex items-center gap-2\">\n                      <Target className=\"w-4 h-4\" />\n                      Execution Results\n                    </h4>\n                    \n                    {job.results ? (\n                      <div className=\"bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-6\">\n                        <h5 className=\"font-medium text-green-800 dark:text-green-200 mb-4\">Measurement Results</h5>\n                        <div className=\"bg-white dark:bg-gray-800 rounded p-4 font-mono text-sm\">\n                          <pre>{JSON.stringify(job.results, null, 2)}</pre>\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"bg-gray-50 dark:bg-gray-800/50 border border-gray-200 dark:border-gray-700 rounded-lg p-6 text-center\">\n                        <p className=\"text-gray-500 dark:text-gray-400\">\n                          {job.status === \"queued\" && \"Job is queued - results will appear when execution completes\"}\n                          {job.status === \"running\" && \"Job is currently running - results will appear when execution completes\"}\n                          {job.status === \"done\" && \"Results not available\"}\n                          {job.status === \"failed\" && \"Job failed - no results available\"}\n                          {job.status === \"cancelled\" && \"Job was cancelled - no results available\"}\n                        </p>\n                      </div>\n                    )}\n                    \n                    {/* Show progress for running jobs */}\n                    {job.status === \"running\" && (\n                      <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n                        <h4 className=\"text-sm font-medium mb-3 text-blue-800 dark:text-blue-200\">Execution Progress</h4>\n                        <div className=\"w-full bg-blue-200 dark:bg-blue-700 rounded-full h-3\">\n                          <motion.div\n                            className=\"bg-blue-500 h-3 rounded-full\"\n                            initial={{ width: \"0%\" }}\n                            animate={{ width: \"70%\" }}\n                            transition={{ duration: 2, ease: \"easeOut\" }}\n                          />\n                        </div>\n                        <p className=\"text-xs text-blue-700 dark:text-blue-300 mt-2\">Job is currently executing on quantum hardware...</p>\n                      </div>\n                    )}\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"calibration\" className=\"px-6 pb-6 space-y-6\">\n                  <div className=\"space-y-6\">\n                    <h4 className=\"font-medium text-gray-900 dark:text-white flex items-center gap-2\">\n                      <Settings className=\"w-4 h-4\" />\n                      System Calibration & Performance\n                    </h4>\n                    \n                    {/* Coherence Times Chart */}\n                    <div>\n                      <h5 className=\"font-medium mb-4\">Coherence Times Distribution</h5>\n                      <div className=\"bg-gray-50 dark:bg-gray-900/50 border rounded-lg p-4\">\n                        <ResponsiveContainer width=\"100%\" height={250}>\n                          <BarChart data={errorData.filter(d => d.type === 'coherence')}>\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey=\"name\" fontSize={12} />\n                            <YAxis fontSize={12} />\n                            <Tooltip formatter={(value) => [`${value} μs`, 'Coherence Time']} />\n                            <Bar dataKey=\"value\" fill=\"#10b981\">\n                              <Bar dataKey=\"min\" fill=\"#dc2626\" />\n                              <Bar dataKey=\"max\" fill=\"#3b82f6\" />\n                            </Bar>\n                          </BarChart>\n                        </ResponsiveContainer>\n                      </div>\n                      <div className=\"flex items-center gap-6 mt-2 text-xs\">\n                        <div className=\"flex items-center gap-1\">\n                          <div className=\"w-3 h-3 bg-green-500\"></div>\n                          <span>Median</span>\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <div className=\"w-3 h-3 bg-red-600\"></div>\n                          <span>Minimum</span>\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <div className=\"w-3 h-3 bg-blue-600\"></div>\n                          <span>Maximum</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Error Rate Scatter Plot */}\n                    <div>\n                      <h5 className=\"font-medium mb-4\">Error Rate Analysis</h5>\n                      <div className=\"bg-gray-50 dark:bg-gray-900/50 border rounded-lg p-4\">\n                        <ResponsiveContainer width=\"100%\" height={250}>\n                          <ScatterChart data={[\n                            { x: 1.68e-3, y: 1.83e-4, name: 'CZ vs SX Error' },\n                            { x: 4.7e-3, y: 1.343e-3, name: 'Readout vs Min' },\n                            { x: 6.94e-4, y: 1.99e-1, name: 'Best vs Max' }\n                          ]}>\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis \n                              type=\"number\" \n                              dataKey=\"x\" \n                              fontSize={12}\n                              tickFormatter={formatScientific}\n                              name=\"Error Rate A\"\n                            />\n                            <YAxis \n                              type=\"number\" \n                              dataKey=\"y\" \n                              fontSize={12}\n                              tickFormatter={formatScientific}\n                              name=\"Error Rate B\"\n                            />\n                            <Tooltip \n                              formatter={(value, name) => [formatScientific(Number(value)), name]}\n                            />\n                            <Scatter dataKey=\"y\" fill=\"#8884d8\" />\n                          </ScatterChart>\n                        </ResponsiveContainer>\n                      </div>\n                    </div>\n\n                    {/* Detailed Error Rates Table */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div className=\"space-y-4\">\n                        <h5 className=\"font-medium text-gray-700 dark:text-gray-300\">Error Rates</h5>\n                        <div className=\"space-y-3\">\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm font-medium\">2Q Error (best):</span>\n                            <span className=\"text-sm text-gray-600 dark:text-gray-400 font-mono\">6.94E-4</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm font-medium\">Median CZ Error:</span>\n                            <span className=\"text-sm text-gray-600 dark:text-gray-400 font-mono\">1.68E-3</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm font-medium\">Median SX Error:</span>\n                            <span className=\"text-sm text-gray-600 dark:text-gray-400 font-mono\">1.83E-4</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm font-medium\">Readout Error:</span>\n                            <span className=\"text-sm text-gray-600 dark:text-gray-400 font-mono\">4.7E-3</span>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-4\">\n                        <h5 className=\"font-medium text-gray-700 dark:text-gray-300\">Coherence Times</h5>\n                        <div className=\"space-y-3\">\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm font-medium\">Median T1:</span>\n                            <span className=\"text-sm text-gray-600 dark:text-gray-400\">311.79 μs</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm font-medium\">Median T2:</span>\n                            <span className=\"text-sm text-gray-600 dark:text-gray-400\">353.48 μs</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm font-medium\">CLOPS:</span>\n                            <span className=\"text-sm text-gray-600 dark:text-gray-400\">180K</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm font-medium\">Last Calibrated:</span>\n                            <span className=\"text-sm text-gray-600 dark:text-gray-400\">31 minutes ago</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </TabsContent>\n              </Tabs>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n    </AnimatePresence>\n  );\n}","size_bytes":50346},"client/src/components/dashboard/job-form.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Plus, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { AIJobAssistant } from \"@/components/ai/ai-job-assistant\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { insertJobSchema, type InsertJob } from \"@shared/schema\";\nimport { useCreateJob, useBackends } from \"@/hooks/use-jobs\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface JobFormProps {\n  onClose: () => void;\n}\n\nconst formVariants = {\n  hidden: { opacity: 0, scale: 0.8 },\n  visible: { opacity: 1, scale: 1 },\n  exit: { opacity: 0, scale: 0.8 },\n};\n\nexport function JobForm({ onClose }: JobFormProps) {\n  const { data: backends = [] } = useBackends();\n  const createJob = useCreateJob();\n  const { toast } = useToast();\n\n  const form = useForm<InsertJob>({\n    resolver: zodResolver(insertJobSchema),\n    defaultValues: {\n      name: \"\",\n      backend: \"\",\n      status: \"queued\",\n      qubits: 5,\n      shots: 1024,\n      program: \"// Quantum Circuit\\nqc = QuantumCircuit(2)\\nqc.h(0)\\nqc.cx(0, 1)\\nqc.measure_all()\",\n      tags: [],\n    },\n  });\n\n  const onSubmit = async (data: InsertJob) => {\n    try {\n      await createJob.mutateAsync(data);\n      toast({\n        title: \"Job submitted successfully\",\n        description: `Job \"${data.name}\" has been queued for execution`,\n      });\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Failed to submit job\",\n        description: \"Please check your inputs and try again\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const availableBackends = backends.filter(b => b.status === \"available\" || b.status === \"busy\");\n\n  // Get current form values for AI assistant\n  const watchedValues = form.watch();\n  const jobData = {\n    qubits: watchedValues.qubits || 0,\n    shots: watchedValues.shots || 0,\n    backend: watchedValues.backend || \"\",\n    program: watchedValues.program || \"\"\n  };\n\n  // Handle AI suggestions\n  const handleSuggestionApply = (suggestion: string) => {\n    toast({\n      title: \"AI Suggestion\",\n      description: suggestion,\n    });\n  };\n\n  const handleCircuitGenerate = (code: string) => {\n    form.setValue(\"program\", code);\n    toast({\n      title: \"Circuit Generated\",\n      description: \"AI-generated circuit code has been applied to your job\",\n    });\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n      <motion.div\n        variants={formVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n        exit=\"exit\"\n        className=\"w-full max-w-2xl\"\n      >\n        <Card className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700\">\n          <CardHeader className=\"flex flex-row items-center justify-between border-b border-gray-200 dark:border-gray-700\">\n            <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white\">Submit New Quantum Job</h2>\n            <Button variant=\"ghost\" size=\"icon\" onClick={onClose} data-testid=\"button-close-form\">\n              <X className=\"w-5 h-5\" />\n            </Button>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Job Name</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"My Quantum Experiment\"\n                            {...field}\n                            data-testid=\"input-job-name\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"backend\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Backend</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-backend\">\n                              <SelectValue placeholder=\"Select quantum computer\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {availableBackends.map((backend) => (\n                              <SelectItem key={backend.id} value={backend.name}>\n                                {backend.name} ({backend.qubits} qubits, Queue: {backend.queueLength})\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"qubits\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Number of Qubits</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            min=\"1\"\n                            max=\"127\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value))}\n                            data-testid=\"input-qubits\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"shots\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Number of Shots</FormLabel>\n                        <Select onValueChange={(value) => field.onChange(parseInt(value))}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-shots\">\n                              <SelectValue placeholder=\"Select shots\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"1024\">1,024</SelectItem>\n                            <SelectItem value=\"2048\">2,048</SelectItem>\n                            <SelectItem value=\"4096\">4,096</SelectItem>\n                            <SelectItem value=\"8192\">8,192</SelectItem>\n                            <SelectItem value=\"16384\">16,384</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"program\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Quantum Circuit Code</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Enter your quantum circuit code...\"\n                          className=\"min-h-[120px] font-mono text-sm\"\n                          {...field}\n                          data-testid=\"textarea-program\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* AI Assistant */}\n                <AIJobAssistant \n                  jobData={jobData}\n                  onSuggestionApply={handleSuggestionApply}\n                  onCircuitGenerate={handleCircuitGenerate}\n                />\n\n                <div className=\"flex justify-end space-x-3 pt-4\">\n                  <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\"\n                    disabled={createJob.isPending}\n                    data-testid=\"button-submit-job\"\n                  >\n                    {createJob.isPending ? (\n                      <motion.div\n                        animate={{ rotate: 360 }}\n                        transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                        className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2\"\n                      />\n                    ) : (\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                    )}\n                    {createJob.isPending ? \"Submitting...\" : \"Submit Job\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":9973},"client/src/components/dashboard/job-status-distribution.tsx":{"content":"\nimport { useJobs } from \"@/hooks/use-jobs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { motion } from \"framer-motion\";\nimport { CheckCircle, XCircle, Clock, Zap, Square, Activity } from \"lucide-react\";\n\nconst statusConfig = {\n  done: {\n    label: \"Completed\",\n    icon: CheckCircle,\n    color: \"text-green-600\",\n    bgColor: \"bg-green-100 dark:bg-green-900/30\",\n    progressColor: \"bg-green-500\",\n  },\n  running: {\n    label: \"Running\",\n    icon: Zap,\n    color: \"text-blue-600\",\n    bgColor: \"bg-blue-100 dark:bg-blue-900/30\",\n    progressColor: \"bg-blue-500\",\n  },\n  queued: {\n    label: \"Queued\",\n    icon: Clock,\n    color: \"text-yellow-600\",\n    bgColor: \"bg-yellow-100 dark:bg-yellow-900/30\",\n    progressColor: \"bg-yellow-500\",\n  },\n  failed: {\n    label: \"Failed\",\n    icon: XCircle,\n    color: \"text-red-600\",\n    bgColor: \"bg-red-100 dark:bg-red-900/30\",\n    progressColor: \"bg-red-500\",\n  },\n  cancelled: {\n    label: \"Cancelled\",\n    icon: Square,\n    color: \"text-gray-600\",\n    bgColor: \"bg-gray-100 dark:bg-gray-900/30\",\n    progressColor: \"bg-gray-500\",\n  },\n};\n\nexport function JobStatusDistribution() {\n  const { data, isLoading } = useJobs(1, 1000); // Get all jobs for accurate counts\n  const jobs = data?.jobs || [];\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        {Array.from({ length: 5 }).map((_, i) => (\n          <div key={i} className=\"animate-pulse\">\n            <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-20 mb-2\"></div>\n            <div className=\"h-2 bg-gray-200 dark:bg-gray-700 rounded w-full\"></div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  const totalJobs = jobs.length;\n  const statusCounts = {\n    done: jobs.filter(job => job.status === \"done\").length,\n    running: jobs.filter(job => job.status === \"running\").length,\n    queued: jobs.filter(job => job.status === \"queued\").length,\n    failed: jobs.filter(job => job.status === \"failed\").length,\n    cancelled: jobs.filter(job => job.status === \"cancelled\").length,\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {Object.entries(statusConfig).map(([status, config], index) => {\n        const count = statusCounts[status as keyof typeof statusCounts];\n        const percentage = totalJobs > 0 ? (count / totalJobs) * 100 : 0;\n        \n        return (\n          <motion.div\n            key={status}\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ delay: index * 0.1 }}\n            className=\"space-y-2\"\n          >\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <config.icon className={`w-4 h-4 ${config.color}`} />\n                <span className=\"text-sm font-medium\">{config.label}</span>\n                <Badge className={config.bgColor}>\n                  {count}\n                </Badge>\n              </div>\n              <span className=\"text-xs text-muted-foreground\">\n                {percentage.toFixed(1)}%\n              </span>\n            </div>\n            <Progress\n              value={percentage}\n              className=\"h-2\"\n              style={{\n                background: \"var(--muted)\",\n              }}\n            />\n          </motion.div>\n        );\n      })}\n      \n      {totalJobs === 0 && (\n        <div className=\"text-center py-8 text-muted-foreground\">\n          <Activity className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n          <p>No jobs found</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":3608},"client/src/components/dashboard/jobs-table.tsx":{"content":"import { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Eye, Square, Download, RotateCcw, Plus, ArrowUpDown } from \"lucide-react\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useJobs, useUpdateJobStatus, useDeleteJob } from \"@/hooks/use-jobs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { JobForm } from \"./job-form\";\nimport { JobDetailsModal } from \"./job-details-modal\";\nimport type { Job, JobStatus } from \"@shared/schema\";\nimport { format, formatDistanceToNow } from \"date-fns\";\n\nconst statusColors: Record<JobStatus, string> = {\n  queued: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400\",\n  running: \"bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400\",\n  done: \"bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400\",\n  failed: \"bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400\",\n  cancelled: \"bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400\",\n};\n\nconst tableRowVariants = {\n  hidden: { opacity: 0, x: -20 },\n  visible: { opacity: 1, x: 0 },\n  exit: { opacity: 0, x: 20 },\n};\n\ninterface JobsTableProps {\n  searchQuery: string;\n}\n\nexport function JobsTable({ searchQuery }: JobsTableProps) {\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [backendFilter, setBackendFilter] = useState<string>(\"all\");\n  const [sortBy, setSortBy] = useState<string>(\"submissionTime\");\n  const [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\">(\"desc\");\n  const [showJobForm, setShowJobForm] = useState(false);\n  const [selectedJob, setSelectedJob] = useState<Job | null>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  \n  const { data, isLoading } = useJobs(currentPage, 10);\n  const jobs = data?.jobs || [];\n  const pagination = data?.pagination;\n  const updateJobStatus = useUpdateJobStatus();\n  const deleteJob = useDeleteJob();\n  const { toast } = useToast();\n\n  // Enhanced search with keyword matching\n  const filteredJobs = jobs\n    .filter((job) => {\n      if (searchQuery) {\n        const query = searchQuery.toLowerCase().trim();\n        \n        // Direct field matches\n        const directMatches = [\n          job.id.toLowerCase(),\n          job.backend.toLowerCase(),\n          job.status.toLowerCase(),\n          job.name?.toLowerCase() || \"\",\n          ...(job.tags || []).map(tag => tag.toLowerCase()),\n          job.error?.toLowerCase() || \"\"\n        ];\n\n        // Check for direct matches\n        const hasDirectMatch = directMatches.some(field => field.includes(query));\n        \n        // Enhanced keyword matching\n        const keywords = query.split(' ').filter(word => word.length > 0);\n        const hasKeywordMatch = keywords.every(keyword => \n          directMatches.some(field => field.includes(keyword))\n        );\n\n        // Special keyword handling\n        const specialKeywords = {\n          'error': job.status === 'failed' || Boolean(job.error),\n          'success': job.status === 'done',\n          'active': job.status === 'running',\n          'pending': job.status === 'queued',\n          'timeout': job.error?.toLowerCase().includes('timeout') || false,\n          'circuit': job.name?.toLowerCase().includes('circuit') || false,\n          'simulation': job.backend.toLowerCase().includes('simulator'),\n          'hardware': !job.backend.toLowerCase().includes('simulator'),\n          'recent': new Date(job.submissionTime).getTime() > Date.now() - 3600000, // Last hour\n          'today': new Date(job.submissionTime).toDateString() === new Date().toDateString()\n        };\n\n        const hasSpecialMatch = Object.entries(specialKeywords).some(([keyword, condition]) =>\n          query.includes(keyword.toLowerCase()) && condition\n        );\n\n        return hasDirectMatch || hasKeywordMatch || hasSpecialMatch;\n      }\n      return true;\n    })\n    .filter((job) => statusFilter === \"all\" || job.status === statusFilter)\n    .filter((job) => backendFilter === \"all\" || job.backend === backendFilter)\n    .sort((a, b) => {\n      const aVal = a[sortBy as keyof Job] as any;\n      const bVal = b[sortBy as keyof Job] as any;\n      \n      if (sortOrder === \"asc\") {\n        return aVal > bVal ? 1 : -1;\n      } else {\n        return aVal < bVal ? 1 : -1;\n      }\n    });\n\n  const handleStatusUpdate = async (jobId: string, status: JobStatus) => {\n    try {\n      await updateJobStatus.mutateAsync({ id: jobId, status });\n      toast({\n        title: \"Job updated\",\n        description: `Job ${jobId} status changed to ${status}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update job status\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDeleteJob = async (jobId: string) => {\n    try {\n      await deleteJob.mutateAsync(jobId);\n      toast({\n        title: \"Job deleted\",\n        description: `Job ${jobId} has been deleted`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete job\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const formatDuration = (duration: number | null) => {\n    if (!duration) return \"-\";\n    const minutes = Math.floor(duration / 60);\n    const seconds = duration % 60;\n    return `${minutes}:${seconds.toString().padStart(2, \"0\")}`;\n  };\n\n  const uniqueBackends = Array.from(new Set(jobs.map(job => job.backend)));\n\n  const handlePageChange = (newPage: number) => {\n    setCurrentPage(newPage);\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-gray-200/50 dark:border-gray-700/50\">\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            {Array.from({ length: 5 }).map((_, i) => (\n              <div key={i} className=\"h-12 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-gray-200/50 dark:border-gray-700/50 overflow-hidden\">\n      <CardHeader className=\"border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Quantum Jobs</h2>\n          <div className=\"flex items-center space-x-3\">\n            {/* Filters */}\n            <Select value={backendFilter} onValueChange={setBackendFilter}>\n              <SelectTrigger className=\"w-40\" data-testid=\"select-backend-filter\">\n                <SelectValue placeholder=\"All Backends\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Backends</SelectItem>\n                {uniqueBackends.map(backend => (\n                  <SelectItem key={backend} value={backend}>{backend}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-32\" data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"All Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"queued\">Queued</SelectItem>\n                <SelectItem value=\"running\">Running</SelectItem>\n                <SelectItem value=\"done\">Done</SelectItem>\n                <SelectItem value=\"failed\">Failed</SelectItem>\n                <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Button \n              className=\"bg-blue-600 hover:bg-blue-700\" \n              onClick={() => setShowJobForm(true)}\n              data-testid=\"button-new-job\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Job\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n\n      <div className=\"overflow-x-auto\">\n        <Table>\n          <TableHeader className=\"bg-gray-50 dark:bg-gray-900/50\">\n            <TableRow>\n              <TableHead \n                className=\"cursor-pointer hover:text-gray-700 dark:hover:text-gray-300\"\n                onClick={() => {\n                  if (sortBy === \"id\") {\n                    setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n                  } else {\n                    setSortBy(\"id\");\n                    setSortOrder(\"asc\");\n                  }\n                }}\n                data-testid=\"header-job-id\"\n              >\n                Job ID <ArrowUpDown className=\"w-3 h-3 ml-1 inline\" />\n              </TableHead>\n              <TableHead \n                className=\"cursor-pointer hover:text-gray-700 dark:hover:text-gray-300\"\n                onClick={() => {\n                  if (sortBy === \"backend\") {\n                    setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n                  } else {\n                    setSortBy(\"backend\");\n                    setSortOrder(\"asc\");\n                  }\n                }}\n                data-testid=\"header-backend\"\n              >\n                Backend <ArrowUpDown className=\"w-3 h-3 ml-1 inline\" />\n              </TableHead>\n              <TableHead data-testid=\"header-status\">Status</TableHead>\n              <TableHead data-testid=\"header-queue-position\">Queue Position</TableHead>\n              <TableHead \n                className=\"cursor-pointer hover:text-gray-700 dark:hover:text-gray-300\"\n                onClick={() => {\n                  if (sortBy === \"submissionTime\") {\n                    setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n                  } else {\n                    setSortBy(\"submissionTime\");\n                    setSortOrder(\"desc\");\n                  }\n                }}\n                data-testid=\"header-submitted\"\n              >\n                Submitted <ArrowUpDown className=\"w-3 h-3 ml-1 inline\" />\n              </TableHead>\n              <TableHead data-testid=\"header-duration\">Duration</TableHead>\n              <TableHead data-testid=\"header-actions\">Actions</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            <AnimatePresence>\n              {filteredJobs.map((job, index) => (\n                <motion.tr\n                  key={job.id}\n                  variants={tableRowVariants}\n                  initial=\"hidden\"\n                  animate=\"visible\"\n                  exit=\"exit\"\n                  transition={{ delay: index * 0.05 }}\n                  className=\"hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors duration-150\"\n                  data-testid={`job-row-${job.id}`}\n                >\n                  <TableCell className=\"font-mono text-sm\">{job.id}</TableCell>\n                  <TableCell>{job.backend}</TableCell>\n                  <TableCell>\n                    <Badge className={`${statusColors[job.status as JobStatus]} animate-fade-in`}>\n                      <motion.div \n                        className=\"w-2 h-2 rounded-full mr-1.5\"\n                        animate={job.status === \"running\" ? { opacity: [1, 0.3, 1] } : {}}\n                        transition={{ duration: 2, repeat: Infinity }}\n                        style={{\n                          backgroundColor: job.status === \"running\" ? \"#10b981\" : \n                                         job.status === \"queued\" ? \"#f59e0b\" :\n                                         job.status === \"done\" ? \"#3b82f6\" :\n                                         job.status === \"failed\" ? \"#ef4444\" : \"#6b7280\"\n                        }}\n                      />\n                      {job.status.charAt(0).toUpperCase() + job.status.slice(1)}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    {job.queuePosition ? `#${job.queuePosition}` : \"-\"}\n                  </TableCell>\n                  <TableCell className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    {formatDistanceToNow(new Date(job.submissionTime), { addSuffix: true })}\n                  </TableCell>\n                  <TableCell className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    {formatDuration(job.duration)}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"text-blue-600 hover:text-blue-700\"\n                        onClick={() => setSelectedJob(job)}\n                        data-testid={`button-view-${job.id}`}\n                      >\n                        <Eye className=\"w-4 h-4\" />\n                      </Button>\n                      {job.status === \"running\" && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"text-red-500 hover:text-red-600\"\n                          onClick={() => handleStatusUpdate(job.id, \"cancelled\")}\n                          data-testid={`button-cancel-${job.id}`}\n                        >\n                          <Square className=\"w-4 h-4\" />\n                        </Button>\n                      )}\n                      {job.status === \"done\" && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"text-green-500 hover:text-green-600\"\n                          data-testid={`button-download-${job.id}`}\n                        >\n                          <Download className=\"w-4 h-4\" />\n                        </Button>\n                      )}\n                      {job.status === \"failed\" && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"text-yellow-500 hover:text-yellow-600\"\n                          onClick={() => handleStatusUpdate(job.id, \"queued\")}\n                          data-testid={`button-retry-${job.id}`}\n                        >\n                          <RotateCcw className=\"w-4 h-4\" />\n                        </Button>\n                      )}\n                    </div>\n                  </TableCell>\n                </motion.tr>\n              ))}\n            </AnimatePresence>\n          </TableBody>\n        </Table>\n      </div>\n\n      <div className=\"px-6 py-3 border-t border-gray-200 dark:border-gray-700\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n            {pagination && (\n              <>\n                Showing {((pagination.currentPage - 1) * pagination.limit) + 1} to {Math.min(pagination.currentPage * pagination.limit, pagination.totalJobs)} of {pagination.totalJobs} jobs\n              </>\n            )}\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              disabled={!pagination || pagination.currentPage === 1}\n              onClick={() => pagination && handlePageChange(pagination.currentPage - 1)}\n              data-testid=\"button-previous-page\"\n            >\n              Previous\n            </Button>\n            \n            {pagination && Array.from({ length: Math.min(5, pagination.totalPages) }, (_, i) => {\n              let pageNum;\n              if (pagination.totalPages <= 5) {\n                pageNum = i + 1;\n              } else if (pagination.currentPage <= 3) {\n                pageNum = i + 1;\n              } else if (pagination.currentPage >= pagination.totalPages - 2) {\n                pageNum = pagination.totalPages - 4 + i;\n              } else {\n                pageNum = pagination.currentPage - 2 + i;\n              }\n              \n              return (\n                <Button\n                  key={pageNum}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className={pagination.currentPage === pageNum ? \"bg-blue-600 text-white\" : \"\"}\n                  onClick={() => handlePageChange(pageNum)}\n                  data-testid={`button-page-${pageNum}`}\n                >\n                  {pageNum}\n                </Button>\n              );\n            })}\n            \n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              disabled={!pagination || pagination.currentPage === pagination.totalPages}\n              onClick={() => pagination && handlePageChange(pagination.currentPage + 1)}\n              data-testid=\"button-next-page\"\n            >\n              Next\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Job Creation Form Modal */}\n      <AnimatePresence>\n        {showJobForm && (\n          <JobForm onClose={() => setShowJobForm(false)} />\n        )}\n      </AnimatePresence>\n\n      {/* Job Details Modal */}\n      <AnimatePresence>\n        {selectedJob && (\n          <JobDetailsModal \n            job={selectedJob} \n            onClose={() => setSelectedJob(null)} \n          />\n        )}\n      </AnimatePresence>\n    </Card>\n  );\n}\n","size_bytes":17649},"client/src/components/dashboard/live-activity-feed.tsx":{"content":"\nimport { useJobs } from \"@/hooks/use-jobs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { motion } from \"framer-motion\";\nimport { CheckCircle, XCircle, Clock, Zap, Square, ArrowRight } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { JobStatus } from \"@shared/schema\";\n\nconst statusConfig: Record<JobStatus, { \n  icon: React.ComponentType<{ className?: string }>;\n  color: string;\n  bgColor: string;\n}> = {\n  done: {\n    icon: CheckCircle,\n    color: \"text-green-600\",\n    bgColor: \"bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400\",\n  },\n  running: {\n    icon: Zap,\n    color: \"text-blue-600\",\n    bgColor: \"bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400\",\n  },\n  queued: {\n    icon: Clock,\n    color: \"text-yellow-600\",\n    bgColor: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400\",\n  },\n  failed: {\n    icon: XCircle,\n    color: \"text-red-600\",\n    bgColor: \"bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400\",\n  },\n  cancelled: {\n    icon: Square,\n    color: \"text-gray-600\",\n    bgColor: \"bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400\",\n  },\n};\n\nexport function LiveActivityFeed() {\n  const { data, isLoading } = useJobs(1, 50);\n  const jobs = data?.jobs || [];\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-3\">\n        {Array.from({ length: 5 }).map((_, i) => (\n          <div key={i} className=\"animate-pulse flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n            <div className=\"flex-1 space-y-1\">\n              <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4\"></div>\n              <div className=\"h-3 bg-gray-200 dark:bg-gray-700 rounded w-1/2\"></div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  // Get recent activity (jobs from last 2 hours or active jobs)\n  const recentJobs = jobs\n    .filter(job => {\n      const isRecent = new Date(job.submissionTime).getTime() > Date.now() - 2 * 60 * 60 * 1000;\n      const isActive = job.status === \"running\" || job.status === \"queued\";\n      return isRecent || isActive;\n    })\n    .slice(0, 8);\n\n  return (\n    <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n      {recentJobs.map((job, index) => {\n        const config = statusConfig[job.status];\n        const StatusIcon = config.icon;\n        \n        return (\n          <motion.div\n            key={job.id}\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: index * 0.05 }}\n            className=\"flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800/50 transition-colors\"\n          >\n            <div className={`p-1.5 rounded-full ${config.color === \"text-blue-600\" && job.status === \"running\" ? \"animate-pulse\" : \"\"}`}>\n              <StatusIcon className={`w-4 h-4 ${config.color}`} />\n            </div>\n            \n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-center space-x-2\">\n                <p className=\"text-sm font-medium truncate\">\n                  {job.name || job.id}\n                </p>\n                <ArrowRight className=\"w-3 h-3 text-muted-foreground flex-shrink-0\" />\n                <span className=\"text-xs text-muted-foreground flex-shrink-0\">\n                  {job.backend}\n                </span>\n              </div>\n              <div className=\"flex items-center space-x-2 mt-1\">\n                <Badge className={`${config.bgColor} text-xs`}>\n                  {job.status.charAt(0).toUpperCase() + job.status.slice(1)}\n                </Badge>\n                <span className=\"text-xs text-muted-foreground\">\n                  {formatDistanceToNow(new Date(job.submissionTime), { addSuffix: true })}\n                </span>\n                {job.queuePosition && (\n                  <span className=\"text-xs text-muted-foreground\">\n                    • Queue #{job.queuePosition}\n                  </span>\n                )}\n              </div>\n            </div>\n            \n            {job.status === \"running\" && (\n              <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse flex-shrink-0\"></div>\n            )}\n          </motion.div>\n        );\n      })}\n      \n      {recentJobs.length === 0 && (\n        <div className=\"text-center py-8 text-muted-foreground\">\n          <Clock className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n          <p className=\"text-sm\">No recent activity</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":4611},"client/src/components/dashboard/notification-panel.tsx":{"content":"import { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Bell, X, CheckCircle, XCircle, Clock, Play, Calendar, TrendingUp } from \"lucide-react\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useJobStats, useJobs } from \"@/hooks/use-jobs\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface NotificationPanelProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst panelVariants = {\n  hidden: { opacity: 0, x: 100, scale: 0.95 },\n  visible: { \n    opacity: 1, \n    x: 0, \n    scale: 1,\n    transition: {\n      type: \"spring\",\n      stiffness: 300,\n      damping: 30\n    }\n  },\n  exit: { \n    opacity: 0, \n    x: 100, \n    scale: 0.95,\n    transition: {\n      duration: 0.2\n    }\n  }\n};\n\nconst notificationVariants = {\n  hidden: { opacity: 0, y: 20 },\n  visible: (i: number) => ({\n    opacity: 1,\n    y: 0,\n    transition: {\n      delay: i * 0.1,\n      duration: 0.3\n    }\n  })\n};\n\nexport function NotificationPanel({ isOpen, onClose }: NotificationPanelProps) {\n  const { data: stats } = useJobStats();\n  const { data: jobsData } = useJobs(1, 50);\n  const jobs = jobsData?.jobs || [];\n\n  // Get recent completed jobs (last 24 hours)\n  const recentCompletedJobs = jobs\n    .filter(job => \n      (job.status === \"done\" || job.status === \"failed\") && \n      job.endTime && \n      new Date(job.endTime).getTime() > Date.now() - 24 * 60 * 60 * 1000\n    )\n    .sort((a, b) => new Date(b.endTime!).getTime() - new Date(a.endTime!).getTime())\n    .slice(0, 10);\n\n  // Get running jobs\n  const runningJobs = jobs.filter(job => job.status === \"running\").slice(0, 5);\n\n  // Get queued jobs\n  const queuedJobs = jobs.filter(job => job.status === \"queued\").slice(0, 5);\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"done\": return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n      case \"failed\": return <XCircle className=\"w-4 h-4 text-red-500\" />;\n      case \"running\": return <Play className=\"w-4 h-4 text-blue-500\" />;\n      case \"queued\": return <Clock className=\"w-4 h-4 text-yellow-500\" />;\n      default: return <Clock className=\"w-4 h-4 text-gray-500\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"done\": return \"text-green-600 bg-green-50 dark:bg-green-900/20\";\n      case \"failed\": return \"text-red-600 bg-red-50 dark:bg-red-900/20\";\n      case \"running\": return \"text-blue-600 bg-blue-50 dark:bg-blue-900/20\";\n      case \"queued\": return \"text-yellow-600 bg-yellow-50 dark:bg-yellow-900/20\";\n      default: return \"text-gray-600 bg-gray-50 dark:bg-gray-900/20\";\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <>\n      {/* Backdrop */}\n      <motion.div\n        className=\"fixed inset-0 bg-black/20 backdrop-blur-sm z-40\"\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        onClick={onClose}\n      />\n\n      {/* Panel */}\n      <motion.div\n        className=\"fixed top-16 right-4 w-96 max-h-[80vh] bg-white dark:bg-gray-800 shadow-2xl z-50 overflow-hidden border border-gray-200 dark:border-gray-700 rounded-lg\"\n        variants={panelVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n        exit=\"exit\"\n      >\n        <div className=\"flex flex-col h-full\">\n          {/* Header */}\n          <div className=\"p-6 border-b border-gray-200 dark:border-gray-700 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-2 bg-blue-600 rounded-lg\">\n                  <Bell className=\"w-5 h-5 text-white\" />\n                </div>\n                <div>\n                  <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                    Notifications\n                  </h2>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    {recentCompletedJobs.length} completed today\n                  </p>\n                </div>\n              </div>\n              <Button variant=\"ghost\" size=\"icon\" onClick={onClose} data-testid=\"button-close-notifications\">\n                <X className=\"w-5 h-5\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Summary Stats */}\n          <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\n            <div className=\"grid grid-cols-3 gap-3\">\n              <motion.div \n                className=\"text-center p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\"\n                whileHover={{ scale: 1.05 }}\n                transition={{ duration: 0.2 }}\n              >\n                <div className=\"text-lg font-bold text-green-600 dark:text-green-400\">\n                  {stats?.totalJobs || 0}\n                </div>\n                <div className=\"text-xs text-green-600 dark:text-green-400\">Total Jobs</div>\n              </motion.div>\n              <motion.div \n                className=\"text-center p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\"\n                whileHover={{ scale: 1.05 }}\n                transition={{ duration: 0.2 }}\n              >\n                <div className=\"text-lg font-bold text-blue-600 dark:text-blue-400\">\n                  {stats?.runningJobs || 0}\n                </div>\n                <div className=\"text-xs text-blue-600 dark:text-blue-400\">Running</div>\n              </motion.div>\n              <motion.div \n                className=\"text-center p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg\"\n                whileHover={{ scale: 1.05 }}\n                transition={{ duration: 0.2 }}\n              >\n                <div className=\"text-lg font-bold text-purple-600 dark:text-purple-400\">\n                  {Math.round(stats?.successRate || 0)}%\n                </div>\n                <div className=\"text-xs text-purple-600 dark:text-purple-400\">Success Rate</div>\n              </motion.div>\n            </div>\n          </div>\n\n          {/* Scrollable Content */}\n          <div className=\"flex-1 overflow-y-auto notification-scroll\">\n            {/* Recent Completed Jobs */}\n            <div className=\"p-4\">\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <TrendingUp className=\"w-4 h-4 text-green-600\" />\n                <h3 className=\"font-medium text-gray-900 dark:text-white\">Recent Completions</h3>\n                <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400\">\n                  {recentCompletedJobs.length}\n                </Badge>\n              </div>\n\n              <div className=\"space-y-3\">\n                <AnimatePresence>\n                  {recentCompletedJobs.map((job, i) => (\n                    <motion.div\n                      key={job.id}\n                      variants={notificationVariants}\n                      initial=\"hidden\"\n                      animate=\"visible\"\n                      custom={i}\n                      className=\"p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg border border-gray-200 dark:border-gray-600\"\n                      data-testid={`notification-completed-${job.id}`}\n                    >\n                      <div className=\"flex items-start space-x-3\">\n                        {getStatusIcon(job.status)}\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center justify-between\">\n                            <p className=\"text-sm font-medium text-gray-900 dark:text-white truncate\">\n                              {job.name}\n                            </p>\n                            <Badge className={`text-xs ${getStatusColor(job.status)}`}>\n                              {job.status}\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm font-medium text-gray-900 dark:text-white truncate\">\n                            {job.name}\n                          </p>\n                          <p className=\"text-xs text-gray-600 dark:text-gray-400 mt-1\">\n                            {job.backend} • {job.endTime && formatDistanceToNow(new Date(job.endTime), { addSuffix: true })}\n                          </p>\n                          {job.duration && (\n                            <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                              Duration: {Math.floor(job.duration / 60)}m {job.duration % 60}s\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                    </motion.div>\n                  ))}\n                </AnimatePresence>\n              </div>\n            </div>\n\n            {/* Currently Running */}\n            {runningJobs.length > 0 && (\n              <div className=\"p-4 border-t border-gray-200 dark:border-gray-700\">\n                <div className=\"flex items-center space-x-2 mb-4\">\n                  <Play className=\"w-4 h-4 text-blue-600\" />\n                  <h3 className=\"font-medium text-gray-900 dark:text-white\">Currently Running</h3>\n                  <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400\">\n                    {runningJobs.length}\n                  </Badge>\n                </div>\n\n                <div className=\"space-y-2 max-h-64 overflow-y-auto scroll-smooth notification-scroll\">\n                  {runningJobs.map((job, i) => (\n                    <motion.div\n                      key={job.id}\n                      variants={notificationVariants}\n                      initial=\"hidden\"\n                      animate=\"visible\"\n                      custom={i}\n                      className=\"p-2 bg-blue-50 dark:bg-blue-900/20 rounded-lg\"\n                      data-testid={`notification-running-${job.id}`}\n                    >\n                      <div className=\"flex items-center space-x-2\">\n                        <Play className=\"w-3 h-3 text-blue-600\" />\n                        <span className=\"text-sm text-gray-900 dark:text-white truncate\">\n                          {job.name}\n                        </span>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {job.backend}\n                        </Badge>\n                      </div>\n                    </motion.div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Queue Status */}\n            {queuedJobs.length > 0 && (\n              <div className=\"p-4 border-t border-gray-200 dark:border-gray-700\">\n                <div className=\"flex items-center space-x-2 mb-4\">\n                  <Clock className=\"w-4 h-4 text-yellow-600\" />\n                  <h3 className=\"font-medium text-gray-900 dark:text-white\">In Queue</h3>\n                  <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400\">\n                    {queuedJobs.length}\n                  </Badge>\n                </div>\n\n                <div className=\"space-y-2 max-h-64 overflow-y-auto scroll-smooth notification-scroll\">\n                  {queuedJobs.map((job, i) => (\n                    <motion.div\n                      key={job.id}\n                      variants={notificationVariants}\n                      initial=\"hidden\"\n                      animate=\"visible\"\n                      custom={i}\n                      className=\"p-2 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg\"\n                      data-testid={`notification-queued-${job.id}`}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Clock className=\"w-3 h-3 text-yellow-600\" />\n                          <span className=\"text-sm text-gray-900 dark:text-white truncate\">\n                            {job.name}\n                          </span>\n                        </div>\n                        {job.queuePosition && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            #{job.queuePosition}\n                          </Badge>\n                        )}\n                      </div>\n                    </motion.div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </motion.div>\n    </>\n  );\n}","size_bytes":12642},"client/src/components/dashboard/notification-widget.tsx":{"content":"\nimport { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Bell, X, CheckCircle, XCircle, Clock, Play, ChevronDown, ChevronUp } from \"lucide-react\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useJobStats, useJobs } from \"@/hooks/use-jobs\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nconst cardVariants = {\n  hidden: { opacity: 0, scale: 0.8, x: 100 },\n  visible: { \n    opacity: 1, \n    scale: 1, \n    x: 0,\n    transition: {\n      type: \"spring\",\n      stiffness: 300,\n      damping: 30\n    }\n  }\n};\n\nconst contentVariants = {\n  collapsed: { height: 0, opacity: 0 },\n  expanded: { \n    height: \"auto\", \n    opacity: 1,\n    transition: {\n      duration: 0.3,\n      ease: \"easeOut\"\n    }\n  }\n};\n\nexport function NotificationWidget() {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const { data: stats } = useJobStats();\n  const { data: jobsData } = useJobs(1, 50);\n  const jobs = jobsData?.jobs || [];\n\n  // Get recent completed jobs (last 24 hours)\n  const recentCompletedJobs = jobs\n    .filter(job => \n      (job.status === \"done\" || job.status === \"failed\") && \n      job.endTime && \n      new Date(job.endTime).getTime() > Date.now() - 24 * 60 * 60 * 1000\n    )\n    .sort((a, b) => new Date(b.endTime!).getTime() - new Date(a.endTime!).getTime())\n    .slice(0, 5);\n\n  // Get running jobs\n  const runningJobs = jobs.filter(job => job.status === \"running\").slice(0, 3);\n\n  // Calculate notification count\n  const notificationCount = runningJobs.length + recentCompletedJobs.length;\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"done\": return <CheckCircle className=\"w-3 h-3 text-green-500\" />;\n      case \"failed\": return <XCircle className=\"w-3 h-3 text-red-500\" />;\n      case \"running\": return <Play className=\"w-3 h-3 text-blue-500\" />;\n      case \"queued\": return <Clock className=\"w-3 h-3 text-yellow-500\" />;\n      default: return <Clock className=\"w-3 h-3 text-gray-500\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"done\": return \"text-green-600 bg-green-50 dark:bg-green-900/20\";\n      case \"failed\": return \"text-red-600 bg-red-50 dark:bg-red-900/20\";\n      case \"running\": return \"text-blue-600 bg-blue-50 dark:bg-blue-900/20\";\n      case \"queued\": return \"text-yellow-600 bg-yellow-50 dark:bg-yellow-900/20\";\n      default: return \"text-gray-600 bg-gray-50 dark:bg-gray-900/20\";\n    }\n  };\n\n  return (\n    <motion.div\n      variants={cardVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n    >\n      <Card className=\"w-80 bg-white/90 dark:bg-gray-800/90 backdrop-blur-md border-gray-200/50 dark:border-gray-700/50 shadow-lg\">\n        <CardHeader \n          className=\"p-4 cursor-pointer hover:bg-gray-50/50 dark:hover:bg-gray-700/50 transition-colors\"\n          onClick={() => setIsExpanded(!isExpanded)}\n        >\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-gradient-to-r from-blue-500 to-purple-500 rounded-lg\">\n                <Bell className=\"w-4 h-4 text-white\" />\n              </div>\n              <div>\n                <h3 className=\"text-sm font-semibold text-gray-900 dark:text-white\">\n                  Notifications\n                </h3>\n                <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                  {notificationCount} updates\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              {notificationCount > 0 && (\n                <Badge className=\"bg-red-500 text-white text-xs\">\n                  {notificationCount}\n                </Badge>\n              )}\n              <motion.div\n                animate={{ rotate: isExpanded ? 180 : 0 }}\n                transition={{ duration: 0.2 }}\n              >\n                <ChevronDown className=\"w-4 h-4 text-gray-400\" />\n              </motion.div>\n            </div>\n          </div>\n        </CardHeader>\n\n        <AnimatePresence>\n          {isExpanded && (\n            <motion.div\n              variants={contentVariants}\n              initial=\"collapsed\"\n              animate=\"expanded\"\n              exit=\"collapsed\"\n            >\n              <CardContent className=\"p-0 max-h-96 overflow-y-auto\">\n                {/* Running Jobs */}\n                {runningJobs.length > 0 && (\n                  <div className=\"p-4 border-t border-gray-200 dark:border-gray-700\">\n                    <div className=\"flex items-center space-x-2 mb-3\">\n                      <Play className=\"w-3 h-3 text-blue-600\" />\n                      <h4 className=\"text-xs font-medium text-gray-900 dark:text-white\">Running Now</h4>\n                    </div>\n                    <div className=\"space-y-2\">\n                      {runningJobs.map((job) => (\n                        <div\n                          key={job.id}\n                          className=\"p-2 bg-blue-50 dark:bg-blue-900/20 rounded-lg\"\n                        >\n                          <div className=\"flex items-center space-x-2\">\n                            <Play className=\"w-3 h-3 text-blue-600\" />\n                            <span className=\"text-xs text-gray-900 dark:text-white truncate flex-1\">\n                              {job.name}\n                            </span>\n                          </div>\n                          <div className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                            {job.backend}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Recent Completions */}\n                {recentCompletedJobs.length > 0 && (\n                  <div className=\"p-4 border-t border-gray-200 dark:border-gray-700\">\n                    <div className=\"flex items-center space-x-2 mb-3\">\n                      <CheckCircle className=\"w-3 h-3 text-green-600\" />\n                      <h4 className=\"text-xs font-medium text-gray-900 dark:text-white\">Recent Completions</h4>\n                    </div>\n                    <div className=\"space-y-2\">\n                      {recentCompletedJobs.map((job) => (\n                        <div\n                          key={job.id}\n                          className=\"p-2 bg-gray-50 dark:bg-gray-700/50 rounded-lg\"\n                        >\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-2 flex-1 min-w-0\">\n                              {getStatusIcon(job.status)}\n                              <span className=\"text-xs text-gray-900 dark:text-white truncate\">\n                                {job.name}\n                              </span>\n                            </div>\n                            <Badge className={`text-xs ${getStatusColor(job.status)}`}>\n                              {job.status}\n                            </Badge>\n                          </div>\n                          <div className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                            {job.backend} • {job.endTime && formatDistanceToNow(new Date(job.endTime), { addSuffix: true })}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {notificationCount === 0 && (\n                  <div className=\"p-4 text-center border-t border-gray-200 dark:border-gray-700\">\n                    <Bell className=\"w-8 h-8 text-gray-300 dark:text-gray-600 mx-auto mb-2\" />\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">No new notifications</p>\n                  </div>\n                )}\n              </CardContent>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </Card>\n    </motion.div>\n  );\n}\n","size_bytes":8132},"client/src/components/dashboard/session-form.tsx":{"content":"\nimport { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { X, Plus, Save } from \"lucide-react\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface SessionFormProps {\n  onClose: () => void;\n}\n\nexport function SessionForm({ onClose }: SessionFormProps) {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    tags: \"\",\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      toast({\n        title: \"Session created\",\n        description: `Session \"${formData.name}\" has been created successfully.`,\n      });\n      \n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create session\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\n      <motion.div\n        initial={{ opacity: 0, scale: 0.95 }}\n        animate={{ opacity: 1, scale: 1 }}\n        exit={{ opacity: 0, scale: 0.95 }}\n        transition={{ duration: 0.2 }}\n        className=\"w-full max-w-md\"\n      >\n        <Card className=\"bg-white dark:bg-gray-800 shadow-2xl\">\n          <CardHeader className=\"border-b border-gray-200 dark:border-gray-700\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white\">Create New Session</h2>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={onClose}\n                className=\"hover:bg-gray-100 dark:hover:bg-gray-700\"\n                data-testid=\"button-close-session-form\"\n              >\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </CardHeader>\n          \n          <CardContent className=\"p-6\">\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"session-name\" className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                  Session Name *\n                </Label>\n                <Input\n                  id=\"session-name\"\n                  type=\"text\"\n                  placeholder=\"Enter session name\"\n                  value={formData.name}\n                  onChange={(e) => handleInputChange(\"name\", e.target.value)}\n                  required\n                  className=\"w-full\"\n                  data-testid=\"input-session-name\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"session-description\" className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                  Description\n                </Label>\n                <Textarea\n                  id=\"session-description\"\n                  placeholder=\"Enter session description (optional)\"\n                  value={formData.description}\n                  onChange={(e) => handleInputChange(\"description\", e.target.value)}\n                  rows={3}\n                  className=\"w-full\"\n                  data-testid=\"textarea-session-description\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"session-tags\" className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                  Tags\n                </Label>\n                <Input\n                  id=\"session-tags\"\n                  type=\"text\"\n                  placeholder=\"Enter tags separated by commas\"\n                  value={formData.tags}\n                  onChange={(e) => handleInputChange(\"tags\", e.target.value)}\n                  className=\"w-full\"\n                  data-testid=\"input-session-tags\"\n                />\n                <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                  Separate multiple tags with commas (e.g., quantum, experiment, research)\n                </p>\n              </div>\n\n              <div className=\"flex justify-end space-x-3 pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\"\n                  disabled={isSubmitting || !formData.name.trim()}\n                  data-testid=\"button-submit-session\"\n                >\n                  {isSubmitting ? (\n                    <motion.div\n                      animate={{ rotate: 360 }}\n                      transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                      className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2\"\n                    />\n                  ) : (\n                    <Save className=\"w-4 h-4 mr-2\" />\n                  )}\n                  {isSubmitting ? \"Creating...\" : \"Create Session\"}\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":5807},"client/src/components/dashboard/sidebar.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { BackendAdvisor } from \"./backend-advisor\";\nimport { ActiveSessions } from \"./active-sessions\";\nimport { ExportOptions } from \"./export-options\";\nimport { SystemStatus } from \"./system-status\";\n\nconst sidebarVariants = {\n  hidden: { opacity: 0, x: 50 },\n  visible: {\n    opacity: 1,\n    x: 0,\n    transition: {\n      duration: 0.5,\n      staggerChildren: 0.1,\n    },\n  },\n};\n\nconst itemVariants = {\n  hidden: { opacity: 0, y: 20 },\n  visible: {\n    opacity: 1,\n    y: 0,\n    transition: { duration: 0.5 },\n  },\n};\n\ninterface SidebarProps {\n  currentView?: string;\n  onViewChange?: (view: string) => void;\n  onOpenSessionForm?: () => void;\n}\n\nexport function Sidebar({ currentView, onViewChange, onOpenSessionForm }: SidebarProps) {\n  return (\n    <motion.div\n      className=\"xl:col-span-1 space-y-6\"\n      variants={sidebarVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n    >\n      <motion.div variants={itemVariants}>\n        <BackendAdvisor onViewChange={onViewChange} />\n      </motion.div>\n\n      <motion.div variants={itemVariants}>\n        <ActiveSessions onOpenSessionForm={onOpenSessionForm} />\n      </motion.div>\n\n      <motion.div variants={itemVariants}>\n        <ExportOptions />\n      </motion.div>\n\n      <motion.div variants={itemVariants}>\n        <SystemStatus />\n      </motion.div>\n    </motion.div>\n  );\n}","size_bytes":1385},"client/src/components/dashboard/stats-cards.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Activity, Clock, CheckCircle, XCircle, TrendingUp, Zap, BarChart3 } from \"lucide-react\";\nimport { useJobStats } from \"@/hooks/use-jobs\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nasync function fetchJobStats() {\n  const response = await fetch(\"/api/analytics/stats\");\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch job stats\");\n  }\n  return response.json();\n}\n\nfunction AnimatedCounter({ value, duration = 1000 }: { value: number; duration?: number }) {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let start = 0;\n    const end = value;\n    const increment = end / (duration / 16);\n\n    const timer = setInterval(() => {\n      start += increment;\n      if (start >= end) {\n        setCount(end);\n        clearInterval(timer);\n      } else {\n        setCount(Math.floor(start));\n      }\n    }, 16);\n\n    return () => clearInterval(timer);\n  }, [value, duration]);\n\n  return <span>{count.toLocaleString()}</span>;\n}\n\nconst cardVariants = {\n  hidden: { opacity: 0, y: 20 },\n  visible: (i: number) => ({\n    opacity: 1,\n    y: 0,\n    transition: {\n      delay: i * 0.1,\n      duration: 0.5,\n    },\n  }),\n  hover: {\n    scale: 1.02,\n    transition: { duration: 0.2 },\n  },\n};\n\nconst iconVariants = {\n  hover: {\n    scale: 1.1,\n    rotate: 5,\n    transition: { duration: 0.2 },\n  },\n};\n\nexport function StatsCards() {\n  const { data: stats, isLoading } = useJobStats();\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 mb-6\">\n        {Array.from({ length: 5 }).map((_, i) => (\n          <Card key={i} className=\"animate-pulse border-0 shadow-lg\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <div className=\"h-4 bg-gradient-to-r from-gray-300 to-gray-200 rounded w-16\"></div>\n              <div className=\"h-4 w-4 bg-gradient-to-r from-gray-300 to-gray-200 rounded\"></div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-6 bg-gradient-to-r from-gray-300 to-gray-200 rounded w-12 mb-1\"></div>\n              <div className=\"h-3 bg-gradient-to-r from-gray-300 to-gray-200 rounded w-20\"></div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  const statsConfig = [\n    {\n      title: \"Total Jobs\",\n      value: stats?.totalJobs || 0,\n      icon: Activity,\n      description: \"All quantum jobs\",\n      color: \"text-blue-600\",\n      bgGradient: \"from-blue-500/10 to-blue-600/10\",\n      borderColor: \"border-blue-200\",\n      iconBg: \"bg-blue-100\",\n    },\n    {\n      title: \"Running\",\n      value: stats?.runningJobs || 0,\n      icon: Zap,\n      description: \"Currently executing\",\n      color: \"text-green-600\",\n      bgGradient: \"from-green-500/10 to-green-600/10\",\n      borderColor: \"border-green-200\",\n      iconBg: \"bg-green-100\",\n      pulse: true,\n    },\n    {\n      title: \"Queued\",\n      value: stats?.queuedJobs || 0,\n      icon: Clock,\n      description: \"Waiting in queue\",\n      color: \"text-yellow-600\",\n      bgGradient: \"from-yellow-500/10 to-yellow-600/10\",\n      borderColor: \"border-yellow-200\",\n      iconBg: \"bg-yellow-100\",\n    },\n    {\n      title: \"Completed\",\n      value: stats?.completedJobs || 0,\n      icon: CheckCircle,\n      description: \"Successfully finished\",\n      color: \"text-blue-600\",\n      bgGradient: \"from-blue-500/10 to-blue-600/10\",\n      borderColor: \"border-blue-200\",\n      iconBg: \"bg-blue-100\",\n    },\n    {\n      title: \"Failed\",\n      value: stats?.failedJobs || 0,\n      icon: XCircle,\n      description: \"Execution failed\",\n      color: \"text-red-600\",\n      bgGradient: \"from-red-500/10 to-red-600/10\",\n      borderColor: \"border-red-200\",\n      iconBg: \"bg-red-100\",\n    },\n    {\n      title: \"Success Rate\",\n      value: `${stats?.successRate || 0}%`,\n      icon: TrendingUp,\n      description: \"Job success ratio\",\n      color: \"text-purple-600\",\n      bgGradient: \"from-purple-500/10 to-purple-600/10\",\n      borderColor: \"border-purple-200\",\n      iconBg: \"bg-purple-100\",\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4 mb-6\">\n      {statsConfig.map((stat, index) => (\n          <Card \n            key={stat.title} \n            className={cn(\n              \"relative overflow-hidden transition-all duration-300 hover:shadow-xl hover:scale-105\",\n              \"bg-gradient-to-br\", stat.bgGradient,\n              \"border-0 shadow-lg\",\n              stat.borderColor,\n              stat.pulse && stat.value > 0 ? \"animate-pulse\" : \"\"\n            )}\n            style={{\n              animationDelay: `${index * 100}ms`,\n            }}\n          >\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                {stat.title}\n              </CardTitle>\n              <div className={cn(\"p-2 rounded-full\", stat.iconBg, stat.pulse && stat.value > 0 ? \"animate-bounce\" : \"\")}>\n                <stat.icon className={cn(\"h-4 w-4\", stat.color)} />\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className={cn(\"text-2xl font-bold\", stat.color)}>\n                {typeof stat.value === 'number' ? (\n                  <AnimatedCounter value={stat.value} />\n                ) : (\n                  stat.value\n                )}\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-1 font-medium\">\n                {stat.description}\n              </p>\n              {/* Live indicator for running jobs */}\n              {stat.pulse && stat.value > 0 && (\n                <div className=\"flex items-center mt-2\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse mr-2\"></div>\n                  <span className=\"text-xs text-green-600 font-medium\">LIVE</span>\n                </div>\n              )}\n            </CardContent>\n            {/* Subtle background pattern */}\n            <div className=\"absolute -right-4 -top-4 opacity-10\">\n              <stat.icon className=\"h-16 w-16\" />\n            </div>\n          </Card>\n        ))}\n      </div>\n  );\n}","size_bytes":6477},"client/src/components/dashboard/system-status.tsx":{"content":"\nimport { motion } from \"framer-motion\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useJobStats } from \"@/hooks/use-jobs\";\nimport { Cpu, HardDrive, Wifi, Thermometer, Zap, Monitor, Activity } from \"lucide-react\";\n\nconst statusIndicatorVariants = {\n  animate: {\n    opacity: [1, 0.3, 1],\n    transition: {\n      duration: 2,\n      repeat: Infinity,\n      ease: \"easeInOut\",\n    },\n  },\n};\n\nconst MetricCard = ({ icon: Icon, label, value, unit, progress, color = \"blue\" }: {\n  icon: any;\n  label: string;\n  value: string | number;\n  unit?: string;\n  progress?: number;\n  color?: string;\n}) => {\n  const colorMap = {\n    blue: \"text-blue-600 dark:text-blue-400\",\n    green: \"text-green-600 dark:text-green-400\",\n    orange: \"text-orange-600 dark:text-orange-400\",\n    red: \"text-red-600 dark:text-red-400\",\n    purple: \"text-purple-600 dark:text-purple-400\",\n    yellow: \"text-yellow-600 dark:text-yellow-400\",\n  };\n\n  return (\n    <div className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-900/50 rounded-lg\">\n      <div className=\"flex items-center space-x-3\">\n        <Icon className={`w-4 h-4 ${colorMap[color]}`} />\n        <span className=\"text-sm text-gray-600 dark:text-gray-400\">{label}</span>\n      </div>\n      <div className=\"text-right\">\n        <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n          {value}{unit && <span className=\"text-xs text-gray-500 ml-1\">{unit}</span>}\n        </span>\n        {progress !== undefined && (\n          <div className=\"w-16 mt-1\">\n            <Progress value={progress} className=\"h-1\" />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport function SystemStatus() {\n  const { data: stats, dataUpdatedAt } = useJobStats();\n\n  const getLastUpdateText = () => {\n    if (!dataUpdatedAt) return \"Never\";\n    const secondsAgo = Math.floor((Date.now() - dataUpdatedAt) / 1000);\n    return `${secondsAgo}s ago`;\n  };\n\n  // Simulate realistic system metrics based on job activity\n  const activeJobs = (stats?.runningJobs || 0) + (stats?.queuedJobs || 0);\n  \n  // CPU metrics - higher with more active jobs\n  const cpuUsage = Math.min(95, 15 + (activeJobs * 12) + Math.random() * 5);\n  const cpuTemp = Math.min(85, 45 + (cpuUsage * 0.4) + Math.random() * 3);\n  \n  // Memory metrics - based on job complexity\n  const memoryUsage = Math.min(90, 25 + (activeJobs * 8) + Math.random() * 10);\n  const memoryTotal = 32; // GB\n  const memoryUsed = (memoryUsage / 100) * memoryTotal;\n  \n  // Storage metrics\n  const storageUsage = Math.min(95, 40 + (stats?.totalJobs || 0) * 0.1 + Math.random() * 5);\n  const storageTotal = 512; // GB\n  const storageUsed = (storageUsage / 100) * storageTotal;\n  \n  // Network metrics - higher with more job traffic\n  const networkUsage = Math.min(95, 20 + (activeJobs * 15) + Math.random() * 8);\n  const networkSpeed = 1000; // Mbps\n  const currentSpeed = (networkUsage / 100) * networkSpeed;\n  \n  // Power and thermal\n  const powerConsumption = Math.min(750, 200 + (cpuUsage * 4) + Math.random() * 20);\n  const systemLoad = Math.min(100, 10 + (activeJobs * 15) + Math.random() * 5);\n  \n  // GPU metrics (simulated for quantum processing units)\n  const qpuUsage = Math.min(100, activeJobs * 25 + Math.random() * 10);\n  const qpuTemp = Math.min(70, 20 + (qpuUsage * 0.3) + Math.random() * 2);\n\n  return (\n    <Card className=\"bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-gray-200/50 dark:border-gray-700/50\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white flex items-center\">\n            <Monitor className=\"w-5 h-5 mr-2 text-blue-500\" />\n            System Status\n          </h3>\n          <div className=\"flex items-center space-x-2\">\n            <motion.div \n              className=\"w-2 h-2 bg-green-500 rounded-full\"\n              variants={statusIndicatorVariants}\n              animate=\"animate\"\n            />\n            <span className=\"text-xs font-medium text-green-600 dark:text-green-400\">LIVE</span>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* API Status */}\n        <div className=\"flex items-center justify-between p-3 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-700\">\n          <span className=\"text-sm text-gray-600 dark:text-gray-400\">API Status</span>\n          <div className=\"flex items-center space-x-2\">\n            <motion.div \n              className=\"w-2 h-2 bg-green-500 rounded-full\"\n              variants={statusIndicatorVariants}\n              animate=\"animate\"\n            />\n            <span className=\"text-sm font-medium text-green-600 dark:text-green-400\">Operational</span>\n          </div>\n        </div>\n\n        {/* Hardware Metrics Grid */}\n        <div className=\"space-y-2\">\n          <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Hardware Metrics</h4>\n          \n          {/* CPU */}\n          <MetricCard\n            icon={Cpu}\n            label=\"CPU Usage\"\n            value={cpuUsage.toFixed(1)}\n            unit=\"%\"\n            progress={cpuUsage}\n            color={cpuUsage > 80 ? \"red\" : cpuUsage > 60 ? \"orange\" : \"green\"}\n          />\n          \n          {/* Memory */}\n          <MetricCard\n            icon={Activity}\n            label=\"Memory\"\n            value={`${memoryUsed.toFixed(1)}/${memoryTotal}`}\n            unit=\"GB\"\n            progress={memoryUsage}\n            color={memoryUsage > 80 ? \"red\" : memoryUsage > 60 ? \"orange\" : \"blue\"}\n          />\n          \n          {/* Storage */}\n          <MetricCard\n            icon={HardDrive}\n            label=\"Storage\"\n            value={`${storageUsed.toFixed(0)}/${storageTotal}`}\n            unit=\"GB\"\n            progress={storageUsage}\n            color={storageUsage > 90 ? \"red\" : storageUsage > 70 ? \"orange\" : \"green\"}\n          />\n          \n          {/* Network */}\n          <MetricCard\n            icon={Wifi}\n            label=\"Network\"\n            value={currentSpeed.toFixed(0)}\n            unit=\"Mbps\"\n            progress={networkUsage}\n            color=\"purple\"\n          />\n        </div>\n\n        {/* Performance Metrics */}\n        <div className=\"space-y-2\">\n          <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Performance</h4>\n          \n          {/* System Load */}\n          <MetricCard\n            icon={Activity}\n            label=\"System Load\"\n            value={systemLoad.toFixed(1)}\n            unit=\"%\"\n            progress={systemLoad}\n            color={systemLoad > 90 ? \"red\" : systemLoad > 70 ? \"orange\" : \"green\"}\n          />\n          \n          {/* CPU Temperature */}\n          <MetricCard\n            icon={Thermometer}\n            label=\"CPU Temp\"\n            value={cpuTemp.toFixed(0)}\n            unit=\"°C\"\n            progress={(cpuTemp / 100) * 100}\n            color={cpuTemp > 75 ? \"red\" : cpuTemp > 60 ? \"orange\" : \"green\"}\n          />\n          \n          {/* Power Consumption */}\n          <MetricCard\n            icon={Zap}\n            label=\"Power\"\n            value={powerConsumption.toFixed(0)}\n            unit=\"W\"\n            progress={(powerConsumption / 800) * 100}\n            color=\"yellow\"\n          />\n        </div>\n\n        {/* Quantum Processing Unit */}\n        <div className=\"space-y-2\">\n          <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Quantum Processing</h4>\n          \n          <MetricCard\n            icon={Cpu}\n            label=\"QPU Usage\"\n            value={qpuUsage.toFixed(1)}\n            unit=\"%\"\n            progress={qpuUsage}\n            color={qpuUsage > 80 ? \"red\" : qpuUsage > 50 ? \"orange\" : \"blue\"}\n          />\n          \n          <MetricCard\n            icon={Thermometer}\n            label=\"QPU Temp\"\n            value={qpuTemp.toFixed(1)}\n            unit=\"mK\"\n            progress={(qpuTemp / 100) * 100}\n            color={qpuTemp > 50 ? \"orange\" : \"green\"}\n          />\n        </div>\n\n        {/* System Info */}\n        <div className=\"pt-2 border-t border-gray-200 dark:border-gray-700\">\n          <div className=\"grid grid-cols-2 gap-2 text-xs\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-500\">Response Time</span>\n              <span className=\"font-medium text-gray-900 dark:text-white\">142ms</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-500\">Uptime</span>\n              <span className=\"font-medium text-gray-900 dark:text-white\">99.9%</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-500\">Active Jobs</span>\n              <span className=\"font-medium text-gray-900 dark:text-white\">{activeJobs}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-500\">Last Update</span>\n              <span className=\"font-medium text-gray-900 dark:text-white\" data-testid=\"text-last-update\">\n                {getLastUpdateText()}\n              </span>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9346},"client/src/components/dashboard/timeline-view.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { useJobs } from \"@/hooks/use-jobs\";\nimport type { JobStatus } from \"@shared/schema\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nconst statusColors: Record<JobStatus, { bg: string; text: string }> = {\n  queued: { bg: \"bg-yellow-400\", text: \"text-yellow-800\" },\n  running: { bg: \"bg-green-500\", text: \"text-white\" },\n  done: { bg: \"bg-blue-500\", text: \"text-white\" },\n  failed: { bg: \"bg-red-500\", text: \"text-white\" },\n  cancelled: { bg: \"bg-gray-500\", text: \"text-white\" },\n};\n\nconst timelineItemVariants = {\n  hidden: { opacity: 0, x: -50 },\n  visible: (i: number) => ({\n    opacity: 1,\n    x: 0,\n    transition: {\n      delay: i * 0.1,\n      duration: 0.5,\n    },\n  }),\n};\n\nconst progressBarVariants = {\n  initial: { width: 0 },\n  animate: (progress: number) => ({\n    width: `${progress}%`,\n    transition: { duration: 1, ease: \"easeOut\" },\n  }),\n};\n\nexport function TimelineView() {\n  const { data, isLoading } = useJobs(1, 50); // Get more jobs for timeline\n  const jobs = data?.jobs || [];\n\n  // Filter to show only active/recent jobs for timeline\n  const timelineJobs = jobs\n    .filter(job => job.status === \"running\" || job.status === \"queued\" || \n            (job.status === \"done\" && new Date(job.submissionTime).getTime() > Date.now() - 3600000))\n    .slice(0, 5);\n\n  const getJobProgress = (job: any) => {\n    if (job.status === \"done\" || job.status === \"failed\") return 100;\n    if (job.status === \"running\") return 70; // Assume 70% progress for running jobs\n    if (job.status === \"queued\") return 30; // 30% for queued\n    return 0;\n  };\n\n  const getStatusText = (job: any) => {\n    if (job.status === \"running\") return \"Running\";\n    if (job.status === \"queued\") return `Queued (Position #${job.queuePosition || \"?\"})`;\n    if (job.status === \"done\") return \"Completed Successfully\";\n    if (job.status === \"failed\") return \"Failed\";\n    return job.status;\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-gray-200/50 dark:border-gray-700/50\">\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            {Array.from({ length: 3 }).map((_, i) => (\n              <div key={i} className=\"flex items-center space-x-4 p-4 bg-gray-100 dark:bg-gray-700 rounded-lg\">\n                <div className=\"w-32 h-4 bg-gray-200 dark:bg-gray-600 rounded\"></div>\n                <div className=\"flex-1 h-8 bg-gray-200 dark:bg-gray-600 rounded-full\"></div>\n                <div className=\"w-20 h-4 bg-gray-200 dark:bg-gray-600 rounded\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm border-gray-200/50 dark:border-gray-700/50\">\n      <CardHeader>\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Job Timeline</h3>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {timelineJobs.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-gray-500 dark:text-gray-400\">No active jobs to display in timeline</p>\n          </div>\n        ) : (\n          timelineJobs.map((job, index) => (\n            <motion.div\n              key={job.id}\n              custom={index}\n              variants={timelineItemVariants}\n              initial=\"hidden\"\n              animate=\"visible\"\n              className=\"flex items-center space-x-4 p-4 bg-gray-50 dark:bg-gray-900/50 rounded-lg\"\n              data-testid={`timeline-job-${job.id}`}\n            >\n              <div className=\"text-sm font-mono text-gray-600 dark:text-gray-400 w-32 flex-shrink-0\">\n                {job.id}\n              </div>\n              <div className=\"flex-1 relative h-8 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden\">\n                <motion.div\n                  custom={getJobProgress(job)}\n                  variants={progressBarVariants}\n                  initial=\"initial\"\n                  animate=\"animate\"\n                  className={`absolute left-0 top-0 h-full ${statusColors[job.status as JobStatus].bg} rounded-full ${\n                    job.status === \"running\" ? \"animate-pulse\" : \"\"\n                  }`}\n                />\n                <div className={`absolute inset-0 flex items-center justify-center text-xs font-medium ${statusColors[job.status as JobStatus].text}`}>\n                  {getStatusText(job)}\n                </div>\n              </div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-400 w-20 flex-shrink-0\">\n                {job.duration ? `${Math.floor(job.duration / 60)}:${(job.duration % 60).toString().padStart(2, '0')}` : \n                 job.status === \"running\" ? \"Running\" : \n                 formatDistanceToNow(new Date(job.submissionTime), { addSuffix: false })}\n              </div>\n            </motion.div>\n          ))\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5086},"client/src/components/quantum/advanced-quantum-challenges.tsx":{"content":"import { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Rocket, \n  Brain, \n  Zap, \n  Target,\n  Trophy,\n  Star,\n  Lock,\n  CheckCircle,\n  Code,\n  Atom,\n  Cpu,\n  Network\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { QuantumParticleEffects } from \"./quantum-particle-effects\";\n\n// Advanced quantum algorithms and challenges\ninterface AdvancedChallenge {\n  id: string;\n  title: string;\n  description: string;\n  difficulty: 'expert' | 'research' | 'pioneer';\n  category: 'algorithms' | 'cryptography' | 'simulation' | 'optimization' | 'ml';\n  points: number;\n  timeLimit: number; // in minutes\n  prerequisites: string[];\n  learningObjectives: string[];\n  realWorldApplication: string;\n  algorithm: {\n    name: string;\n    complexity: string;\n    quantumAdvantage: string;\n    classicalComparison: string;\n  };\n  implementation: {\n    qubits: number;\n    gates: number;\n    depth: number;\n    steps: string[];\n  };\n  locked: boolean;\n  completed: boolean;\n}\n\n// Advanced quantum challenges dataset\nconst ADVANCED_CHALLENGES: AdvancedChallenge[] = [\n  {\n    id: \"grovers-search\",\n    title: \"Grover's Search Algorithm\",\n    description: \"Implement quantum search to find a marked item in an unsorted database with quadratic speedup\",\n    difficulty: \"expert\",\n    category: \"algorithms\",\n    points: 750,\n    timeLimit: 45,\n    prerequisites: [\"superposition\", \"oracle-construction\", \"amplitude-amplification\"],\n    learningObjectives: [\n      \"Understand quantum search principles\",\n      \"Implement oracle functions\",\n      \"Apply amplitude amplification\",\n      \"Achieve quadratic speedup over classical search\"\n    ],\n    realWorldApplication: \"Database search, cryptanalysis, optimization problems\",\n    algorithm: {\n      name: \"Grover's Algorithm\",\n      complexity: \"O(√N)\",\n      quantumAdvantage: \"Quadratic speedup over classical O(N)\",\n      classicalComparison: \"Classical requires N/2 queries on average, quantum needs ~√N\"\n    },\n    implementation: {\n      qubits: 4,\n      gates: 24,\n      depth: 8,\n      steps: [\n        \"Initialize qubits in equal superposition\",\n        \"Apply oracle to mark target state\",\n        \"Apply diffusion operator (inversion about average)\",\n        \"Repeat oracle + diffusion ~√N times\",\n        \"Measure to find marked item\"\n      ]\n    },\n    locked: false,\n    completed: false\n  },\n  {\n    id: \"shors-factoring\",\n    title: \"Shor's Factoring Algorithm\",\n    description: \"Break RSA encryption by factoring large integers using quantum period finding\",\n    difficulty: \"pioneer\",\n    category: \"cryptography\",\n    points: 1200,\n    timeLimit: 90,\n    prerequisites: [\"quantum-fourier-transform\", \"modular-arithmetic\", \"period-finding\"],\n    learningObjectives: [\n      \"Understand quantum period finding\",\n      \"Implement Quantum Fourier Transform\",\n      \"Apply modular exponentiation\",\n      \"Factor integers exponentially faster than classical\"\n    ],\n    realWorldApplication: \"Breaking RSA encryption, cryptanalysis, number theory\",\n    algorithm: {\n      name: \"Shor's Algorithm\",\n      complexity: \"O(log³N)\",\n      quantumAdvantage: \"Exponential speedup over best known classical algorithms\",\n      classicalComparison: \"Classical factoring is exponential, quantum is polynomial\"\n    },\n    implementation: {\n      qubits: 12,\n      gates: 156,\n      depth: 24,\n      steps: [\n        \"Choose random number a < N\",\n        \"Create superposition of powers\",\n        \"Apply modular exponentiation\",\n        \"Perform Quantum Fourier Transform\",\n        \"Measure to find period\",\n        \"Use period to factor N\"\n      ]\n    },\n    locked: true,\n    completed: false\n  },\n  {\n    id: \"vqe-molecular\",\n    title: \"Variational Quantum Eigensolver\",\n    description: \"Find ground state energy of molecules using hybrid quantum-classical optimization\",\n    difficulty: \"expert\",\n    category: \"simulation\",\n    points: 900,\n    timeLimit: 60,\n    prerequisites: [\"hamiltonian-simulation\", \"variational-circuits\", \"optimization\"],\n    learningObjectives: [\n      \"Understand molecular Hamiltonians\",\n      \"Implement variational circuits\",\n      \"Optimize quantum parameters\",\n      \"Calculate molecular ground states\"\n    ],\n    realWorldApplication: \"Drug discovery, materials science, catalyst design\",\n    algorithm: {\n      name: \"VQE\",\n      complexity: \"Polynomial in problem size\",\n      quantumAdvantage: \"Exponential memory savings for large molecules\",\n      classicalComparison: \"Classical methods scale exponentially with system size\"\n    },\n    implementation: {\n      qubits: 8,\n      gates: 64,\n      depth: 12,\n      steps: [\n        \"Encode molecular Hamiltonian\",\n        \"Prepare variational ansatz\",\n        \"Measure energy expectation\",\n        \"Optimize parameters classically\",\n        \"Iterate until convergence\"\n      ]\n    },\n    locked: false,\n    completed: false\n  },\n  {\n    id: \"qaoa-optimization\",\n    title: \"QAOA for MaxCut Problem\",\n    description: \"Solve combinatorial optimization using Quantum Approximate Optimization Algorithm\",\n    difficulty: \"expert\",\n    category: \"optimization\",\n    points: 850,\n    timeLimit: 50,\n    prerequisites: [\"parameterized-circuits\", \"classical-optimization\", \"cost-functions\"],\n    learningObjectives: [\n      \"Understand combinatorial optimization\",\n      \"Implement QAOA circuits\",\n      \"Optimize mixing and cost parameters\",\n      \"Find approximate solutions to NP-hard problems\"\n    ],\n    realWorldApplication: \"Portfolio optimization, logistics, network design, scheduling\",\n    algorithm: {\n      name: \"QAOA\",\n      complexity: \"Depends on circuit depth p\",\n      quantumAdvantage: \"Potential advantage for large optimization problems\",\n      classicalComparison: \"May outperform classical heuristics for specific problems\"\n    },\n    implementation: {\n      qubits: 6,\n      gates: 48,\n      depth: 10,\n      steps: [\n        \"Encode optimization problem as Hamiltonian\",\n        \"Apply problem Hamiltonian evolution\",\n        \"Apply mixer Hamiltonian evolution\",\n        \"Repeat p times with different parameters\",\n        \"Measure and optimize parameters\"\n      ]\n    },\n    locked: false,\n    completed: false\n  },\n  {\n    id: \"qml-classification\",\n    title: \"Quantum Machine Learning\",\n    description: \"Implement quantum neural networks for pattern classification with quantum advantage\",\n    difficulty: \"research\",\n    category: \"ml\",\n    points: 1000,\n    timeLimit: 75,\n    prerequisites: [\"parameterized-circuits\", \"data-encoding\", \"gradient-estimation\"],\n    learningObjectives: [\n      \"Encode classical data in quantum states\",\n      \"Design quantum neural networks\",\n      \"Train with quantum gradient descent\",\n      \"Achieve quantum advantage in learning\"\n    ],\n    realWorldApplication: \"Pattern recognition, image classification, natural language processing\",\n    algorithm: {\n      name: \"Quantum Neural Networks\",\n      complexity: \"Polynomial in parameters\",\n      quantumAdvantage: \"Exponential feature space, faster training\",\n      classicalComparison: \"Classical neural nets limited by polynomial feature maps\"\n    },\n    implementation: {\n      qubits: 10,\n      gates: 80,\n      depth: 16,\n      steps: [\n        \"Encode input data as quantum states\",\n        \"Apply parameterized quantum circuits\",\n        \"Measure output probability distributions\",\n        \"Calculate cost function gradients\",\n        \"Update parameters via gradient descent\"\n      ]\n    },\n    locked: true,\n    completed: false\n  },\n  {\n    id: \"quantum-teleportation-network\",\n    title: \"Quantum Internet Protocol\",\n    description: \"Build quantum communication network with entanglement distribution and teleportation\",\n    difficulty: \"pioneer\",\n    category: \"cryptography\",\n    points: 1100,\n    timeLimit: 80,\n    prerequisites: [\"quantum-teleportation\", \"entanglement-distribution\", \"quantum-error-correction\"],\n    learningObjectives: [\n      \"Understand quantum communication protocols\",\n      \"Implement distributed entanglement\",\n      \"Design quantum error correction\",\n      \"Build secure quantum networks\"\n    ],\n    realWorldApplication: \"Quantum internet, secure communications, distributed quantum computing\",\n    algorithm: {\n      name: \"Quantum Internet Protocol\",\n      complexity: \"Scales with network size\",\n      quantumAdvantage: \"Unconditional security, quantum parallelism\",\n      classicalComparison: \"Classical networks vulnerable to eavesdropping\"\n    },\n    implementation: {\n      qubits: 16,\n      gates: 200,\n      depth: 32,\n      steps: [\n        \"Generate entangled pairs\",\n        \"Distribute entanglement across network\",\n        \"Implement quantum error correction\",\n        \"Perform quantum teleportation\",\n        \"Verify communication integrity\"\n      ]\n    },\n    locked: true,\n    completed: false\n  }\n];\n\ninterface AdvancedQuantumChallengesProps {\n  userLevel: number;\n  completedChallenges: string[];\n  onChallengeStart: (challengeId: string) => void;\n}\n\nexport function AdvancedQuantumChallenges({ \n  userLevel, \n  completedChallenges, \n  onChallengeStart \n}: AdvancedQuantumChallengesProps) {\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n  const [selectedChallenge, setSelectedChallenge] = useState<AdvancedChallenge | null>(null);\n  const [showParticles, setShowParticles] = useState(false);\n  const { toast } = useToast();\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'expert': return 'from-purple-600 to-purple-700';\n      case 'research': return 'from-red-600 to-red-700';\n      case 'pioneer': return 'from-yellow-600 to-yellow-700';\n      default: return 'from-gray-600 to-gray-700';\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'algorithms': return <Brain className=\"h-5 w-5\" />;\n      case 'cryptography': return <Lock className=\"h-5 w-5\" />;\n      case 'simulation': return <Atom className=\"h-5 w-5\" />;\n      case 'optimization': return <Target className=\"h-5 w-5\" />;\n      case 'ml': return <Network className=\"h-5 w-5\" />;\n      default: return <Code className=\"h-5 w-5\" />;\n    }\n  };\n\n  const filteredChallenges = selectedCategory === \"all\" \n    ? ADVANCED_CHALLENGES \n    : ADVANCED_CHALLENGES.filter(c => c.category === selectedCategory);\n\n  const handleChallengeClick = (challenge: AdvancedChallenge) => {\n    if (challenge.locked) {\n      toast({\n        title: \"🔒 Challenge Locked\",\n        description: \"Complete prerequisite challenges to unlock this algorithm\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    setSelectedChallenge(challenge);\n    setShowParticles(true);\n    setTimeout(() => setShowParticles(false), 2000);\n  };\n\n  const startChallenge = (challengeId: string) => {\n    onChallengeStart(challengeId);\n    toast({\n      title: \"🚀 Quantum Algorithm Started!\",\n      description: \"Prepare for advanced quantum computing challenge\",\n    });\n  };\n\n  return (\n    <div className=\"space-y-8 relative\">\n      {/* Particle Effects */}\n      <QuantumParticleEffects\n        trigger={showParticles ? \"quantum-burst\" : undefined}\n        intensity=\"high\"\n        effectType=\"quantum\"\n        width={800}\n        height={600}\n        className=\"absolute inset-0 pointer-events-none z-10\"\n      />\n\n      {/* Header */}\n      <motion.div\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"text-center\"\n      >\n        <h2 className=\"text-3xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent mb-4\">\n          🧠 Advanced Quantum Algorithms\n        </h2>\n        <p className=\"text-gray-600 dark:text-gray-300 mb-6\">\n          Master cutting-edge quantum algorithms that power the quantum revolution\n        </p>\n      </motion.div>\n\n      {/* Category Filter */}\n      <Tabs value={selectedCategory} onValueChange={setSelectedCategory}>\n        <TabsList className=\"grid w-full grid-cols-6\">\n          <TabsTrigger value=\"all\">All</TabsTrigger>\n          <TabsTrigger value=\"algorithms\">Algorithms</TabsTrigger>\n          <TabsTrigger value=\"cryptography\">Crypto</TabsTrigger>\n          <TabsTrigger value=\"simulation\">Simulation</TabsTrigger>\n          <TabsTrigger value=\"optimization\">Optimization</TabsTrigger>\n          <TabsTrigger value=\"ml\">ML</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value={selectedCategory} className=\"mt-8\">\n          {/* Challenge Grid */}\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredChallenges.map((challenge, index) => (\n              <motion.div\n                key={challenge.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: index * 0.1 }}\n                whileHover={{ scale: 1.02 }}\n                className=\"relative\"\n              >\n                <Card className={`overflow-hidden ${challenge.locked ? 'opacity-60' : 'hover:shadow-xl cursor-pointer'} transition-all duration-300 ${\n                  challenge.completed ? 'ring-2 ring-green-500' : ''\n                }`}>\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center gap-2\">\n                        {getCategoryIcon(challenge.category)}\n                        <Badge className={`bg-gradient-to-r ${getDifficultyColor(challenge.difficulty)} text-white`}>\n                          {challenge.difficulty}\n                        </Badge>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        {challenge.completed && <CheckCircle className=\"h-5 w-5 text-green-500\" />}\n                        {challenge.locked && <Lock className=\"h-5 w-5 text-gray-400\" />}\n                      </div>\n                    </div>\n                    <CardTitle className=\"text-lg leading-tight\">{challenge.title}</CardTitle>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                      {challenge.description}\n                    </p>\n                  </CardHeader>\n                  \n                  <CardContent className=\"space-y-4\">\n                    {/* Algorithm Info */}\n                    <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 p-3 rounded-lg\">\n                      <div className=\"text-xs space-y-1\">\n                        <div><strong>Algorithm:</strong> {challenge.algorithm.name}</div>\n                        <div><strong>Complexity:</strong> {challenge.algorithm.complexity}</div>\n                        <div><strong>Advantage:</strong> {challenge.algorithm.quantumAdvantage}</div>\n                      </div>\n                    </div>\n\n                    {/* Implementation Details */}\n                    <div className=\"grid grid-cols-3 gap-2 text-xs\">\n                      <div className=\"text-center p-2 bg-gray-50 dark:bg-gray-800 rounded\">\n                        <div className=\"font-semibold\">{challenge.implementation.qubits}</div>\n                        <div className=\"text-gray-600 dark:text-gray-400\">Qubits</div>\n                      </div>\n                      <div className=\"text-center p-2 bg-gray-50 dark:bg-gray-800 rounded\">\n                        <div className=\"font-semibold\">{challenge.implementation.gates}</div>\n                        <div className=\"text-gray-600 dark:text-gray-400\">Gates</div>\n                      </div>\n                      <div className=\"text-center p-2 bg-gray-50 dark:bg-gray-800 rounded\">\n                        <div className=\"font-semibold\">{challenge.timeLimit}m</div>\n                        <div className=\"text-gray-600 dark:text-gray-400\">Time</div>\n                      </div>\n                    </div>\n\n                    {/* Action Buttons */}\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-1\">\n                        <Star className=\"h-4 w-4 text-yellow-500\" />\n                        <span className=\"font-semibold text-sm\">{challenge.points} pts</span>\n                      </div>\n                      <Button\n                        size=\"sm\"\n                        disabled={challenge.locked}\n                        onClick={() => handleChallengeClick(challenge)}\n                        className=\"bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700\"\n                        data-testid={`button-challenge-${challenge.id}`}\n                      >\n                        {challenge.completed ? 'Review' : 'Start'}\n                        <Rocket className=\"h-4 w-4 ml-1\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      {/* Challenge Detail Modal */}\n      <AnimatePresence>\n        {selectedChallenge && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\"\n            onClick={() => setSelectedChallenge(null)}\n          >\n            <motion.div\n              initial={{ scale: 0.8, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              exit={{ scale: 0.8, opacity: 0 }}\n              className=\"bg-white dark:bg-gray-800 rounded-xl max-w-4xl max-h-[80vh] overflow-y-auto p-6\"\n              onClick={(e) => e.stopPropagation()}\n            >\n              <div className=\"space-y-6\">\n                {/* Header */}\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-2xl font-bold\">{selectedChallenge.title}</h3>\n                  <Button variant=\"ghost\" onClick={() => setSelectedChallenge(null)}>\n                    ✕\n                  </Button>\n                </div>\n\n                {/* Algorithm Details */}\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-lg font-semibold\">Algorithm Overview</h4>\n                    <div className=\"space-y-2 text-sm\">\n                      <div><strong>Complexity:</strong> {selectedChallenge.algorithm.complexity}</div>\n                      <div><strong>Quantum Advantage:</strong> {selectedChallenge.algorithm.quantumAdvantage}</div>\n                      <div><strong>vs Classical:</strong> {selectedChallenge.algorithm.classicalComparison}</div>\n                      <div><strong>Real-world Use:</strong> {selectedChallenge.realWorldApplication}</div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <h4 className=\"text-lg font-semibold\">Implementation</h4>\n                    <div className=\"space-y-2 text-sm\">\n                      <div><strong>Qubits Required:</strong> {selectedChallenge.implementation.qubits}</div>\n                      <div><strong>Gate Count:</strong> {selectedChallenge.implementation.gates}</div>\n                      <div><strong>Circuit Depth:</strong> {selectedChallenge.implementation.depth}</div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Learning Objectives */}\n                <div>\n                  <h4 className=\"text-lg font-semibold mb-3\">Learning Objectives</h4>\n                  <ul className=\"space-y-1 text-sm\">\n                    {selectedChallenge.learningObjectives.map((objective, index) => (\n                      <li key={index} className=\"flex items-start gap-2\">\n                        <Target className=\"h-4 w-4 text-blue-500 mt-0.5 flex-shrink-0\" />\n                        {objective}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n\n                {/* Implementation Steps */}\n                <div>\n                  <h4 className=\"text-lg font-semibold mb-3\">Implementation Steps</h4>\n                  <ol className=\"space-y-2 text-sm\">\n                    {selectedChallenge.implementation.steps.map((step, index) => (\n                      <li key={index} className=\"flex items-start gap-3\">\n                        <div className=\"bg-blue-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs font-semibold flex-shrink-0\">\n                          {index + 1}\n                        </div>\n                        {step}\n                      </li>\n                    ))}\n                  </ol>\n                </div>\n\n                {/* Prerequisites */}\n                {selectedChallenge.prerequisites.length > 0 && (\n                  <div>\n                    <h4 className=\"text-lg font-semibold mb-3\">Prerequisites</h4>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {selectedChallenge.prerequisites.map((prereq, index) => (\n                        <Badge key={index} variant=\"outline\">\n                          {prereq}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Action Buttons */}\n                <div className=\"flex gap-3 pt-4 border-t\">\n                  <Button\n                    onClick={() => startChallenge(selectedChallenge.id)}\n                    className=\"flex-1 bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700\"\n                    data-testid=\"button-start-advanced-challenge\"\n                  >\n                    <Rocket className=\"h-4 w-4 mr-2\" />\n                    Start Challenge\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setSelectedChallenge(null)}\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </div>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}","size_bytes":22630},"client/src/components/quantum/bloch-sphere-visualizer.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { \n  Maximize, \n  RotateCcw, \n  Play, \n  Pause,\n  Eye,\n  Zap,\n  Target\n} from \"lucide-react\";\n\n// Complex number representation\ninterface Complex {\n  real: number;\n  imaginary: number;\n}\n\n// Quantum state for single qubit\ninterface QubitState {\n  alpha: Complex; // |0⟩ coefficient\n  beta: Complex;  // |1⟩ coefficient\n}\n\n// Bloch sphere coordinates\ninterface BlochCoordinates {\n  x: number;\n  y: number;\n  z: number;\n  theta: number; // polar angle\n  phi: number;   // azimuthal angle\n}\n\ninterface BlochSphereVisualizerProps {\n  quantumState?: QubitState;\n  onStateChange?: (state: QubitState) => void;\n  showControls?: boolean;\n  autoRotate?: boolean;\n  size?: 'small' | 'medium' | 'large';\n}\n\n// Convert quantum state to Bloch coordinates\nconst stateToBloch = (state: QubitState): BlochCoordinates => {\n  const { alpha, beta } = state;\n  \n  // Calculate Bloch coordinates using Pauli matrices\n  const x = 2 * (alpha.real * beta.real + alpha.imaginary * beta.imaginary);\n  const y = 2 * (alpha.imaginary * beta.real - alpha.real * beta.imaginary);\n  const z = alpha.real * alpha.real + alpha.imaginary * alpha.imaginary - \n           (beta.real * beta.real + beta.imaginary * beta.imaginary);\n  \n  // Calculate spherical coordinates\n  const r = Math.sqrt(x*x + y*y + z*z);\n  const theta = r > 0 ? Math.acos(z / r) : 0;\n  const phi = Math.atan2(y, x);\n  \n  return { x, y, z, theta, phi };\n};\n\n// Convert Bloch coordinates to quantum state\nconst blochToState = (theta: number, phi: number): QubitState => {\n  return {\n    alpha: { \n      real: Math.cos(theta / 2), \n      imaginary: 0 \n    },\n    beta: { \n      real: Math.sin(theta / 2) * Math.cos(phi), \n      imaginary: Math.sin(theta / 2) * Math.sin(phi) \n    }\n  };\n};\n\nexport function BlochSphereVisualizer({ \n  quantumState, \n  onStateChange, \n  showControls = false,\n  autoRotate = false,\n  size = 'medium'\n}: BlochSphereVisualizerProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const animationRef = useRef<number>();\n  const [isAnimating, setIsAnimating] = useState(autoRotate);\n  const [rotation, setRotation] = useState({ x: 0, y: 0 });\n  const [selectedState, setSelectedState] = useState<QubitState>(\n    quantumState || { \n      alpha: { real: 1, imaginary: 0 }, \n      beta: { real: 0, imaginary: 0 } \n    }\n  );\n  const [manualTheta, setManualTheta] = useState([0]);\n  const [manualPhi, setManualPhi] = useState([0]);\n\n  const sizeConfig = {\n    small: { width: 200, height: 200, scale: 0.7 },\n    medium: { width: 300, height: 300, scale: 1 },\n    large: { width: 400, height: 400, scale: 1.3 }\n  };\n\n  const config = sizeConfig[size];\n\n  // Draw the Bloch sphere\n  const drawBlochSphere = (ctx: CanvasRenderingContext2D, state: QubitState, rotX: number, rotY: number) => {\n    const centerX = config.width / 2;\n    const centerY = config.height / 2;\n    const radius = 80 * config.scale;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, config.width, config.height);\n    \n    // Apply rotation transformations\n    ctx.save();\n    ctx.translate(centerX, centerY);\n    \n    // Draw sphere outline\n    ctx.strokeStyle = '#e2e8f0';\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.arc(0, 0, radius, 0, 2 * Math.PI);\n    ctx.stroke();\n\n    // Draw equator and meridians\n    ctx.strokeStyle = '#cbd5e1';\n    ctx.lineWidth = 1;\n    \n    // Equator\n    ctx.beginPath();\n    ctx.ellipse(0, 0, radius, radius * 0.3, 0, 0, 2 * Math.PI);\n    ctx.stroke();\n    \n    // Vertical meridian\n    ctx.beginPath();\n    ctx.ellipse(0, 0, radius * 0.3, radius, 0, 0, 2 * Math.PI);\n    ctx.stroke();\n\n    // Draw axes\n    ctx.strokeStyle = '#64748b';\n    ctx.lineWidth = 2;\n    \n    // X axis (red)\n    ctx.strokeStyle = '#ef4444';\n    ctx.beginPath();\n    ctx.moveTo(-radius * 1.2, 0);\n    ctx.lineTo(radius * 1.2, 0);\n    ctx.stroke();\n    \n    // Y axis (green) - with perspective\n    const yStartX = -radius * 1.2 * Math.cos(Math.PI / 6);\n    const yStartY = radius * 1.2 * Math.sin(Math.PI / 6);\n    const yEndX = radius * 1.2 * Math.cos(Math.PI / 6);\n    const yEndY = -radius * 1.2 * Math.sin(Math.PI / 6);\n    ctx.strokeStyle = '#22c55e';\n    ctx.beginPath();\n    ctx.moveTo(yStartX, yStartY);\n    ctx.lineTo(yEndX, yEndY);\n    ctx.stroke();\n    \n    // Z axis (blue)\n    ctx.strokeStyle = '#3b82f6';\n    ctx.beginPath();\n    ctx.moveTo(0, -radius * 1.2);\n    ctx.lineTo(0, radius * 1.2);\n    ctx.stroke();\n\n    // Draw axis labels\n    ctx.fillStyle = '#1f2937';\n    ctx.font = `${12 * config.scale}px Arial`;\n    ctx.textAlign = 'center';\n    \n    ctx.fillStyle = '#ef4444';\n    ctx.fillText('X', radius * 1.3, 5);\n    ctx.fillStyle = '#22c55e';\n    ctx.fillText('Y', yEndX + 10, yEndY);\n    ctx.fillStyle = '#3b82f6';\n    ctx.fillText('Z', 0, -radius * 1.3);\n\n    // Draw |0⟩ and |1⟩ labels\n    ctx.fillStyle = '#6366f1';\n    ctx.font = `${14 * config.scale}px Arial`;\n    ctx.fillText('|0⟩', 0, -radius - 20);\n    ctx.fillText('|1⟩', 0, radius + 30);\n\n    // Calculate and draw state vector\n    const bloch = stateToBloch(state);\n    const stateX = bloch.x * radius;\n    const stateY = -bloch.z * radius; // Invert Z for screen coordinates\n    const stateZ = bloch.y * radius;\n\n    // Apply 3D rotation for visualization\n    const rotatedX = stateX * Math.cos(rotY) + stateZ * Math.sin(rotY);\n    const rotatedY = stateY;\n    const rotatedZ = -stateX * Math.sin(rotY) + stateZ * Math.cos(rotY);\n\n    // Draw state vector\n    ctx.strokeStyle = '#8b5cf6';\n    ctx.lineWidth = 4;\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo(rotatedX, rotatedY);\n    ctx.stroke();\n\n    // Draw state point\n    ctx.fillStyle = '#8b5cf6';\n    ctx.beginPath();\n    ctx.arc(rotatedX, rotatedY, 8 * config.scale, 0, 2 * Math.PI);\n    ctx.fill();\n\n    // Add glow effect\n    ctx.shadowColor = '#8b5cf6';\n    ctx.shadowBlur = 20;\n    ctx.fillStyle = '#a78bfa';\n    ctx.beginPath();\n    ctx.arc(rotatedX, rotatedY, 6 * config.scale, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.shadowBlur = 0;\n\n    ctx.restore();\n  };\n\n  // Animation loop\n  useEffect(() => {\n    if (isAnimating) {\n      const animate = () => {\n        setRotation(prev => ({ \n          x: prev.x + 0.01, \n          y: prev.y + 0.005 \n        }));\n        animationRef.current = requestAnimationFrame(animate);\n      };\n      animationRef.current = requestAnimationFrame(animate);\n    } else {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    }\n\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [isAnimating]);\n\n  // Draw whenever state or rotation changes\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    drawBlochSphere(ctx, selectedState, rotation.x, rotation.y);\n  }, [selectedState, rotation, config]);\n\n  // Update state when manual controls change\n  useEffect(() => {\n    if (showControls) {\n      const newState = blochToState(manualTheta[0], manualPhi[0]);\n      setSelectedState(newState);\n      onStateChange?.(newState);\n    }\n  }, [manualTheta, manualPhi, showControls, onStateChange]);\n\n  // Update state when external state changes\n  useEffect(() => {\n    if (quantumState) {\n      setSelectedState(quantumState);\n    }\n  }, [quantumState]);\n\n  const blochCoords = stateToBloch(selectedState);\n  const probability0 = selectedState.alpha.real ** 2 + selectedState.alpha.imaginary ** 2;\n  const probability1 = selectedState.beta.real ** 2 + selectedState.beta.imaginary ** 2;\n\n  // Preset quantum states\n  const presetStates = {\n    ground: { alpha: { real: 1, imaginary: 0 }, beta: { real: 0, imaginary: 0 } },\n    excited: { alpha: { real: 0, imaginary: 0 }, beta: { real: 1, imaginary: 0 } },\n    plus: { alpha: { real: 1/Math.sqrt(2), imaginary: 0 }, beta: { real: 1/Math.sqrt(2), imaginary: 0 } },\n    minus: { alpha: { real: 1/Math.sqrt(2), imaginary: 0 }, beta: { real: -1/Math.sqrt(2), imaginary: 0 } },\n    plusI: { alpha: { real: 1/Math.sqrt(2), imaginary: 0 }, beta: { real: 0, imaginary: 1/Math.sqrt(2) } },\n    minusI: { alpha: { real: 1/Math.sqrt(2), imaginary: 0 }, beta: { real: 0, imaginary: -1/Math.sqrt(2) } }\n  };\n\n  return (\n    <Card className=\"bg-gradient-to-br from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Target className=\"h-5 w-5\" />\n          Bloch Sphere Visualization\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex justify-center\">\n          <motion.div\n            whileHover={{ scale: 1.02 }}\n            className=\"relative\"\n          >\n            <canvas\n              ref={canvasRef}\n              width={config.width}\n              height={config.height}\n              className=\"border rounded-lg shadow-lg bg-white dark:bg-gray-800\"\n            />\n            \n            {/* Floating state information */}\n            <motion.div\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              className=\"absolute -bottom-16 left-1/2 transform -translate-x-1/2 bg-white dark:bg-gray-800 rounded-lg p-2 shadow-lg border\"\n            >\n              <div className=\"text-xs space-y-1\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 bg-blue-500 rounded-full\"></div>\n                  <span>P(|0⟩) = {(probability0 * 100).toFixed(1)}%</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 bg-purple-500 rounded-full\"></div>\n                  <span>P(|1⟩) = {(probability1 * 100).toFixed(1)}%</span>\n                </div>\n              </div>\n            </motion.div>\n          </motion.div>\n        </div>\n\n        {/* Quantum State Information */}\n        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n          <div className=\"space-y-2\">\n            <h4 className=\"font-medium\">Bloch Coordinates</h4>\n            <div className=\"space-y-1 font-mono text-xs\">\n              <div>X: {blochCoords.x.toFixed(3)}</div>\n              <div>Y: {blochCoords.y.toFixed(3)}</div>\n              <div>Z: {blochCoords.z.toFixed(3)}</div>\n            </div>\n          </div>\n          <div className=\"space-y-2\">\n            <h4 className=\"font-medium\">Spherical Angles</h4>\n            <div className=\"space-y-1 font-mono text-xs\">\n              <div>θ: {(blochCoords.theta * 180 / Math.PI).toFixed(1)}°</div>\n              <div>φ: {(blochCoords.phi * 180 / Math.PI).toFixed(1)}°</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Control Buttons */}\n        <div className=\"flex flex-wrap gap-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setIsAnimating(!isAnimating)}\n            data-testid=\"button-toggle-animation\"\n          >\n            {isAnimating ? <Pause className=\"h-4 w-4 mr-1\" /> : <Play className=\"h-4 w-4 mr-1\" />}\n            {isAnimating ? 'Pause' : 'Rotate'}\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setRotation({ x: 0, y: 0 })}\n            data-testid=\"button-reset-rotation\"\n          >\n            <RotateCcw className=\"h-4 w-4 mr-1\" />\n            Reset View\n          </Button>\n        </div>\n\n        {/* Preset States */}\n        <div className=\"space-y-2\">\n          <h4 className=\"text-sm font-medium\">Quantum States</h4>\n          <div className=\"grid grid-cols-3 gap-2\">\n            {Object.entries(presetStates).map(([name, state]) => (\n              <Button\n                key={name}\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => {\n                  setSelectedState(state);\n                  onStateChange?.(state);\n                }}\n                className=\"text-xs\"\n                data-testid={`button-preset-${name}`}\n              >\n                |{name === 'ground' ? '0' : name === 'excited' ? '1' : name}⟩\n              </Button>\n            ))}\n          </div>\n        </div>\n\n        {/* Manual Controls */}\n        {showControls && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            className=\"space-y-4 border-t pt-4\"\n          >\n            <h4 className=\"text-sm font-medium flex items-center gap-2\">\n              <Zap className=\"h-4 w-4\" />\n              Manual State Control\n            </h4>\n            \n            <div className=\"space-y-3\">\n              <div>\n                <label className=\"text-xs font-medium\">Polar Angle (θ): {(manualTheta[0] * 180 / Math.PI).toFixed(1)}°</label>\n                <Slider\n                  value={manualTheta}\n                  onValueChange={setManualTheta}\n                  max={Math.PI}\n                  step={0.01}\n                  className=\"mt-2\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"text-xs font-medium\">Azimuthal Angle (φ): {(manualPhi[0] * 180 / Math.PI).toFixed(1)}°</label>\n                <Slider\n                  value={manualPhi}\n                  onValueChange={setManualPhi}\n                  min={-Math.PI}\n                  max={Math.PI}\n                  step={0.01}\n                  className=\"mt-2\"\n                />\n              </div>\n            </div>\n          </motion.div>\n        )}\n\n        {/* State Vector Display */}\n        <div className=\"bg-gray-50 dark:bg-gray-800 p-3 rounded-lg\">\n          <div className=\"text-xs font-mono\">\n            <div className=\"font-medium mb-1\">Current State:</div>\n            <div>\n              |ψ⟩ = {selectedState.alpha.real.toFixed(3)}|0⟩ + \n              ({selectedState.beta.real.toFixed(3)} + {selectedState.beta.imaginary.toFixed(3)}i)|1⟩\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":14366},"client/src/components/quantum/enhanced-gate-simulator.tsx":{"content":"import { useState, useCallback, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  RotateCcw, \n  Play, \n  Check, \n  X, \n  Zap, \n  Target,\n  ArrowRight,\n  Sparkles,\n  Music,\n  Volume2,\n  VolumeX,\n  Eye,\n  Brain,\n  Calculator\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { QuantumParticleEffects, QuantumSuccessCelebration } from \"./quantum-particle-effects\";\nimport { BlochSphereVisualizer } from \"./bloch-sphere-visualizer\";\n\n// Enhanced quantum state representation\ninterface QuantumState {\n  amplitudes: Complex[];\n  probabilities: number[];\n  labels: string[];\n}\n\ninterface Complex {\n  real: number;\n  imaginary: number;\n}\n\n// Enhanced quantum gate with matrix operations\ninterface QuantumGate {\n  id: string;\n  name: string;\n  symbol: string;\n  color: string;\n  description: string;\n  matrix: Complex[][];\n  educational: {\n    concept: string;\n    visualEffect: string;\n    realWorldUse: string;\n  };\n}\n\ninterface CircuitPosition {\n  qubit: number;\n  position: number;\n  gate: QuantumGate | null;\n}\n\ninterface Challenge {\n  id: string;\n  title: string;\n  description: string;\n  targetState: string;\n  initialGates: QuantumGate[];\n  solution: { qubit: number; position: number; gateId: string }[];\n  maxMoves: number;\n  educationalTips: string[];\n}\n\n// Enhanced quantum gates with complete matrices and educational content\nconst ENHANCED_QUANTUM_GATES: QuantumGate[] = [\n  {\n    id: \"hadamard\",\n    name: \"Hadamard\",\n    symbol: \"H\",\n    color: \"bg-gradient-to-r from-blue-500 to-blue-600\",\n    description: \"Creates equal superposition - the foundation of quantum computing\",\n    matrix: [\n      [{ real: 1/Math.sqrt(2), imaginary: 0 }, { real: 1/Math.sqrt(2), imaginary: 0 }],\n      [{ real: 1/Math.sqrt(2), imaginary: 0 }, { real: -1/Math.sqrt(2), imaginary: 0 }]\n    ],\n    educational: {\n      concept: \"Superposition\",\n      visualEffect: \"Transforms |0⟩ → (|0⟩ + |1⟩)/√2 and |1⟩ → (|0⟩ - |1⟩)/√2\",\n      realWorldUse: \"Used in quantum algorithms like Grover's search and Shor's factoring\"\n    }\n  },\n  {\n    id: \"pauli-x\",\n    name: \"Pauli-X\",\n    symbol: \"X\",\n    color: \"bg-gradient-to-r from-red-500 to-red-600\",\n    description: \"Quantum NOT gate - flips qubit states like a classical bit flip\",\n    matrix: [\n      [{ real: 0, imaginary: 0 }, { real: 1, imaginary: 0 }],\n      [{ real: 1, imaginary: 0 }, { real: 0, imaginary: 0 }]\n    ],\n    educational: {\n      concept: \"Bit Flip\",\n      visualEffect: \"Flips |0⟩ ↔ |1⟩\",\n      realWorldUse: \"Error correction and quantum state manipulation\"\n    }\n  },\n  {\n    id: \"pauli-y\",\n    name: \"Pauli-Y\",\n    symbol: \"Y\",\n    color: \"bg-gradient-to-r from-yellow-500 to-yellow-600\",\n    description: \"Combined bit and phase flip - rotates around Y-axis of Bloch sphere\",\n    matrix: [\n      [{ real: 0, imaginary: 0 }, { real: 0, imaginary: -1 }],\n      [{ real: 0, imaginary: 1 }, { real: 0, imaginary: 0 }]\n    ],\n    educational: {\n      concept: \"Y-Rotation\",\n      visualEffect: \"Applies both bit flip and phase: |0⟩ → i|1⟩, |1⟩ → -i|0⟩\",\n      realWorldUse: \"Quantum error correction and universal gate sets\"\n    }\n  },\n  {\n    id: \"pauli-z\",\n    name: \"Pauli-Z\",\n    symbol: \"Z\",\n    color: \"bg-gradient-to-r from-green-500 to-green-600\",\n    description: \"Phase flip gate - adds π phase to |1⟩ state without changing probabilities\",\n    matrix: [\n      [{ real: 1, imaginary: 0 }, { real: 0, imaginary: 0 }],\n      [{ real: 0, imaginary: 0 }, { real: -1, imaginary: 0 }]\n    ],\n    educational: {\n      concept: \"Phase Flip\",\n      visualEffect: \"Leaves |0⟩ unchanged, flips phase of |1⟩: |1⟩ → -|1⟩\",\n      realWorldUse: \"Phase-based quantum algorithms and interference effects\"\n    }\n  },\n  {\n    id: \"cnot\",\n    name: \"CNOT\",\n    symbol: \"⊕\",\n    color: \"bg-gradient-to-r from-purple-500 to-purple-600\",\n    description: \"Controlled-NOT - creates entanglement between qubits\",\n    matrix: [\n      [{ real: 1, imaginary: 0 }, { real: 0, imaginary: 0 }, { real: 0, imaginary: 0 }, { real: 0, imaginary: 0 }],\n      [{ real: 0, imaginary: 0 }, { real: 1, imaginary: 0 }, { real: 0, imaginary: 0 }, { real: 0, imaginary: 0 }],\n      [{ real: 0, imaginary: 0 }, { real: 0, imaginary: 0 }, { real: 0, imaginary: 0 }, { real: 1, imaginary: 0 }],\n      [{ real: 0, imaginary: 0 }, { real: 0, imaginary: 0 }, { real: 1, imaginary: 0 }, { real: 0, imaginary: 0 }]\n    ],\n    educational: {\n      concept: \"Entanglement\",\n      visualEffect: \"Flips target qubit if control is |1⟩, creates Bell states\",\n      realWorldUse: \"Quantum cryptography, teleportation, and error correction\"\n    }\n  }\n];\n\n// Quantum state calculation utilities\nconst calculateQuantumState = (circuit: CircuitPosition[][]): QuantumState => {\n  // Start with |00⟩ state\n  let state: Complex[] = [\n    { real: 1, imaginary: 0 }, // |00⟩\n    { real: 0, imaginary: 0 }, // |01⟩\n    { real: 0, imaginary: 0 }, // |10⟩\n    { real: 0, imaginary: 0 }  // |11⟩\n  ];\n\n  // Apply gates in order\n  for (let position = 0; position < 4; position++) {\n    for (let qubit = 0; qubit < 2; qubit++) {\n      const gate = circuit[qubit][position]?.gate;\n      if (gate) {\n        state = applyGate(state, gate, qubit);\n      }\n    }\n  }\n\n  const probabilities = state.map(amp => amp.real * amp.real + amp.imaginary * amp.imaginary);\n  const labels = [\"|00⟩\", \"|01⟩\", \"|10⟩\", \"|11⟩\"];\n\n  return { amplitudes: state, probabilities, labels };\n};\n\nconst applyGate = (state: Complex[], gate: QuantumGate, qubit: number): Complex[] => {\n  const newState = [...state];\n  \n  if (gate.id === \"hadamard\") {\n    const h = 1 / Math.sqrt(2);\n    for (let i = 0; i < 4; i++) {\n      const bit = (i >> (1 - qubit)) & 1;\n      const otherBit = i ^ (1 << (1 - qubit));\n      if (bit === 0) {\n        const oldValue = { ...state[i] };\n        newState[i] = {\n          real: h * (oldValue.real + state[otherBit].real),\n          imaginary: h * (oldValue.imaginary + state[otherBit].imaginary)\n        };\n        newState[otherBit] = {\n          real: h * (oldValue.real - state[otherBit].real),\n          imaginary: h * (oldValue.imaginary - state[otherBit].imaginary)\n        };\n      }\n    }\n  } else if (gate.id === \"pauli-x\") {\n    for (let i = 0; i < 4; i++) {\n      const flippedIndex = i ^ (1 << (1 - qubit));\n      if (i < flippedIndex) {\n        [newState[i], newState[flippedIndex]] = [newState[flippedIndex], newState[i]];\n      }\n    }\n  } else if (gate.id === \"pauli-z\") {\n    for (let i = 0; i < 4; i++) {\n      const bit = (i >> (1 - qubit)) & 1;\n      if (bit === 1) {\n        newState[i] = {\n          real: -state[i].real,\n          imaginary: -state[i].imaginary\n        };\n      }\n    }\n  }\n  \n  return newState;\n};\n\n// Sound effects utility\nconst playSound = (frequency: number, duration: number = 100) => {\n  if (typeof window !== 'undefined' && 'AudioContext' in window) {\n    try {\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      const oscillator = audioContext.createOscillator();\n      const gainNode = audioContext.createGain();\n      \n      oscillator.connect(gainNode);\n      gainNode.connect(audioContext.destination);\n      \n      oscillator.frequency.value = frequency;\n      gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);\n      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration / 1000);\n      \n      oscillator.start(audioContext.currentTime);\n      oscillator.stop(audioContext.currentTime + duration / 1000);\n    } catch (e) {\n      // Silently fail if audio is not supported\n    }\n  }\n};\n\ninterface EnhancedGateSimulatorProps {\n  challenge?: Challenge;\n  onComplete?: (success: boolean) => void;\n}\n\nexport function EnhancedGateSimulator({ challenge, onComplete }: EnhancedGateSimulatorProps) {\n  const [circuit, setCircuit] = useState<CircuitPosition[][]>(\n    Array(2).fill(null).map((_, qubit) =>\n      Array(4).fill(null).map((_, pos) => ({ qubit, position: pos, gate: null }))\n    )\n  );\n  const [draggedGate, setDraggedGate] = useState<QuantumGate | null>(null);\n  const [selectedGate, setSelectedGate] = useState<QuantumGate | null>(null);\n  const [moves, setMoves] = useState(0);\n  const [isComplete, setIsComplete] = useState(false);\n  const [showResult, setShowResult] = useState(false);\n  const [quantumState, setQuantumState] = useState<QuantumState | null>(null);\n  const [soundEnabled, setSoundEnabled] = useState(true);\n  const [showStateDetails, setShowStateDetails] = useState(false);\n  const [animatingGate, setAnimatingGate] = useState<{qubit: number, position: number} | null>(null);\n  const [particleEffect, setParticleEffect] = useState<string | null>(null);\n  const [showCelebration, setShowCelebration] = useState(false);\n  const [showBlochSphere, setShowBlochSphere] = useState(false);\n  const [isDragging, setIsDragging] = useState(false);\n  const { toast } = useToast();\n\n  // Default challenge if none provided\n  const defaultChallenge: Challenge = {\n    id: \"superposition-intro\",\n    title: \"Create Superposition\",\n    description: \"Use a Hadamard gate to put the first qubit into superposition state\",\n    targetState: \"|+⟩ ⊗ |0⟩\",\n    initialGates: [ENHANCED_QUANTUM_GATES[0]], // Only Hadamard\n    solution: [{ qubit: 0, position: 0, gateId: \"hadamard\" }],\n    maxMoves: 1,\n    educationalTips: [\n      \"The Hadamard gate creates superposition\",\n      \"Superposition means the qubit is in both |0⟩ and |1⟩ states simultaneously\",\n      \"This is the foundation of quantum computing's power\"\n    ]\n  };\n\n  const currentChallenge = challenge || defaultChallenge;\n\n  // Calculate quantum state whenever circuit changes\n  useEffect(() => {\n    const state = calculateQuantumState(circuit);\n    setQuantumState(state);\n  }, [circuit]);\n\n  const resetCircuit = useCallback(() => {\n    setCircuit(\n      Array(2).fill(null).map((_, qubit) =>\n        Array(4).fill(null).map((_, pos) => ({ qubit, position: pos, gate: null }))\n      )\n    );\n    setMoves(0);\n    setIsComplete(false);\n    setShowResult(false);\n    if (soundEnabled) playSound(200, 150);\n  }, [soundEnabled]);\n\n  const checkSolution = useCallback(() => {\n    const currentCircuit = circuit.flatMap(row => \n      row.filter(pos => pos.gate !== null).map(pos => ({\n        qubit: pos.qubit,\n        position: pos.position,\n        gateId: pos.gate!.id\n      }))\n    );\n\n    const isCorrect = currentChallenge.solution.length === currentCircuit.length &&\n      currentChallenge.solution.every(solution => \n        currentCircuit.some(current => \n          current.qubit === solution.qubit && \n          current.gateId === solution.gateId\n        )\n      );\n\n    setIsComplete(isCorrect);\n    setShowResult(true);\n\n    if (isCorrect) {\n      if (soundEnabled) playSound(600, 300); // Success sound\n      setShowCelebration(true);\n      setParticleEffect('quantum-burst');\n      toast({\n        title: \"🎉 Quantum State Achieved!\",\n        description: `Perfect! You created the target state in ${moves} moves!`,\n      });\n      setTimeout(() => {\n        setShowCelebration(false);\n        setParticleEffect(null);\n        onComplete?.(true); // Call completion after celebration\n      }, 1500); // Reduced delay so completion happens sooner\n    } else {\n      if (soundEnabled) playSound(200, 200); // Error sound\n      toast({\n        title: \"State Mismatch\",\n        description: \"The quantum state doesn't match the target. Try again!\",\n        variant: \"destructive\"\n      });\n    }\n  }, [circuit, currentChallenge.solution, moves, toast, onComplete, soundEnabled]);\n\n  const placeGate = useCallback((qubit: number, position: number, gate: QuantumGate) => {\n    const newCircuit = [...circuit];\n    newCircuit[qubit][position] = { qubit, position, gate };\n    \n    setCircuit(newCircuit);\n    setMoves(prev => prev + 1);\n    \n    // Animate gate placement with particle effects\n    setAnimatingGate({ qubit, position });\n    setParticleEffect('gate-placement');\n    setTimeout(() => {\n      setAnimatingGate(null);\n      setParticleEffect(null);\n    }, 500);\n    \n    // Play gate-specific sound\n    if (soundEnabled) {\n      const gateFrequencies: Record<string, number> = {\n        hadamard: 440,\n        \"pauli-x\": 330,\n        \"pauli-y\": 370,\n        \"pauli-z\": 415,\n        cnot: 523\n      };\n      playSound(gateFrequencies[gate.id] || 400, 100);\n    }\n  }, [circuit, soundEnabled]);\n\n  const handleDrop = useCallback((qubit: number, position: number) => {\n    if (!draggedGate && !selectedGate) return;\n    \n    const gate = draggedGate || selectedGate;\n    if (!gate) return;\n\n    placeGate(qubit, position, gate);\n    setDraggedGate(null);\n    setSelectedGate(null);\n    setIsDragging(false);\n  }, [draggedGate, selectedGate, placeGate]);\n\n  const handleCircuitClick = useCallback((qubit: number, position: number) => {\n    if (circuit[qubit][position].gate) {\n      // Remove gate if clicking on existing gate\n      removeGate(qubit, position);\n      return;\n    }\n    \n    if (selectedGate) {\n      // Place selected gate\n      placeGate(qubit, position, selectedGate);\n      setSelectedGate(null);\n    }\n  }, [circuit, selectedGate, placeGate]);\n\n  const removeGate = useCallback((qubit: number, position: number) => {\n    const newCircuit = [...circuit];\n    newCircuit[qubit][position] = { qubit, position, gate: null };\n    setCircuit(newCircuit);\n    if (soundEnabled) playSound(150, 100);\n  }, [circuit, soundEnabled]);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Enhanced Challenge Info with Educational Content */}\n      <Card className=\"bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Target className=\"h-5 w-5\" />\n              {currentChallenge.title}\n            </CardTitle>\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setSoundEnabled(!soundEnabled)}\n                data-testid=\"button-toggle-sound\"\n              >\n                {soundEnabled ? <Volume2 className=\"h-4 w-4\" /> : <VolumeX className=\"h-4 w-4\" />}\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setShowStateDetails(!showStateDetails)}\n                data-testid=\"button-toggle-details\"\n              >\n                <Eye className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setShowBlochSphere(!showBlochSphere)}\n                data-testid=\"button-toggle-bloch\"\n              >\n                <Target className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n          <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n            {currentChallenge.description}\n          </p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-sm font-medium\">Target State:</span>\n                  <Badge variant=\"outline\" className=\"font-mono text-blue-600\">\n                    {currentChallenge.targetState}\n                  </Badge>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-sm font-medium\">Moves:</span>\n                  <Badge variant={moves > currentChallenge.maxMoves ? \"destructive\" : \"secondary\"}>\n                    {moves}/{currentChallenge.maxMoves}\n                  </Badge>\n                </div>\n              </div>\n              <Progress value={(moves / currentChallenge.maxMoves) * 100} className=\"h-2\" />\n            </div>\n            \n            {/* Educational Tips */}\n            <div className=\"bg-white/50 dark:bg-gray-800/50 p-3 rounded-lg\">\n              <h4 className=\"text-sm font-medium mb-2 flex items-center gap-1\">\n                <Brain className=\"h-4 w-4\" />\n                Learning Tips\n              </h4>\n              <ul className=\"text-xs space-y-1\">\n                {currentChallenge.educationalTips.map((tip, index) => (\n                  <li key={index} className=\"text-gray-600 dark:text-gray-300\">• {tip}</li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className={`grid ${showBlochSphere ? 'lg:grid-cols-3' : 'lg:grid-cols-2'} gap-6`}>\n        {/* Enhanced Gate Palette */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Zap className=\"h-5 w-5\" />\n              Quantum Gate Toolkit\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid gap-3\">\n              {currentChallenge.initialGates.map((gate) => (\n                <motion.div\n                  key={gate.id}\n                  drag\n                  dragSnapToOrigin\n                  onDragStart={() => {\n                    setDraggedGate(gate);\n                    setIsDragging(true);\n                  }}\n                  onDragEnd={() => {\n                    setDraggedGate(null);\n                    setIsDragging(false);\n                  }}\n                  onClick={() => {\n                    if (!isDragging) {\n                      setSelectedGate(selectedGate?.id === gate.id ? null : gate);\n                      toast({\n                        title: selectedGate?.id === gate.id ? \"Gate Deselected\" : \"Gate Selected\",\n                        description: selectedGate?.id === gate.id ? \"Click on a circuit position to place the gate\" : `${gate.name} selected. Click on a circuit position to place it.`,\n                      });\n                    }\n                  }}\n                  whileDrag={{ scale: 1.1, rotate: 5 }}\n                  whileHover={{ scale: 1.02 }}\n                  className={`${gate.color} text-white p-4 rounded-xl cursor-pointer shadow-lg border-2 transition-all ${\n                    selectedGate?.id === gate.id ? 'border-yellow-300 ring-2 ring-yellow-300' : 'border-white/20'\n                  } ${isDragging ? 'cursor-grabbing' : 'cursor-grab'}`}\n                  data-testid={`gate-${gate.id}`}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"text-2xl font-bold bg-white/20 rounded-lg w-12 h-12 flex items-center justify-center\">\n                      {gate.symbol}\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-semibold\">{gate.name}</h4>\n                      <p className=\"text-sm opacity-90\">{gate.description}</p>\n                      {selectedGate?.id === gate.id && (\n                        <div className=\"text-xs mt-1 bg-yellow-400/20 px-2 py-1 rounded\">\n                          Click circuit to place gate\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  \n                  {/* Educational info */}\n                  {gate.educational && (\n                    <div className=\"mt-3 p-2 bg-white/10 rounded-lg text-xs space-y-1\">\n                      <div><strong>Concept:</strong> {gate.educational.concept}</div>\n                      <div><strong>Effect:</strong> {gate.educational.visualEffect}</div>\n                      <div><strong>Used in:</strong> {gate.educational.realWorldUse}</div>\n                    </div>\n                  )}\n                </motion.div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Bloch Sphere Visualization */}\n        {showBlochSphere && (\n          <motion.div\n            initial={{ opacity: 0, scale: 0.8 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.8 }}\n          >\n            <BlochSphereVisualizer\n              quantumState={quantumState ? {\n                alpha: quantumState.amplitudes[0],\n                beta: quantumState.amplitudes[1]\n              } : undefined}\n              showControls={false}\n              size=\"medium\"\n            />\n          </motion.div>\n        )}\n\n        {/* Quantum State Visualization */}\n        <Card className=\"relative overflow-hidden\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Calculator className=\"h-5 w-5\" />\n              Quantum State Monitor\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {quantumState && (\n              <div className=\"space-y-4\">\n                {/* State Probabilities Visualization */}\n                <div className=\"space-y-2\">\n                  {quantumState.labels.map((label, index) => {\n                    const probability = quantumState.probabilities[index];\n                    const amplitude = quantumState.amplitudes[index];\n                    return (\n                      <motion.div\n                        key={label}\n                        initial={{ opacity: 0, x: -20 }}\n                        animate={{ opacity: 1, x: 0 }}\n                        transition={{ delay: index * 0.1 }}\n                        className=\"space-y-1\"\n                      >\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"font-mono text-sm\">{label}</span>\n                          <span className=\"text-xs text-gray-600\">\n                            {(probability * 100).toFixed(1)}%\n                          </span>\n                        </div>\n                        <div className=\"relative\">\n                          <Progress \n                            value={probability * 100} \n                            className=\"h-3\"\n                          />\n                          <motion.div\n                            className=\"absolute top-0 left-0 h-full bg-gradient-to-r from-cyan-400 to-blue-500 rounded-full\"\n                            initial={{ width: 0 }}\n                            animate={{ width: `${probability * 100}%` }}\n                            transition={{ duration: 0.5, delay: index * 0.1 }}\n                          />\n                        </div>\n                        {showStateDetails && (\n                          <div className=\"text-xs text-gray-500 font-mono\">\n                            Amplitude: {amplitude.real.toFixed(3)} + {amplitude.imaginary.toFixed(3)}i\n                          </div>\n                        )}\n                      </motion.div>\n                    );\n                  })}\n                </div>\n\n                {/* State Summary */}\n                <div className=\"bg-gray-50 dark:bg-gray-800 p-3 rounded-lg\">\n                  <div className=\"text-sm space-y-1\">\n                    <div className=\"font-medium\">Current State:</div>\n                    <div className=\"font-mono text-xs\">\n                      {quantumState.amplitudes.map((amp, index) => {\n                        if (Math.abs(amp.real) < 0.001 && Math.abs(amp.imaginary) < 0.001) return '';\n                        const sign = index === 0 ? '' : ' + ';\n                        const coeff = Math.abs(amp.real - 1) < 0.001 ? '' : amp.real.toFixed(3);\n                        return `${sign}${coeff}${quantumState.labels[index]}`;\n                      }).filter(Boolean).join('') || '|00⟩'}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Enhanced Quantum Circuit Builder */}\n      <Card className=\"relative overflow-hidden\">\n        {/* Particle Effects Overlay */}\n        <QuantumParticleEffects\n          trigger={particleEffect || undefined}\n          intensity=\"medium\"\n          effectType={isComplete ? 'success' : 'quantum'}\n          width={800}\n          height={200}\n          className=\"absolute inset-0 pointer-events-none z-10\"\n        />\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Sparkles className=\"h-5 w-5\" />\n            Quantum Circuit Builder\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {/* Circuit Grid */}\n            <div className=\"bg-gradient-to-r from-gray-50 to-blue-50 dark:from-gray-800 dark:to-blue-900/20 p-6 rounded-xl\">\n              {circuit.map((row, qubitIndex) => (\n                <div key={qubitIndex} className=\"flex items-center gap-2 mb-4 last:mb-0\">\n                  {/* Qubit Label */}\n                  <div className=\"w-12 text-center\">\n                    <Badge variant=\"outline\" className=\"font-mono\">\n                      q{qubitIndex}\n                    </Badge>\n                  </div>\n\n                  {/* Quantum Wire */}\n                  <div className=\"flex-1 relative\">\n                    <div className=\"absolute top-1/2 left-0 right-0 h-0.5 bg-gray-400 dark:bg-gray-600\" />\n                    <div className=\"flex gap-4 relative z-10\">\n                      {row.map((position, posIndex) => (\n                        <motion.div\n                          key={`${qubitIndex}-${posIndex}`}\n                          className={`w-16 h-16 border-2 rounded-lg flex items-center justify-center cursor-pointer transition-all duration-200 ${\n                            position.gate \n                              ? 'border-solid border-blue-500 bg-blue-50 dark:bg-blue-900/20' \n                              : 'border-dashed border-gray-300 dark:border-gray-600'\n                          } ${\n                            (draggedGate || selectedGate) && !position.gate \n                              ? 'border-green-400 bg-green-50 dark:bg-green-900/20 hover:bg-green-100 dark:hover:bg-green-900/30' \n                              : ''\n                          } ${\n                            position.gate \n                              ? 'hover:bg-red-50 dark:hover:bg-red-900/20' \n                              : 'hover:bg-gray-50 dark:hover:bg-gray-800'\n                          }`}\n                          onDrop={(e) => {\n                            e.preventDefault();\n                            handleDrop(qubitIndex, posIndex);\n                          }}\n                          onDragOver={(e) => {\n                            e.preventDefault();\n                            e.currentTarget.classList.add('bg-green-100', 'dark:bg-green-900/40');\n                          }}\n                          onDragLeave={(e) => {\n                            e.currentTarget.classList.remove('bg-green-100', 'dark:bg-green-900/40');\n                          }}\n                          onClick={() => handleCircuitClick(qubitIndex, posIndex)}\n                          whileHover={{ scale: 1.05 }}\n                          animate={\n                            animatingGate?.qubit === qubitIndex && animatingGate?.position === posIndex\n                              ? { scale: [1, 1.2, 1], rotate: [0, 360, 0] }\n                              : {}\n                          }\n                          data-testid={`circuit-position-${qubitIndex}-${posIndex}`}\n                        >\n                          {position.gate && (\n                            <motion.div\n                              initial={{ scale: 0, rotate: -180 }}\n                              animate={{ scale: 1, rotate: 0 }}\n                              className={`${position.gate.color} text-white w-full h-full rounded-lg flex items-center justify-center font-bold text-lg shadow-lg`}\n                            >\n                              {position.gate.symbol}\n                            </motion.div>\n                          )}\n                        </motion.div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* State Indicator */}\n                  <div className=\"w-8 h-8 rounded-full bg-gradient-to-r from-green-400 to-blue-500 flex items-center justify-center text-white text-xs font-bold\">\n                    {qubitIndex}\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {/* Instructions and Help */}\n            <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-4\">\n              <h4 className=\"font-medium text-blue-800 dark:text-blue-200 mb-2 flex items-center gap-2\">\n                <Target className=\"h-4 w-4\" />\n                How to Use the Circuit Builder:\n              </h4>\n              <div className=\"grid md:grid-cols-2 gap-4 text-sm text-blue-700 dark:text-blue-300\">\n                <div>\n                  <strong>🖱️ Drag & Drop:</strong>\n                  <ul className=\"mt-1 space-y-1 ml-4\">\n                    <li>• Drag gates from toolkit to circuit positions</li>\n                    <li>• Drop zones turn green when valid</li>\n                  </ul>\n                </div>\n                <div>\n                  <strong>👆 Click Mode:</strong>\n                  <ul className=\"mt-1 space-y-1 ml-4\">\n                    <li>• Click gate to select (highlighted in yellow)</li>\n                    <li>• Click circuit position to place gate</li>\n                    <li>• Click placed gates to remove them</li>\n                  </ul>\n                </div>\n              </div>\n              <div className=\"mt-3 text-sm\">\n                <strong>🎯 Goal:</strong> Create the quantum state <span className=\"font-mono bg-blue-100 dark:bg-blue-800 px-2 py-1 rounded\">{currentChallenge.targetState}</span>\n              </div>\n            </div>\n\n            {/* Control Buttons */}\n            <div className=\"flex gap-3\">\n              <Button\n                onClick={checkSolution}\n                className=\"bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white\"\n                data-testid=\"button-check-solution\"\n              >\n                <Check className=\"h-4 w-4 mr-2\" />\n                Check Solution\n              </Button>\n              <Button\n                onClick={resetCircuit}\n                variant=\"outline\"\n                data-testid=\"button-reset-circuit\"\n              >\n                <RotateCcw className=\"h-4 w-4 mr-2\" />\n                Reset Circuit\n              </Button>\n              <Button\n                onClick={() => setShowStateDetails(!showStateDetails)}\n                variant=\"ghost\"\n                data-testid=\"button-toggle-advanced\"\n              >\n                <Brain className=\"h-4 w-4 mr-2\" />\n                {showStateDetails ? 'Hide' : 'Show'} Details\n              </Button>\n              {selectedGate && (\n                <Button \n                  onClick={() => setSelectedGate(null)} \n                  variant=\"secondary\" \n                  size=\"sm\"\n                  data-testid=\"button-deselect\"\n                >\n                  <X className=\"h-4 w-4 mr-2\" />\n                  Deselect Gate\n                </Button>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Success Celebration */}\n      <QuantumSuccessCelebration\n        show={showCelebration}\n        onComplete={() => setShowCelebration(false)}\n      />\n\n      {/* Result Display */}\n      <AnimatePresence>\n        {showResult && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n          >\n            <Card className={`${isComplete ? 'bg-green-50 border-green-200 dark:bg-green-900/20' : 'bg-red-50 border-red-200 dark:bg-red-900/20'}`}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center gap-4\">\n                  <div className={`w-12 h-12 rounded-full flex items-center justify-center ${\n                    isComplete ? 'bg-green-500' : 'bg-red-500'\n                  } text-white`}>\n                    {isComplete ? <Check className=\"h-6 w-6\" /> : <X className=\"h-6 w-6\" />}\n                  </div>\n                  <div>\n                    <h3 className=\"text-lg font-semibold\">\n                      {isComplete ? '🎉 Quantum State Achieved!' : '❌ State Mismatch'}\n                    </h3>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                      {isComplete \n                        ? `Perfect! You successfully created the target quantum state in ${moves} moves.`\n                        : 'The current quantum state doesn\\'t match the target. Try adjusting your circuit!'\n                      }\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}","size_bytes":33496},"client/src/components/quantum/gate-simulator.tsx":{"content":"import { useState, useCallback } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  RotateCcw, \n  Play, \n  Check, \n  X, \n  Zap, \n  Target,\n  ArrowRight\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Types for quantum gates and circuits\ninterface QuantumGate {\n  id: string;\n  name: string;\n  symbol: string;\n  color: string;\n  description: string;\n  matrix?: number[][];\n}\n\ninterface CircuitPosition {\n  qubit: number;\n  position: number;\n  gate: QuantumGate | null;\n}\n\ninterface Challenge {\n  id: string;\n  title: string;\n  description: string;\n  targetState: string;\n  initialGates: QuantumGate[];\n  solution: { qubit: number; position: number; gateId: string }[];\n  maxMoves: number;\n}\n\n// Available quantum gates\nconst QUANTUM_GATES: QuantumGate[] = [\n  {\n    id: \"hadamard\",\n    name: \"Hadamard\",\n    symbol: \"H\",\n    color: \"bg-blue-500\",\n    description: \"Creates superposition - puts qubit in equal probability of |0⟩ and |1⟩\",\n    matrix: [[1, 1], [1, -1]]\n  },\n  {\n    id: \"pauli-x\",\n    name: \"Pauli-X\",\n    symbol: \"X\",\n    color: \"bg-red-500\", \n    description: \"Bit flip - flips |0⟩ to |1⟩ and |1⟩ to |0⟩\"\n  },\n  {\n    id: \"pauli-y\",\n    name: \"Pauli-Y\",\n    symbol: \"Y\", \n    color: \"bg-yellow-500\",\n    description: \"Bit and phase flip combined\"\n  },\n  {\n    id: \"pauli-z\",\n    name: \"Pauli-Z\",\n    symbol: \"Z\",\n    color: \"bg-green-500\",\n    description: \"Phase flip - adds π phase to |1⟩ state\"\n  },\n  {\n    id: \"cnot\",\n    name: \"CNOT\",\n    symbol: \"⊕\",\n    color: \"bg-purple-500\",\n    description: \"Controlled-NOT - flips target qubit if control is |1⟩\"\n  }\n];\n\n// Sample challenge\nconst SAMPLE_CHALLENGE: Challenge = {\n  id: \"superposition-intro\",\n  title: \"Create Superposition\",\n  description: \"Use a Hadamard gate to put the first qubit into superposition state |+⟩ = (|0⟩ + |1⟩)/√2\",\n  targetState: \"|+⟩ ⊗ |0⟩\",\n  initialGates: [QUANTUM_GATES[0]], // Only Hadamard available\n  solution: [{ qubit: 0, position: 0, gateId: \"hadamard\" }],\n  maxMoves: 1\n};\n\ninterface GateSimulatorProps {\n  challenge?: Challenge;\n  onComplete?: (success: boolean) => void;\n}\n\nexport function GateSimulator({ challenge = SAMPLE_CHALLENGE, onComplete }: GateSimulatorProps) {\n  const [circuit, setCircuit] = useState<CircuitPosition[][]>(\n    Array(2).fill(null).map((_, qubit) =>\n      Array(4).fill(null).map((_, pos) => ({ qubit, position: pos, gate: null }))\n    )\n  );\n  const [draggedGate, setDraggedGate] = useState<QuantumGate | null>(null);\n  const [moves, setMoves] = useState(0);\n  const [isComplete, setIsComplete] = useState(false);\n  const [showResult, setShowResult] = useState(false);\n  const { toast } = useToast();\n\n  const resetCircuit = useCallback(() => {\n    setCircuit(\n      Array(2).fill(null).map((_, qubit) =>\n        Array(4).fill(null).map((_, pos) => ({ qubit, position: pos, gate: null }))\n      )\n    );\n    setMoves(0);\n    setIsComplete(false);\n    setShowResult(false);\n  }, []);\n\n  const checkSolution = useCallback(() => {\n    const currentCircuit = circuit.flatMap(row => \n      row.filter(pos => pos.gate !== null).map(pos => ({\n        qubit: pos.qubit,\n        position: pos.position,\n        gateId: pos.gate!.id\n      }))\n    );\n\n    const isCorrect = challenge.solution.length === currentCircuit.length &&\n      challenge.solution.every(solution => \n        currentCircuit.some(current => \n          current.qubit === solution.qubit && \n          current.gateId === solution.gateId\n        )\n      );\n\n    setIsComplete(isCorrect);\n    setShowResult(true);\n\n    if (isCorrect) {\n      toast({\n        title: \"🎉 Challenge Solved!\",\n        description: `You created the target state in ${moves} moves!`,\n      });\n      onComplete?.(true);\n    } else {\n      toast({\n        title: \"Not quite right\",\n        description: \"Try a different gate arrangement. Check the target state!\",\n        variant: \"destructive\"\n      });\n    }\n  }, [circuit, challenge.solution, moves, toast, onComplete]);\n\n  const handleDrop = useCallback((qubit: number, position: number) => {\n    if (!draggedGate) return;\n\n    const newCircuit = [...circuit];\n    newCircuit[qubit][position] = { qubit, position, gate: draggedGate };\n    \n    setCircuit(newCircuit);\n    setMoves(prev => prev + 1);\n    setDraggedGate(null);\n  }, [circuit, draggedGate]);\n\n  const removeGate = useCallback((qubit: number, position: number) => {\n    const newCircuit = [...circuit];\n    newCircuit[qubit][position] = { qubit, position, gate: null };\n    setCircuit(newCircuit);\n  }, [circuit]);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Challenge Info */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Target className=\"h-5 w-5\" />\n            {challenge.title}\n          </CardTitle>\n          <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n            {challenge.description}\n          </p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm font-medium\">Target State:</span>\n              <Badge variant=\"outline\" className=\"font-mono\">\n                {challenge.targetState}\n              </Badge>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm font-medium\">Moves:</span>\n              <Badge variant={moves > challenge.maxMoves ? \"destructive\" : \"secondary\"}>\n                {moves}/{challenge.maxMoves}\n              </Badge>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid lg:grid-cols-2 gap-6\">\n        {/* Gate Palette */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Zap className=\"h-5 w-5\" />\n              Available Gates\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 gap-3\">\n              {challenge.initialGates.map((gate) => (\n                <motion.div\n                  key={gate.id}\n                  drag\n                  dragSnapToOrigin\n                  onDragStart={() => setDraggedGate(gate)}\n                  onDragEnd={() => setDraggedGate(null)}\n                  whileDrag={{ scale: 1.1 }}\n                  whileHover={{ scale: 1.02 }}\n                  className={`${gate.color} text-white p-4 rounded-lg cursor-grab active:cursor-grabbing shadow-lg`}\n                  data-testid={`gate-${gate.id}`}\n                >\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold mb-1\">{gate.symbol}</div>\n                    <div className=\"text-xs font-medium\">{gate.name}</div>\n                  </div>\n                  <div className=\"text-xs mt-2 opacity-90\">{gate.description}</div>\n                </motion.div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Quantum Circuit */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <ArrowRight className=\"h-5 w-5\" />\n              Quantum Circuit\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {/* Qubit Lines */}\n              {circuit.map((row, qubitIndex) => (\n                <div key={qubitIndex} className=\"flex items-center gap-2\">\n                  <div className=\"w-12 text-sm font-mono\">\n                    |q{qubitIndex}⟩\n                  </div>\n                  <div className=\"flex-1 flex items-center\">\n                    <div className=\"h-px bg-gray-400 flex-1 relative\">\n                      {/* Gate Positions */}\n                      <div className=\"absolute inset-0 flex items-center justify-around\">\n                        {row.map((position) => (\n                          <motion.div\n                            key={`${position.qubit}-${position.position}`}\n                            onDrop={() => handleDrop(position.qubit, position.position)}\n                            onDragOver={(e) => e.preventDefault()}\n                            className=\"relative\"\n                            data-testid={`position-${position.qubit}-${position.position}`}\n                          >\n                            {position.gate ? (\n                              <motion.div\n                                initial={{ scale: 0 }}\n                                animate={{ scale: 1 }}\n                                whileHover={{ scale: 1.1 }}\n                                onClick={() => removeGate(position.qubit, position.position)}\n                                className={`${position.gate.color} text-white w-12 h-12 rounded-lg flex items-center justify-center cursor-pointer shadow-lg`}\n                              >\n                                <span className=\"text-lg font-bold\">\n                                  {position.gate.symbol}\n                                </span>\n                              </motion.div>\n                            ) : (\n                              <div className=\"w-12 h-12 border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center\">\n                                <div className=\"w-2 h-2 bg-gray-300 rounded-full\" />\n                              </div>\n                            )}\n                          </motion.div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"w-16 text-sm font-mono text-right\">\n                    {qubitIndex === 0 ? (isComplete ? challenge.targetState.split(' ⊗ ')[0] : '|0⟩') : '|0⟩'}\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {/* Controls */}\n            <div className=\"flex gap-3 mt-6\">\n              <Button \n                onClick={checkSolution}\n                className=\"flex-1 bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800\"\n                data-testid=\"button-run-circuit\"\n              >\n                <Play className=\"h-4 w-4 mr-2\" />\n                Run Circuit\n              </Button>\n              <Button \n                variant=\"outline\"\n                onClick={resetCircuit}\n                data-testid=\"button-reset-circuit\"\n              >\n                <RotateCcw className=\"h-4 w-4 mr-2\" />\n                Reset\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Result Modal */}\n      <AnimatePresence>\n        {showResult && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\"\n          >\n            <motion.div\n              initial={{ scale: 0.9, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              exit={{ scale: 0.9, opacity: 0 }}\n              className=\"bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full\"\n            >\n              <div className=\"text-center\">\n                <div className=\"text-4xl mb-4\">\n                  {isComplete ? \"🎉\" : \"🤔\"}\n                </div>\n                <h3 className=\"text-xl font-bold mb-2\">\n                  {isComplete ? \"Success!\" : \"Try Again\"}\n                </h3>\n                <p className=\"text-gray-600 dark:text-gray-300 mb-6\">\n                  {isComplete \n                    ? `You successfully created the target state in ${moves} moves!`\n                    : \"The circuit didn't produce the expected result. Check the target state and try different gates.\"\n                  }\n                </p>\n                <div className=\"flex gap-3\">\n                  <Button\n                    onClick={() => setShowResult(false)}\n                    variant={isComplete ? \"default\" : \"outline\"}\n                    className=\"flex-1\"\n                  >\n                    {isComplete ? \"Continue\" : \"Try Again\"}\n                  </Button>\n                  {!isComplete && (\n                    <Button\n                      onClick={() => {\n                        resetCircuit();\n                        setShowResult(false);\n                      }}\n                      variant=\"outline\"\n                    >\n                      Reset\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}","size_bytes":12918},"client/src/components/quantum/level-challenges.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  ArrowLeft, \n  CheckCircle, \n  Star, \n  Clock, \n  Zap,\n  Target,\n  Trophy\n} from \"lucide-react\";\nimport { EnhancedGateSimulator } from \"./enhanced-gate-simulator\";\nimport { QuantumJobIntegration } from \"./quantum-job-integration\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { QuantumTutorialSystem, QuantumHint } from \"./quantum-tutorial-system\";\n\n// Import enhanced quantum gates to ensure proper educational data\nconst ENHANCED_QUANTUM_GATES = [\n  {\n    id: \"hadamard\",\n    name: \"Hadamard\",\n    symbol: \"H\",\n    color: \"bg-gradient-to-r from-blue-500 to-blue-600\",\n    description: \"Creates equal superposition - the foundation of quantum computing\",\n    matrix: [\n      [{ real: 1/Math.sqrt(2), imaginary: 0 }, { real: 1/Math.sqrt(2), imaginary: 0 }],\n      [{ real: 1/Math.sqrt(2), imaginary: 0 }, { real: -1/Math.sqrt(2), imaginary: 0 }]\n    ],\n    educational: {\n      concept: \"Superposition\",\n      visualEffect: \"Transforms |0⟩ → (|0⟩ + |1⟩)/√2 and |1⟩ → (|0⟩ - |1⟩)/√2\",\n      realWorldUse: \"Used in quantum algorithms like Grover's search and Shor's factoring\"\n    }\n  },\n  {\n    id: \"pauli-x\",\n    name: \"Pauli-X\",\n    symbol: \"X\",\n    color: \"bg-gradient-to-r from-red-500 to-red-600\",\n    description: \"Quantum NOT gate - flips qubit state\",\n    matrix: [\n      [{ real: 0, imaginary: 0 }, { real: 1, imaginary: 0 }],\n      [{ real: 1, imaginary: 0 }, { real: 0, imaginary: 0 }]\n    ],\n    educational: {\n      concept: \"Bit Flip\",\n      visualEffect: \"Flips |0⟩ → |1⟩ and |1⟩ → |0⟩\",\n      realWorldUse: \"Error correction, quantum state preparation\"\n    }\n  },\n  {\n    id: \"cnot\",\n    name: \"CNOT\",\n    symbol: \"CNOT\",\n    color: \"bg-gradient-to-r from-purple-500 to-purple-600\",\n    description: \"Controlled NOT - creates entanglement between qubits\",\n    educational: {\n      concept: \"Entanglement\",\n      visualEffect: \"Flips target if control is |1⟩\",\n      realWorldUse: \"Bell states, error correction, quantum teleportation\"\n    }\n  }\n];\n\n// Helper function to get gate by ID\nconst getGateById = (id: string) => ENHANCED_QUANTUM_GATES.find(gate => gate.id === id);\n\n// Enhanced challenge types\nexport interface LevelChallenge {\n  id: string;\n  title: string;\n  description: string;\n  difficulty: 'beginner' | 'intermediate' | 'advanced' | 'research';\n  points: number;\n  timeLimit?: number;\n  category: string;\n  learningObjectives: string[];\n  challenge: {\n    type: 'gate-builder' | 'circuit-analysis' | 'algorithm-implementation' | 'research-project';\n    instructions: string;\n    targetState?: string;\n    initialGates: any[];\n    solution: any[];\n    maxMoves: number;\n    hints?: string[];\n  };\n}\n\n// Sample challenges for different levels\nconst LEVEL_CHALLENGES: Record<string, LevelChallenge> = {\n  \"qb-101\": {\n    id: \"qb-101\",\n    title: \"First Qubit\",\n    description: \"Learn what a qubit is and how it differs from classical bits\",\n    difficulty: \"beginner\",\n    points: 100,\n    timeLimit: 300, // 5 minutes\n    category: \"Quantum Basics\",\n    learningObjectives: [\n      \"Understand the concept of a qubit\",\n      \"Differentiate between |0⟩ and |1⟩ states\",\n      \"Visualize quantum state representation\"\n    ],\n    challenge: {\n      type: 'gate-builder',\n      instructions: \"Click on the qubit to see it in the |0⟩ state. This is your first quantum bit!\",\n      targetState: \"|0⟩\",\n      initialGates: [], // No gates needed for this intro\n      solution: [],\n      maxMoves: 0\n    }\n  },\n  \"qb-102\": {\n    id: \"qb-102\", \n    title: \"Superposition States\",\n    description: \"Master the concept of quantum superposition with interactive examples\",\n    difficulty: \"beginner\",\n    points: 150,\n    timeLimit: 600, // 10 minutes\n    category: \"Quantum Basics\",\n    learningObjectives: [\n      \"Create superposition using Hadamard gates\",\n      \"Understand equal probability states\",\n      \"Measure superposition outcomes\"\n    ],\n    challenge: {\n      type: 'gate-builder',\n      instructions: \"Use a Hadamard gate to create superposition. Place it on the first qubit to create the |+⟩ state.\",\n      targetState: \"|+⟩\",\n      initialGates: [getGateById(\"hadamard\")].filter(Boolean),\n      solution: [{ qubit: 0, position: 0, gateId: \"hadamard\" }],\n      maxMoves: 1,\n      hints: [\n        \"The Hadamard gate creates an equal superposition state\",\n        \"Drag the H gate onto the qubit line\",\n        \"The |+⟩ state means (|0⟩ + |1⟩)/√2\"\n      ]\n    }\n  },\n  \"qg-201\": {\n    id: \"qg-201\",\n    title: \"Hadamard Gates\",\n    description: \"Build circuits using Hadamard gates to create superposition\",\n    difficulty: \"intermediate\",\n    points: 200,\n    timeLimit: 900, // 15 minutes\n    category: \"Quantum Gates\",\n    learningObjectives: [\n      \"Master Hadamard gate properties\",\n      \"Create complex superposition states\",\n      \"Understand gate sequences\"\n    ],\n    challenge: {\n      type: 'gate-builder',\n      instructions: \"Create a Bell state by first applying Hadamard to qubit 0, then CNOT with qubit 0 as control and qubit 1 as target.\",\n      targetState: \"|Φ+⟩ = (|00⟩ + |11⟩)/√2\",\n      initialGates: [\n        {\n          id: \"hadamard\",\n          name: \"Hadamard\", \n          symbol: \"H\",\n          color: \"bg-blue-500\",\n          description: \"Creates superposition\"\n        },\n        {\n          id: \"cnot\",\n          name: \"CNOT\",\n          symbol: \"⊕\", \n          color: \"bg-purple-500\",\n          description: \"Controlled-NOT gate\"\n        }\n      ],\n      solution: [\n        { qubit: 0, position: 0, gateId: \"hadamard\" },\n        { qubit: 0, position: 1, gateId: \"cnot\" }\n      ],\n      maxMoves: 2,\n      hints: [\n        \"Start with Hadamard on the control qubit\",\n        \"Then add CNOT to create entanglement\",\n        \"Bell states are maximally entangled\"\n      ]\n    }\n  },\n  \"qr-501\": {\n    id: \"qr-501\",\n    title: \"Quantum Teleportation Protocol\",\n    description: \"Execute a real quantum teleportation circuit on IBM Quantum hardware\",\n    difficulty: \"research\",\n    points: 500,\n    timeLimit: 1800, // 30 minutes\n    category: \"Quantum Research\",\n    learningObjectives: [\n      \"Implement quantum teleportation protocol\",\n      \"Execute circuits on real quantum hardware\",\n      \"Understand quantum measurement and state transfer\"\n    ],\n    challenge: {\n      type: 'research-project',\n      instructions: \"Build and execute a quantum teleportation circuit. Create Bell pair entanglement, perform measurements, and apply conditional operations to teleport a qubit state. This will run on real IBM Quantum hardware!\",\n      targetState: \"Teleported |ψ⟩ state\",\n      initialGates: [],\n      solution: [],\n      maxMoves: 0,\n      hints: [\n        \"Start by creating a Bell pair between qubits 1 and 2\",\n        \"Entangle the input qubit (0) with qubit 1 using CNOT\", \n        \"Measure qubits 0 and 1 to collapse the entangled state\",\n        \"Apply X and Z gates conditionally based on measurement results\"\n      ]\n    }\n  },\n  \"qg-202\": {\n    id: \"qg-202\",\n    title: \"Pauli Gates (X, Y, Z)\", \n    description: \"Master the three Pauli gates for single-qubit rotations\",\n    difficulty: \"intermediate\",\n    points: 300,\n    timeLimit: 900, // 15 minutes\n    category: \"Level 2: Basic Quantum Gates\",\n    learningObjectives: [\n      \"Master all three Pauli gates\",\n      \"Understand single-qubit rotations\",\n      \"Learn the role of X, Y, Z gates\"\n    ],\n    challenge: {\n      type: 'gate-builder',\n      instructions: \"Learn the three Pauli gates. Apply X gate to flip |0⟩ to |1⟩, then Y gate for complex rotation, then Z gate for phase flip.\",\n      targetState: \"Demonstrate all Pauli rotations\",\n      initialGates: [\n        {\n          id: \"x\",\n          name: \"Pauli-X\",\n          symbol: \"X\",\n          color: \"bg-red-500\",\n          description: \"Bit flip gate |0⟩ ↔ |1⟩\"\n        },\n        {\n          id: \"y\",\n          name: \"Pauli-Y\",\n          symbol: \"Y\",\n          color: \"bg-green-500\",\n          description: \"Bit and phase flip\"\n        },\n        {\n          id: \"z\",\n          name: \"Pauli-Z\",\n          symbol: \"Z\",\n          color: \"bg-blue-500\",\n          description: \"Phase flip gate\"\n        }\n      ],\n      solution: [\n        { qubit: 0, position: 0, gateId: \"x\" },\n        { qubit: 0, position: 1, gateId: \"y\" },\n        { qubit: 0, position: 2, gateId: \"z\" }\n      ],\n      maxMoves: 3,\n      hints: [\n        \"X gate flips |0⟩ → |1⟩ and |1⟩ → |0⟩\",\n        \"Y gate applies both bit and phase flip\",\n        \"Z gate flips the phase: |1⟩ → -|1⟩\"\n      ]\n    }\n  },\n  \"qa-404\": {\n    id: \"qa-404\",\n    title: \"Bell State Analysis\",\n    description: \"Run real Bell state circuits on IBM Quantum hardware\",\n    difficulty: \"advanced\",\n    points: 400,\n    timeLimit: 2400, // 40 minutes\n    category: \"Quantum Algorithms\",\n    learningObjectives: [\n      \"Implement Bell state preparation\",\n      \"Execute algorithms on quantum hardware\",\n      \"Analyze quantum measurement statistics\"\n    ],\n    challenge: {\n      type: 'algorithm-implementation',\n      instructions: \"Implement and execute a Bell state preparation algorithm on real IBM Quantum hardware. Prepare the |Φ+⟩ Bell state and analyze the measurement results to verify entanglement.\",\n      targetState: \"Bell state |Φ+⟩ = (|00⟩ + |11⟩)/√2\",\n      initialGates: [],\n      solution: [],\n      maxMoves: 0,\n      hints: [\n        \"Use Hadamard gate on control qubit\",\n        \"Apply CNOT gate to create entanglement\",\n        \"Measure both qubits simultaneously\",\n        \"Check for 50/50 correlation in |00⟩ and |11⟩ states\"\n      ]\n    }\n  },\n  \"qr-502\": {\n    id: \"qr-502\",\n    title: \"Shor's Factoring Algorithm\",\n    description: \"Break RSA encryption using quantum period finding\",\n    difficulty: \"research\",\n    points: 1200,\n    timeLimit: 3600, // 60 minutes\n    category: \"Level 5: Advanced Research\",\n    learningObjectives: [\n      \"Implement Shor's factoring algorithm\",\n      \"Understand quantum period finding\",\n      \"Break RSA encryption with quantum computing\"\n    ],\n    challenge: {\n      type: 'research-project',\n      instructions: \"Implement Shor's algorithm to factor the number 15. Use quantum period finding to discover the period of the function f(x) = a^x mod N, then use classical post-processing to find the factors.\",\n      targetState: \"Factored number: 15 = 3 × 5\",\n      initialGates: [],\n      solution: [],\n      maxMoves: 0,\n      hints: [\n        \"Choose random a coprime to N (e.g., a=7)\",\n        \"Implement quantum period finding using QFT\",\n        \"Measure to find period r of 7^x mod 15\",\n        \"Use classical algorithm: gcd(a^(r/2)±1, N) to find factors\"\n      ]\n    }\n  },\n  // Missing Level 1 challenge\n  \"qb-103\": {\n    id: \"qb-103\",\n    title: \"Quantum Measurement\",\n    description: \"Understand how quantum measurement collapses superposition states\",\n    difficulty: \"beginner\",\n    points: 200,\n    timeLimit: 600,\n    category: \"Level 1: Quantum Fundamentals\",\n    learningObjectives: [\n      \"Understand quantum measurement\",\n      \"Learn about state collapse\",\n      \"Explore measurement probabilities\"\n    ],\n    challenge: {\n      type: 'gate-builder',\n      instructions: \"Create superposition with Hadamard, then measure the qubit. Observe how measurement collapses the superposition.\",\n      targetState: \"Measured state\",\n      initialGates: [getGateById(\"hadamard\")].filter(Boolean),\n      solution: [{ qubit: 0, position: 0, gateId: \"hadamard\" }],\n      maxMoves: 1,\n      hints: [\n        \"Apply Hadamard to create superposition\",\n        \"Measurement will collapse to |0⟩ or |1⟩\",\n        \"Each measurement outcome has 50% probability\"\n      ]\n    }\n  },\n  // Missing Level 2 challenges\n  \"qg-203\": {\n    id: \"qg-203\",\n    title: \"Phase Gates (S, T)\",\n    description: \"Learn phase gates and their role in quantum computation\",\n    difficulty: \"intermediate\",\n    points: 350,\n    timeLimit: 900,\n    category: \"Level 2: Basic Quantum Gates\",\n    learningObjectives: [\n      \"Master S and T phase gates\",\n      \"Understand phase rotations\",\n      \"Learn gate relationships\"\n    ],\n    challenge: {\n      type: 'gate-builder',\n      instructions: \"Apply S gate (π/2 phase) then T gate (π/4 phase) to understand phase rotations.\",\n      targetState: \"Phase rotated state\",\n      initialGates: [\n        { id: \"s\", name: \"S Gate\", symbol: \"S\", color: \"bg-indigo-500\", description: \"π/2 phase gate\" },\n        { id: \"t\", name: \"T Gate\", symbol: \"T\", color: \"bg-pink-500\", description: \"π/4 phase gate\" }\n      ],\n      solution: [\n        { qubit: 0, position: 0, gateId: \"s\" },\n        { qubit: 0, position: 1, gateId: \"t\" }\n      ],\n      maxMoves: 2,\n      hints: [\n        \"S gate applies π/2 phase rotation\",\n        \"T gate applies π/4 phase rotation\",\n        \"Phase gates don't change measurement probabilities\"\n      ]\n    }\n  },\n  \"qg-204\": {\n    id: \"qg-204\",\n    title: \"Gate Sequences\",\n    description: \"Combine multiple gates to create complex quantum operations\",\n    difficulty: \"intermediate\",\n    points: 400,\n    timeLimit: 1200,\n    category: \"Level 2: Basic Quantum Gates\",\n    learningObjectives: [\n      \"Combine multiple quantum gates\",\n      \"Understand gate composition\",\n      \"Create complex operations\"\n    ],\n    challenge: {\n      type: 'gate-builder',\n      instructions: \"Create a sequence: H → X → H to see how gates combine. This creates a Z gate effect!\",\n      targetState: \"H-X-H sequence\",\n      initialGates: [\n        getGateById(\"hadamard\"),\n        { id: \"x\", name: \"Pauli-X\", symbol: \"X\", color: \"bg-red-500\", description: \"Bit flip\" }\n      ].filter(Boolean),\n      solution: [\n        { qubit: 0, position: 0, gateId: \"hadamard\" },\n        { qubit: 0, position: 1, gateId: \"x\" },\n        { qubit: 0, position: 2, gateId: \"hadamard\" }\n      ],\n      maxMoves: 3,\n      hints: [\n        \"Start with Hadamard gate\",\n        \"Apply X gate in the middle\",\n        \"End with another Hadamard - this creates Z gate effect!\"\n      ]\n    }\n  },\n  // Missing Level 3 challenges\n  \"qe-301\": {\n    id: \"qe-301\",\n    title: \"CNOT Gates\",\n    description: \"Master controlled-NOT gates for two-qubit operations\",\n    difficulty: \"intermediate\",\n    points: 450,\n    timeLimit: 1200,\n    category: \"Level 3: Two-Qubit Operations\",\n    learningObjectives: [\n      \"Master CNOT gate operation\",\n      \"Understand controlled operations\",\n      \"Create two-qubit interactions\"\n    ],\n    challenge: {\n      type: 'gate-builder',\n      instructions: \"Use CNOT gate to flip the target qubit only when control is |1⟩. Set up |10⟩ → |11⟩.\",\n      targetState: \"|11⟩ state\",\n      initialGates: [\n        { id: \"x\", name: \"Pauli-X\", symbol: \"X\", color: \"bg-red-500\", description: \"Bit flip\" },\n        { id: \"cnot\", name: \"CNOT\", symbol: \"⊕\", color: \"bg-purple-500\", description: \"Controlled-NOT\" }\n      ],\n      solution: [\n        { qubit: 0, position: 0, gateId: \"x\" },\n        { qubit: 0, position: 1, gateId: \"cnot\" }\n      ],\n      maxMoves: 2,\n      hints: [\n        \"First set control qubit to |1⟩ with X gate\",\n        \"Apply CNOT to flip target when control is |1⟩\",\n        \"CNOT flips target only if control is |1⟩\"\n      ]\n    }\n  },\n  \"qe-302\": {\n    id: \"qe-302\",\n    title: \"Entanglement Circuits\",\n    description: \"Create entangled states using CNOT gates and measure correlations\",\n    difficulty: \"intermediate\",\n    points: 500,\n    timeLimit: 1500,\n    category: \"Level 3: Two-Qubit Operations\",\n    learningObjectives: [\n      \"Create quantum entanglement\",\n      \"Understand correlated measurements\",\n      \"Build entangling circuits\"\n    ],\n    challenge: {\n      type: 'gate-builder',\n      instructions: \"Create entanglement: Apply H to qubit 0, then CNOT with qubit 0 as control. This creates |00⟩ + |11⟩!\",\n      targetState: \"Entangled |Φ+⟩ state\",\n      initialGates: [\n        getGateById(\"hadamard\"),\n        { id: \"cnot\", name: \"CNOT\", symbol: \"⊕\", color: \"bg-purple-500\", description: \"Controlled-NOT\" }\n      ].filter(Boolean),\n      solution: [\n        { qubit: 0, position: 0, gateId: \"hadamard\" },\n        { qubit: 0, position: 1, gateId: \"cnot\" }\n      ],\n      maxMoves: 2,\n      hints: [\n        \"Start with Hadamard on control qubit\",\n        \"Apply CNOT to create entanglement\",\n        \"Result: (|00⟩ + |11⟩)/√2 - perfectly correlated!\"\n      ]\n    }\n  },\n  \"qe-303\": {\n    id: \"qe-303\",\n    title: \"Bell States\",\n    description: \"Generate and analyze the four maximally entangled Bell states\",\n    difficulty: \"intermediate\",\n    points: 550,\n    timeLimit: 1800,\n    category: \"Level 3: Two-Qubit Operations\",\n    learningObjectives: [\n      \"Generate all four Bell states\",\n      \"Understand maximal entanglement\",\n      \"Explore quantum correlations\"\n    ],\n    challenge: {\n      type: 'gate-builder',\n      instructions: \"Create Bell state |Ψ+⟩ = (|01⟩ + |10⟩)/√2. Use H on qubit 0, X on qubit 1, then CNOT.\",\n      targetState: \"|Ψ+⟩ Bell state\",\n      initialGates: [\n        getGateById(\"hadamard\"),\n        { id: \"x\", name: \"Pauli-X\", symbol: \"X\", color: \"bg-red-500\", description: \"Bit flip\" },\n        { id: \"cnot\", name: \"CNOT\", symbol: \"⊕\", color: \"bg-purple-500\", description: \"Controlled-NOT\" }\n      ].filter(Boolean),\n      solution: [\n        { qubit: 0, position: 0, gateId: \"hadamard\" },\n        { qubit: 1, position: 0, gateId: \"x\" },\n        { qubit: 0, position: 1, gateId: \"cnot\" }\n      ],\n      maxMoves: 3,\n      hints: [\n        \"Apply Hadamard to qubit 0 for superposition\",\n        \"Apply X to qubit 1 to flip it\",\n        \"Use CNOT to entangle the qubits\"\n      ]\n    }\n  },\n  \"qe-304\": {\n    id: \"qe-304\",\n    title: \"Controlled Operations\",\n    description: \"Master various controlled gates beyond CNOT\",\n    difficulty: \"intermediate\",\n    points: 600,\n    timeLimit: 2400,\n    category: \"Level 3: Two-Qubit Operations\",\n    learningObjectives: [\n      \"Learn controlled-Z gates\",\n      \"Understand controlled rotations\",\n      \"Master multi-qubit operations\"\n    ],\n    challenge: {\n      type: 'gate-builder',\n      instructions: \"Use controlled-Z gate to apply phase only when both qubits are |1⟩. Set up |11⟩ → -|11⟩.\",\n      targetState: \"Controlled-Z effect\",\n      initialGates: [\n        { id: \"x\", name: \"Pauli-X\", symbol: \"X\", color: \"bg-red-500\", description: \"Bit flip\" },\n        { id: \"cz\", name: \"Controlled-Z\", symbol: \"CZ\", color: \"bg-indigo-500\", description: \"Controlled phase\" }\n      ],\n      solution: [\n        { qubit: 0, position: 0, gateId: \"x\" },\n        { qubit: 1, position: 0, gateId: \"x\" },\n        { qubit: 0, position: 1, gateId: \"cz\" }\n      ],\n      maxMoves: 3,\n      hints: [\n        \"Set both qubits to |1⟩ with X gates\",\n        \"Apply controlled-Z gate\",\n        \"CZ adds phase -1 only to |11⟩ state\"\n      ]\n    }\n  },\n  // Missing Level 4 challenges\n  \"qa-401\": {\n    id: \"qa-401\",\n    title: \"Deutsch Algorithm\",\n    description: \"Implement the first quantum algorithm that shows quantum advantage\",\n    difficulty: \"advanced\",\n    points: 700,\n    timeLimit: 2400,\n    category: \"Level 4: Quantum Algorithms\",\n    learningObjectives: [\n      \"Implement Deutsch algorithm\",\n      \"Understand quantum advantage\",\n      \"Learn quantum parallelism\"\n    ],\n    challenge: {\n      type: 'algorithm-implementation',\n      instructions: \"Implement Deutsch algorithm to determine if a function is constant or balanced with just one query!\",\n      targetState: \"Deutsch algorithm result\",\n      initialGates: [],\n      solution: [],\n      maxMoves: 0,\n      hints: [\n        \"Start with |01⟩ state preparation\",\n        \"Apply Hadamard to both qubits\",\n        \"Apply oracle function Uf\",\n        \"Measure first qubit - result determines function type\"\n      ]\n    }\n  },\n  \"qa-402\": {\n    id: \"qa-402\",\n    title: \"Quantum Fourier Transform\",\n    description: \"Master the QFT - foundation of Shor's algorithm and quantum phase estimation\",\n    difficulty: \"advanced\",\n    points: 800,\n    timeLimit: 3000,\n    category: \"Level 4: Quantum Algorithms\",\n    learningObjectives: [\n      \"Implement quantum Fourier transform\",\n      \"Understand phase estimation\",\n      \"Learn frequency domain operations\"\n    ],\n    challenge: {\n      type: 'algorithm-implementation',\n      instructions: \"Implement 3-qubit Quantum Fourier Transform using Hadamard and controlled phase gates.\",\n      targetState: \"QFT transformed state\",\n      initialGates: [],\n      solution: [],\n      maxMoves: 0,\n      hints: [\n        \"Apply Hadamard and controlled phase rotations\",\n        \"Use decreasing rotation angles: π/2, π/4, π/8...\",\n        \"Finish with SWAP gates to reverse qubit order\",\n        \"QFT extracts frequency information from quantum states\"\n      ]\n    }\n  },\n  \"qa-403\": {\n    id: \"qa-403\",\n    title: \"Grover's Search Algorithm\",\n    description: \"Implement quantum database search with quadratic speedup over classical algorithms\",\n    difficulty: \"advanced\",\n    points: 900,\n    timeLimit: 3600,\n    category: \"Level 4: Quantum Algorithms\",\n    learningObjectives: [\n      \"Implement Grover's search\",\n      \"Understand amplitude amplification\",\n      \"Achieve quadratic speedup\"\n    ],\n    challenge: {\n      type: 'algorithm-implementation',\n      instructions: \"Implement Grover's algorithm to search a 4-item database. Find the marked item in ~√N steps!\",\n      targetState: \"Marked item found\",\n      initialGates: [],\n      solution: [],\n      maxMoves: 0,\n      hints: [\n        \"Start with equal superposition using Hadamard gates\",\n        \"Apply oracle to mark target item\",\n        \"Use diffusion operator to amplify amplitude\",\n        \"Repeat ~√N times for maximum probability\"\n      ]\n    }\n  },\n  // Missing Level 5 challenges\n  \"qr-503\": {\n    id: \"qr-503\",\n    title: \"Variational Quantum Eigensolver (VQE)\",\n    description: \"Find molecular ground states using hybrid quantum-classical optimization\",\n    difficulty: \"research\",\n    points: 1300,\n    timeLimit: 4800,\n    category: \"Level 5: Advanced Research\",\n    learningObjectives: [\n      \"Implement VQE algorithm\",\n      \"Optimize variational parameters\",\n      \"Solve quantum chemistry problems\"\n    ],\n    challenge: {\n      type: 'research-project',\n      instructions: \"Use VQE to find the ground state energy of H2 molecule. Optimize ansatz parameters to minimize energy expectation value.\",\n      targetState: \"H2 ground state\",\n      initialGates: [],\n      solution: [],\n      maxMoves: 0,\n      hints: [\n        \"Prepare variational ansatz with parameterized gates\",\n        \"Measure energy expectation value ⟨H⟩\",\n        \"Use classical optimizer to minimize energy\",\n        \"VQE is a hybrid quantum-classical algorithm\"\n      ]\n    }\n  },\n  \"qr-504\": {\n    id: \"qr-504\",\n    title: \"Quantum Error Correction\",\n    description: \"Implement quantum error correction to protect your qubits\",\n    difficulty: \"research\",\n    points: 1400,\n    timeLimit: 5400,\n    category: \"Level 5: Advanced Research\",\n    learningObjectives: [\n      \"Implement Shor's 9-qubit code\",\n      \"Understand error syndromes\",\n      \"Protect quantum information\"\n    ],\n    challenge: {\n      type: 'research-project',\n      instructions: \"Implement Shor's 9-qubit error correction code. Encode, introduce errors, detect, and correct them!\",\n      targetState: \"Error-corrected logical qubit\",\n      initialGates: [],\n      solution: [],\n      maxMoves: 0,\n      hints: [\n        \"Encode logical qubit into 9 physical qubits\",\n        \"Use syndrome measurement to detect errors\",\n        \"Apply correction operations based on syndrome\",\n        \"Error correction enables fault-tolerant quantum computing\"\n      ]\n    }\n  },\n  \"qr-505\": {\n    id: \"qr-505\",\n    title: \"Quantum Machine Learning\",\n    description: \"Train quantum neural networks and implement quantum kernels for ML\",\n    difficulty: \"research\",\n    points: 1500,\n    timeLimit: 6000,\n    category: \"Level 5: Advanced Research\",\n    learningObjectives: [\n      \"Implement quantum neural networks\",\n      \"Use quantum kernels for classification\",\n      \"Explore quantum advantage in ML\"\n    ],\n    challenge: {\n      type: 'research-project',\n      instructions: \"Implement a quantum neural network for binary classification. Train the network using quantum gradients and achieve quantum advantage!\",\n      targetState: \"Trained quantum classifier\",\n      initialGates: [],\n      solution: [],\n      maxMoves: 0,\n      hints: [\n        \"Design quantum neural network architecture\",\n        \"Use parameterized quantum circuits as layers\",\n        \"Implement quantum gradient descent\",\n        \"Quantum kernels can provide exponential feature space\"\n      ]\n    }\n  }\n};\n\n// Export the challenges object and helper functions\nexport const getChallengeById = (id: string): LevelChallenge | undefined => {\n  return LEVEL_CHALLENGES[id];\n};\n\nexport const getAllChallenges = (): Record<string, LevelChallenge> => {\n  return LEVEL_CHALLENGES;\n};\n\n// Validation function to check if all levels have corresponding challenges\nexport const validateChallenges = (levelIds: string[]): { missing: string[], total: number } => {\n  const missing = levelIds.filter(id => !LEVEL_CHALLENGES[id]);\n  return {\n    missing,\n    total: levelIds.length\n  };\n};\n\ninterface LevelChallengeProps {\n  levelId: string;\n  onComplete: (levelId: string, success: boolean, timeElapsed: number) => void;\n  onBack: () => void;\n}\n\nexport function LevelChallenge({ levelId, onComplete, onBack }: LevelChallengeProps) {\n  const [timeElapsed, setTimeElapsed] = useState(0);\n  const [isStarted, setIsStarted] = useState(false);\n  const [currentHintIndex, setCurrentHintIndex] = useState(-1);\n  const [showTutorial, setShowTutorial] = useState(true);\n  const [currentHint, setCurrentHint] = useState<string | null>(null);\n  const [challengePhase, setChallengePhase] = useState<'tutorial' | 'challenge' | 'completed'>('tutorial');\n  const { toast } = useToast();\n  \n  const challenge = LEVEL_CHALLENGES[levelId];\n  \n  if (!challenge) {\n    return (\n      <div className=\"text-center p-8\">\n        <p className=\"text-red-500\">Challenge not found: {levelId}</p>\n        <Button onClick={onBack} className=\"mt-4\">\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Back to Levels\n        </Button>\n      </div>\n    );\n  }\n\n  const handleChallengeComplete = (success: boolean) => {\n    console.log(`🎯 Challenge ${levelId} completion:`, { success, timeElapsed });\n    \n    if (success) {\n      setChallengePhase('completed');\n      toast({\n        title: \"✅ Challenge Completed!\",\n        description: `Great job! You successfully completed ${challenge.title}`,\n      });\n      \n      // Small delay to let user see the success message\n      setTimeout(() => {\n        onComplete(levelId, success, timeElapsed);\n      }, 1000);\n    } else {\n      onComplete(levelId, success, timeElapsed);\n    }\n  };\n\n  // Tutorial completion handler\n  const handleTutorialComplete = () => {\n    setShowTutorial(false);\n    setChallengePhase('challenge');\n    // Show helpful hint for first-time users\n    if (levelId === 'qb-101') {\n      setCurrentHint(\"🎯 Great! Now you're ready to explore your first quantum concepts. Let's start learning!\");\n      setTimeout(() => setCurrentHint(null), 5000);\n    }\n  };\n\n  const showNextHint = () => {\n    if (challenge.challenge.hints && currentHintIndex < challenge.challenge.hints.length - 1) {\n      setCurrentHintIndex(prev => prev + 1);\n      toast({\n        title: \"💡 Quantum Hint\",\n        description: challenge.challenge.hints![currentHintIndex + 1],\n      });\n      // Show educational hint overlay\n      setCurrentHint(challenge.challenge.hints![currentHintIndex + 1]);\n      setTimeout(() => setCurrentHint(null), 6000);\n    }\n  };\n\n  const getDifficultyColor = () => {\n    switch (challenge.difficulty) {\n      case 'beginner': return 'text-green-600 bg-green-100 dark:bg-green-900/20';\n      case 'intermediate': return 'text-blue-600 bg-blue-100 dark:bg-blue-900/20';\n      case 'advanced': return 'text-purple-600 bg-purple-100 dark:bg-purple-900/20';\n      case 'research': return 'text-red-600 bg-red-100 dark:bg-red-900/20';\n      default: return 'text-gray-600 bg-gray-100 dark:bg-gray-900/20';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 dark:from-gray-900 dark:via-blue-900 dark:to-purple-900\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"flex items-center justify-between mb-8\"\n        >\n          <div className=\"flex items-center gap-4\">\n            <Button variant=\"ghost\" onClick={onBack} size=\"sm\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Quest\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold\">{challenge.title}</h1>\n              <p className=\"text-gray-600 dark:text-gray-300\">{challenge.description}</p>\n            </div>\n          </div>\n          <Badge className={`${getDifficultyColor()} font-semibold`}>\n            {challenge.difficulty.toUpperCase()}\n          </Badge>\n        </motion.div>\n\n        {/* Challenge Stats */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\"\n        >\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <Star className=\"h-6 w-6 text-yellow-500 mx-auto mb-2\" />\n              <div className=\"text-lg font-bold\">{challenge.points}</div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-300\">Points</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <Clock className=\"h-6 w-6 text-blue-500 mx-auto mb-2\" />\n              <div className=\"text-lg font-bold\">\n                {challenge.timeLimit ? Math.floor(challenge.timeLimit / 60) : '∞'}\n              </div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n                {challenge.timeLimit ? 'Minutes' : 'No Limit'}\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <Target className=\"h-6 w-6 text-green-500 mx-auto mb-2\" />\n              <div className=\"text-lg font-bold\">{challenge.challenge.maxMoves || '∞'}</div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-300\">Max Moves</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <Trophy className=\"h-6 w-6 text-purple-500 mx-auto mb-2\" />\n              <div className=\"text-lg font-bold\">{challenge.category}</div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-300\">Category</div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Learning Objectives */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2 }}\n        >\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Zap className=\"h-5 w-5\" />\n                Learning Objectives\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"space-y-2\">\n                {challenge.learningObjectives.map((objective, index) => (\n                  <li key={index} className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"h-4 w-4 text-green-500 flex-shrink-0\" />\n                    <span className=\"text-sm\">{objective}</span>\n                  </li>\n                ))}\n              </ul>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Challenge Instructions */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.3 }}\n        >\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle>Challenge Instructions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-gray-700 dark:text-gray-300 mb-4\">\n                {challenge.challenge.instructions}\n              </p>\n              {challenge.challenge.hints && challenge.challenge.hints.length > 0 && (\n                <div className=\"flex items-center gap-4\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={showNextHint}\n                    disabled={currentHintIndex >= challenge.challenge.hints.length - 1}\n                    data-testid=\"button-hint\"\n                  >\n                    💡 Show Hint ({currentHintIndex + 1}/{challenge.challenge.hints.length})\n                  </Button>\n                  <span className=\"text-sm text-gray-500\">\n                    Hints help you learn, but try solving it first!\n                  </span>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Interactive Challenge Component */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4 }}\n        >\n          {challenge.challenge.type === 'gate-builder' && (\n            <EnhancedGateSimulator\n              challenge={{\n                id: challenge.id,\n                title: challenge.title,\n                description: challenge.challenge.instructions,\n                targetState: challenge.challenge.targetState || \"|ψ⟩\",\n                initialGates: challenge.challenge.initialGates,\n                solution: challenge.challenge.solution,\n                maxMoves: challenge.challenge.maxMoves,\n                educationalTips: challenge.learningObjectives\n              }}\n              onComplete={handleChallengeComplete}\n            />\n          )}\n          \n          {(challenge.challenge.type === 'research-project' || challenge.challenge.type === 'algorithm-implementation') && (\n            <QuantumJobIntegration\n              levelId={challenge.id}\n              circuitData={{\n                gates: challenge.challenge.solution.map(sol => ({\n                  type: sol.gateId,\n                  qubit: sol.qubit,\n                  position: sol.position\n                })),\n                qubits: 2\n              }}\n              expectedResult={challenge.challenge.targetState || \"Bell state\"}\n              onJobComplete={(success, result) => {\n                if (success) {\n                  toast({\n                    title: \"🎉 Quantum Execution Complete!\",\n                    description: `Successfully executed ${challenge.title} on quantum hardware!`,\n                  });\n                }\n                handleChallengeComplete(success);\n              }}\n            />\n          )}\n        </motion.div>\n      </div>\n    </div>\n  );\n}","size_bytes":35614},"client/src/components/quantum/quantum-job-integration.tsx":{"content":"import { useState } from \"react\";\nimport * as React from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { motion } from \"framer-motion\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Rocket,\n  Loader2,\n  CheckCircle,\n  AlertCircle,\n  Clock,\n  Database,\n  Activity\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Job submission integration for Quantum Quest challenges\ninterface QuantumJobRequest {\n  levelId: string;\n  circuitCode: string;\n  backend: string;\n  shots: number;\n  metadata: {\n    challengeType: string;\n    expectedResult: string;\n    learningObjective: string;\n  };\n}\n\ninterface QuantumJobResponse {\n  jobId: string;\n  status: 'queued' | 'running' | 'completed' | 'failed' | 'done';\n  id: string;\n  results?: {\n    counts: Record<string, number>;\n  };\n  duration?: number;\n  error?: string;\n}\n\ninterface QuantumJobResult {\n  jobId: string;\n  status: 'queued' | 'running' | 'completed' | 'failed';\n  result?: any;\n  executionTime?: number;\n  accuracy?: number;\n}\n\ninterface CircuitGate {\n  type: string;\n  qubit: number;\n  control?: number;\n  target?: number;\n}\n\ninterface CircuitData {\n  gates: CircuitGate[];\n  qubits: number;\n}\n\ninterface JobIntegrationProps {\n  levelId: string;\n  circuitData?: CircuitData;\n  expectedResult: string;\n  onJobComplete: (success: boolean, jobResult: QuantumJobResult) => void;\n}\n\nexport function QuantumJobIntegration({ levelId, circuitData, expectedResult, onJobComplete }: JobIntegrationProps) {\n  const [currentJobId, setCurrentJobId] = useState<string | null>(null);\n  const [showResults, setShowResults] = useState(false);\n  const { toast } = useToast();\n\n  // Submit quantum job mutation\n  const submitJobMutation = useMutation({\n    mutationFn: async (jobRequest: QuantumJobRequest): Promise<QuantumJobResponse> => {\n      try {\n        const response = await fetch('/api/quantum/submit-job', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            ...jobRequest,\n            backend: jobRequest.backend,\n            priority: 'normal'\n          })\n        });\n        \n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const data = await response.json();\n        return data as QuantumJobResponse;\n      } catch (error) {\n        console.error('Job submission error:', error);\n        throw error;\n      }\n    },\n    onSuccess: (data) => {\n      const jobId = data.jobId || data.id;\n      setCurrentJobId(jobId);\n      toast({\n        title: \"🚀 Quantum Job Submitted!\",\n        description: `Job ${jobId} submitted successfully!`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"❌ Job Submission Failed\",\n        description: \"Failed to submit quantum job. Try again later.\",\n        variant: \"destructive\"\n      });\n      console.error('Job submission error:', error);\n    }\n  });\n\n  // Query job status with polling\n  const { data: currentJob, isLoading: isJobLoading } = useQuery({\n    queryKey: ['quantum-job', currentJobId],\n    queryFn: async (): Promise<QuantumJobResponse | null> => {\n      if (!currentJobId) return null;\n      try {\n        const response = await fetch(`/api/quantum/jobs/${currentJobId}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        return data as QuantumJobResponse;\n      } catch (error) {\n        console.error('Job fetch error:', error);\n        return null;\n      }\n    },\n    enabled: !!currentJobId,\n    refetchInterval: (query) => {\n      // Poll every 2 seconds if job is queued or running\n      const jobData = query.state.data as QuantumJobResponse | null;\n      if (jobData && (jobData.status === 'queued' || jobData.status === 'running')) {\n        return 2000;\n      }\n      return false;\n    },\n  });\n\n  // Mock IBM Quantum backends for demonstration\n  const availableBackends = [\n    { id: \"ibm_qasm_simulator\", name: \"QASM Simulator\", type: \"simulator\", qubits: 32 },\n    { id: \"ibm_cairo\", name: \"IBM Cairo\", type: \"real\", qubits: 27 },\n    { id: \"ibm_brisbane\", name: \"IBM Brisbane\", type: \"real\", qubits: 127 },\n    { id: \"ibm_kyoto\", name: \"IBM Kyoto\", type: \"real\", qubits: 127 }\n  ];\n\n  const [selectedBackend, setSelectedBackend] = useState(availableBackends[0]);\n\n  // Generate circuit code based on challenge data\n  const generateCircuitCode = () => {\n    // This would generate Qiskit code based on the gate simulator data\n    let circuitCode = `# Quantum Quest Challenge: ${levelId}\\n`;\n    circuitCode += `from qiskit import QuantumCircuit, transpile, execute\\n`;\n    circuitCode += `from qiskit.visualization import plot_histogram\\n\\n`;\n    circuitCode += `# Create quantum circuit\\n`;\n    circuitCode += `qc = QuantumCircuit(2, 2)\\n\\n`;\n    \n    // Add gates based on circuit data\n    if (circuitData && circuitData.gates) {\n      circuitData.gates.forEach((gate: any) => {\n        switch (gate.type) {\n          case 'hadamard':\n            circuitCode += `qc.h(${gate.qubit})\\n`;\n            break;\n          case 'pauli-x':\n            circuitCode += `qc.x(${gate.qubit})\\n`;\n            break;\n          case 'cnot':\n            circuitCode += `qc.cx(${gate.control}, ${gate.target})\\n`;\n            break;\n        }\n      });\n    } else {\n      // Default Bell state circuit for demonstration\n      circuitCode += `# Bell state preparation\\n`;\n      circuitCode += `qc.h(0)  # Hadamard on qubit 0\\n`;\n      circuitCode += `qc.cx(0, 1)  # CNOT with qubit 0 as control\\n`;\n    }\n    \n    circuitCode += `\\n# Add measurements\\n`;\n    circuitCode += `qc.measure_all()\\n\\n`;\n    circuitCode += `# Display circuit\\n`;\n    circuitCode += `print(qc)\\n`;\n    \n    return circuitCode;\n  };\n\n  const submitQuantumJob = () => {\n    const jobRequest: QuantumJobRequest = {\n      levelId,\n      circuitCode: generateCircuitCode(),\n      backend: selectedBackend.id,\n      shots: 1024,\n      metadata: {\n        challengeType: \"gate-simulator\",\n        expectedResult: expectedResult,\n        learningObjective: `Learning challenge for level ${levelId}`\n      }\n    };\n    \n    submitJobMutation.mutate(jobRequest);\n  };\n\n  // Handle job status changes\n  React.useEffect(() => {\n    if (currentJob) {\n      if (currentJob.status === 'running') {\n        toast({\n          title: \"⚡ Job Running\",\n          description: `Your circuit is executing on ${selectedBackend.name}`,\n        });\n      } else if (currentJob.status === 'done' || currentJob.status === 'completed') {\n        setShowResults(true);\n        \n        // Calculate accuracy based on results\n        const accuracy = calculateAccuracy(currentJob.results, expectedResult);\n        const success = accuracy > 0.85;\n        \n        toast({\n          title: success ? \"🎉 Job Completed Successfully!\" : \"⚠️ Job Completed with Issues\",\n          description: success \n            ? `Great results! Accuracy: ${(accuracy * 100).toFixed(1)}%`\n            : `Results need improvement. Accuracy: ${(accuracy * 100).toFixed(1)}%`,\n          variant: success ? \"default\" : \"destructive\"\n        });\n        \n        onJobComplete(success, {\n          jobId: currentJob.id,\n          status: currentJob.status === 'done' ? 'completed' : currentJob.status,\n          result: currentJob.results,\n          executionTime: currentJob.duration || undefined,\n          accuracy\n        });\n      } else if (currentJob.status === 'failed') {\n        toast({\n          title: \"❌ Job Failed\",\n          description: currentJob.error || \"The quantum job failed to execute\",\n          variant: \"destructive\"\n        });\n        \n        onJobComplete(false, {\n          jobId: currentJob.id,\n          status: currentJob.status,\n          result: null\n        });\n      }\n    }\n  }, [currentJob?.status]);\n\n  // Calculate accuracy by comparing results with expected outcome\n  const calculateAccuracy = (results: any, expected: string): number => {\n    if (!results || !results.counts) return 0;\n    \n    // For Bell state, we expect roughly equal distribution of |00⟩ and |11⟩\n    if (expected.includes('Bell') || (expected.includes('00') && expected.includes('11'))) {\n      const counts = results.counts;\n      const total = Object.values(counts).reduce((sum: number, count: unknown) => sum + (count as number), 0);\n      const ratio00 = (counts['00'] || 0) / total;\n      const ratio11 = (counts['11'] || 0) / total;\n      \n      // Perfect Bell state would be 0.5, 0.5\n      const deviation = Math.abs(ratio00 - 0.5) + Math.abs(ratio11 - 0.5);\n      return Math.max(0, 1 - deviation * 2); // Convert deviation to accuracy\n    }\n    \n    // Default accuracy calculation\n    return Math.random() * 0.2 + 0.8; // 80-100% for demo\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'queued': return 'text-yellow-600 bg-yellow-100 dark:bg-yellow-900/20';\n      case 'running': return 'text-blue-600 bg-blue-100 dark:bg-blue-900/20';\n      case 'done':\n      case 'completed': return 'text-green-600 bg-green-100 dark:bg-green-900/20';\n      case 'failed': return 'text-red-600 bg-red-100 dark:bg-red-900/20';\n      default: return 'text-gray-600 bg-gray-100 dark:bg-gray-900/20';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'queued': return <Clock className=\"h-4 w-4\" />;\n      case 'running': return <Loader2 className=\"h-4 w-4 animate-spin\" />;\n      case 'done':\n      case 'completed': return <CheckCircle className=\"h-4 w-4\" />;\n      case 'failed': return <AlertCircle className=\"h-4 w-4\" />;\n      default: return <Activity className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Backend Selection */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Database className=\"h-5 w-5\" />\n            Select Quantum Backend\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 gap-3\">\n            {availableBackends.map((backend) => (\n              <motion.div\n                key={backend.id}\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n                className={`p-4 border-2 rounded-lg cursor-pointer transition-all ${\n                  selectedBackend.id === backend.id \n                    ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20' \n                    : 'border-gray-200 hover:border-gray-300'\n                }`}\n                onClick={() => setSelectedBackend(backend)}\n                data-testid={`backend-${backend.id}`}\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h4 className=\"font-medium\">{backend.name}</h4>\n                  <Badge variant={backend.type === 'real' ? 'default' : 'secondary'}>\n                    {backend.type}\n                  </Badge>\n                </div>\n                <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                  {backend.qubits} qubits\n                </p>\n              </motion.div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Job Submission */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Rocket className=\"h-5 w-5\" />\n            Run on IBM Quantum\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"bg-gray-50 dark:bg-gray-800 p-4 rounded-lg\">\n            <h5 className=\"font-medium mb-2\">Generated Circuit Code:</h5>\n            <pre className=\"text-xs bg-black text-green-400 p-3 rounded overflow-x-auto\">\n              {generateCircuitCode()}\n            </pre>\n          </div>\n          \n          <div className=\"flex gap-3\">\n            <Button\n              onClick={submitQuantumJob}\n              disabled={submitJobMutation.isPending || Boolean(currentJob && !['done', 'completed', 'failed'].includes(currentJob.status))}\n              className=\"flex-1 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700\"\n              data-testid=\"button-submit-quantum-job\"\n            >\n              {submitJobMutation.isPending ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Submitting...\n                </>\n              ) : (\n                <>\n                  <Rocket className=\"h-4 w-4 mr-2\" />\n                  Submit to {selectedBackend.name}\n                </>\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Job Status */}\n      {currentJob && (\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n        >\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Activity className=\"h-5 w-5\" />\n                Job Status\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium\">Job ID: {currentJob.id}</p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                    Backend: {selectedBackend.name}\n                  </p>\n                </div>\n                <Badge className={`${getStatusColor(currentJob.status)} flex items-center gap-1`}>\n                  {getStatusIcon(currentJob.status)}\n                  {currentJob.status.toUpperCase()}\n                </Badge>\n              </div>\n\n              {(currentJob.status === 'done' || currentJob.status === 'completed') && currentJob.results && (\n                <motion.div\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  className=\"space-y-3\"\n                >\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"bg-green-50 dark:bg-green-900/20 p-3 rounded-lg\">\n                      <p className=\"text-sm font-medium text-green-800 dark:text-green-200\">\n                        Execution Time\n                      </p>\n                      <p className=\"text-lg font-bold text-green-900 dark:text-green-100\">\n                        {currentJob.duration ? `${currentJob.duration}s` : 'N/A'}\n                      </p>\n                    </div>\n                    <div className=\"bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg\">\n                      <p className=\"text-sm font-medium text-blue-800 dark:text-blue-200\">\n                        Accuracy\n                      </p>\n                      <p className=\"text-lg font-bold text-blue-900 dark:text-blue-100\">\n                        {(calculateAccuracy(currentJob.results, expectedResult) * 100).toFixed(1)}%\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"bg-gray-50 dark:bg-gray-800 p-4 rounded-lg\">\n                    <h6 className=\"font-medium mb-2\">Measurement Results:</h6>\n                    <div className=\"space-y-1\">\n                      {currentJob.results?.counts ? Object.entries(currentJob.results.counts).map(([state, count]) => (\n                        <div key={state} className=\"flex justify-between items-center\">\n                          <span className=\"font-mono\">|{state}⟩</span>\n                          <span>{String(count)} shots</span>\n                        </div>\n                      )) : (\n                        <p className=\"text-gray-500 text-sm\">No measurement results yet</p>\n                      )}\n                    </div>\n                  </div>\n                </motion.div>\n              )}\n            </CardContent>\n          </Card>\n        </motion.div>\n      )}\n    </div>\n  );\n}","size_bytes":16257},"client/src/components/quantum/quantum-particle-effects.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\n// Particle system for quantum effects\ninterface Particle {\n  id: string;\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  life: number;\n  maxLife: number;\n  color: string;\n  size: number;\n  type: 'quantum' | 'entanglement' | 'superposition' | 'measurement' | 'gate';\n}\n\ninterface QuantumParticleEffectsProps {\n  trigger?: string;\n  intensity?: 'low' | 'medium' | 'high' | 'ultra';\n  effectType?: 'success' | 'error' | 'quantum' | 'entanglement' | 'superposition' | 'measurement' | 'algorithm' | 'celebration';\n  width?: number;\n  height?: number;\n  className?: string;\n  algorithm?: string; // For algorithm-specific effects\n}\n\nexport function QuantumParticleEffects({ \n  trigger, \n  intensity = 'medium',\n  effectType = 'quantum',\n  width = 400,\n  height = 300,\n  className = \"\",\n  algorithm\n}: QuantumParticleEffectsProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const animationRef = useRef<number>();\n  const [particles, setParticles] = useState<Particle[]>([]);\n  const particlesRef = useRef<Particle[]>([]);\n\n  // Enhanced color schemes for quantum concepts\n  const colorSchemes = {\n    success: ['#22c55e', '#10b981', '#059669', '#047857'],\n    error: ['#ef4444', '#dc2626', '#b91c1c', '#991b1b'],\n    quantum: ['#8b5cf6', '#a78bfa', '#c4b5fd', '#ddd6fe'],\n    entanglement: ['#ec4899', '#f472b6', '#f9a8d4', '#fbcfe8'],\n    superposition: ['#06b6d4', '#0891b2', '#0e7490', '#155e75'],\n    measurement: ['#f59e0b', '#d97706', '#b45309', '#92400e'],\n    algorithm: ['#dc2626', '#b91c1c', '#991b1b', '#7f1d1d'],\n    celebration: ['#fbbf24', '#f59e0b', '#d97706', '#b45309']\n  };\n\n  const colors = colorSchemes[effectType];\n\n  // Create particles based on effect type\n  const createParticles = (count: number, centerX: number, centerY: number, type: string) => {\n    const newParticles: Particle[] = [];\n    \n    for (let i = 0; i < count; i++) {\n      const angle = (Math.PI * 2 * i) / count + Math.random() * 0.5;\n      const speed = Math.random() * 3 + 1;\n      const life = Math.random() * 60 + 30;\n      \n      newParticles.push({\n        id: `${type}-${Date.now()}-${i}`,\n        x: centerX + (Math.random() - 0.5) * 20,\n        y: centerY + (Math.random() - 0.5) * 20,\n        vx: Math.cos(angle) * speed,\n        vy: Math.sin(angle) * speed,\n        life: life,\n        maxLife: life,\n        color: colors[Math.floor(Math.random() * colors.length)],\n        size: Math.random() * 4 + 2,\n        type: type as any\n      });\n    }\n    \n    return newParticles;\n  };\n\n  // Enhanced quantum effect patterns\n  const createQuantumBurst = (centerX?: number, centerY?: number) => {\n    const x = centerX || width / 2;\n    const y = centerY || height / 2;\n    const intensityMap = { low: 15, medium: 30, high: 50, ultra: 80 };\n    const count = intensityMap[intensity] || 30;\n    \n    return createParticles(count, x, y, 'quantum');\n  };\n\n  const createAlgorithmEffect = () => {\n    const particles: Particle[] = [];\n    \n    if (algorithm === 'grovers') {\n      // Grover's algorithm: convergent search pattern\n      for (let i = 0; i < 20; i++) {\n        const angle = (Math.PI * 2 * i) / 20;\n        particles.push({\n          id: `grovers-${i}`,\n          x: width / 2 + Math.cos(angle) * 80,\n          y: height / 2 + Math.sin(angle) * 80,\n          vx: -Math.cos(angle) * 2,\n          vy: -Math.sin(angle) * 2,\n          life: 100,\n          maxLife: 100,\n          color: '#dc2626',\n          size: 4,\n          type: 'quantum'\n        });\n      }\n    } else if (algorithm === 'shors') {\n      // Shor's algorithm: factoring pattern\n      for (let i = 0; i < 30; i++) {\n        particles.push({\n          id: `shors-${i}`,\n          x: Math.random() * width,\n          y: Math.random() * height,\n          vx: (Math.random() - 0.5) * 4,\n          vy: (Math.random() - 0.5) * 4,\n          life: 120,\n          maxLife: 120,\n          color: '#7c3aed',\n          size: Math.random() * 3 + 2,\n          type: 'quantum'\n        });\n      }\n    }\n    \n    return particles;\n  };\n\n  const createCelebrationFireworks = () => {\n    const fireworks: Particle[] = [];\n    const fireworkCount = intensity === 'ultra' ? 6 : 3;\n    \n    for (let f = 0; f < fireworkCount; f++) {\n      const centerX = Math.random() * width;\n      const centerY = Math.random() * height * 0.6;\n      \n      for (let i = 0; i < 15; i++) {\n        const angle = (Math.PI * 2 * i) / 15;\n        const speed = Math.random() * 6 + 3;\n        \n        fireworks.push({\n          id: `firework-${f}-${i}`,\n          x: centerX,\n          y: centerY,\n          vx: Math.cos(angle) * speed,\n          vy: Math.sin(angle) * speed - 2, // Add upward bias\n          life: 60 + Math.random() * 40,\n          maxLife: 100,\n          color: colors[Math.floor(Math.random() * colors.length)],\n          size: Math.random() * 5 + 3,\n          type: 'quantum'\n        });\n      }\n    }\n    \n    return fireworks;\n  };\n\n  const createEntanglementEffect = () => {\n    const particles1 = createParticles(10, width * 0.3, height / 2, 'entanglement');\n    const particles2 = createParticles(10, width * 0.7, height / 2, 'entanglement');\n    return [...particles1, ...particles2];\n  };\n\n  const createSuperpositionWave = () => {\n    const waveParticles: Particle[] = [];\n    const waveCount = 20;\n    \n    for (let i = 0; i < waveCount; i++) {\n      const x = (width / waveCount) * i;\n      const baseY = height / 2;\n      const amplitude = 30;\n      const frequency = 0.02;\n      const y = baseY + Math.sin(x * frequency) * amplitude;\n      \n      waveParticles.push({\n        id: `wave-${Date.now()}-${i}`,\n        x,\n        y,\n        vx: 0.5,\n        vy: Math.sin(x * frequency * 2) * 0.5,\n        life: 120,\n        maxLife: 120,\n        color: colors[i % colors.length],\n        size: 3,\n        type: 'superposition'\n      });\n    }\n    \n    return waveParticles;\n  };\n\n  // Update particle physics\n  const updateParticles = (particleList: Particle[]): Particle[] => {\n    return particleList\n      .map(particle => {\n        // Update position\n        particle.x += particle.vx;\n        particle.y += particle.vy;\n        \n        // Apply quantum effects based on type\n        if (particle.type === 'quantum') {\n          // Add quantum uncertainty\n          particle.vx += (Math.random() - 0.5) * 0.1;\n          particle.vy += (Math.random() - 0.5) * 0.1;\n          \n          // Apply damping\n          particle.vx *= 0.99;\n          particle.vy *= 0.99;\n        } else if (particle.type === 'entanglement') {\n          // Entangled particles influence each other\n          particle.vx += Math.sin(Date.now() * 0.01) * 0.1;\n          particle.vy += Math.cos(Date.now() * 0.01) * 0.1;\n        } else if (particle.type === 'superposition') {\n          // Wave-like motion\n          particle.y += Math.sin(particle.x * 0.02 + Date.now() * 0.01) * 0.2;\n        }\n        \n        // Boundary conditions with quantum tunneling effect\n        if (particle.x < 0 || particle.x > width) {\n          if (Math.random() < 0.1) {\n            // Quantum tunneling - particle appears on other side\n            particle.x = particle.x < 0 ? width : 0;\n          } else {\n            particle.vx *= -0.8;\n          }\n        }\n        \n        if (particle.y < 0 || particle.y > height) {\n          particle.vy *= -0.8;\n        }\n        \n        // Decrease life\n        particle.life--;\n        \n        return particle;\n      })\n      .filter(particle => particle.life > 0);\n  };\n\n  // Render particles\n  const renderParticles = (ctx: CanvasRenderingContext2D, particleList: Particle[]) => {\n    ctx.clearRect(0, 0, width, height);\n    \n    particleList.forEach(particle => {\n      const alpha = particle.life / particle.maxLife;\n      const size = particle.size * alpha;\n      \n      // Create gradient for glow effect\n      const gradient = ctx.createRadialGradient(\n        particle.x, particle.y, 0,\n        particle.x, particle.y, size * 2\n      );\n      gradient.addColorStop(0, particle.color + Math.floor(alpha * 255).toString(16).padStart(2, '0'));\n      gradient.addColorStop(1, particle.color + '00');\n      \n      ctx.fillStyle = gradient;\n      ctx.beginPath();\n      ctx.arc(particle.x, particle.y, size, 0, Math.PI * 2);\n      ctx.fill();\n      \n      // Add quantum glow\n      ctx.shadowColor = particle.color;\n      ctx.shadowBlur = size * 2;\n      ctx.fillStyle = particle.color + Math.floor(alpha * 128).toString(16).padStart(2, '0');\n      ctx.beginPath();\n      ctx.arc(particle.x, particle.y, size * 0.5, 0, Math.PI * 2);\n      ctx.fill();\n      ctx.shadowBlur = 0;\n    });\n  };\n\n  // Animation loop\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    \n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    const animate = () => {\n      particlesRef.current = updateParticles(particlesRef.current);\n      renderParticles(ctx, particlesRef.current);\n      animationRef.current = requestAnimationFrame(animate);\n    };\n\n    animationRef.current = requestAnimationFrame(animate);\n\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [width, height]);\n\n  // Trigger effects\n  useEffect(() => {\n    if (trigger) {\n      let newParticles: Particle[] = [];\n      \n      switch (trigger) {\n        case 'quantum-burst':\n          newParticles = createQuantumBurst();\n          break;\n        case 'entanglement':\n          newParticles = createEntanglementEffect();\n          break;\n        case 'superposition':\n          newParticles = createSuperpositionWave();\n          break;\n        case 'gate-placement':\n          newParticles = createQuantumBurst(Math.random() * width, Math.random() * height);\n          break;\n        case 'measurement':\n          newParticles = createQuantumBurst(width / 2, height / 2);\n          break;\n        default:\n          newParticles = createQuantumBurst();\n      }\n      \n      particlesRef.current = [...particlesRef.current, ...newParticles];\n      setParticles(particlesRef.current);\n    }\n  }, [trigger]);\n\n  return (\n    <div className={`relative ${className}`}>\n      <canvas\n        ref={canvasRef}\n        width={width}\n        height={height}\n        className=\"absolute inset-0 pointer-events-none z-10\"\n        style={{ \n          background: 'transparent',\n          mixBlendMode: 'screen'\n        }}\n      />\n    </div>\n  );\n}\n\n// Quantum success celebration component\nexport function QuantumSuccessCelebration({ show, onComplete }: { \n  show: boolean; \n  onComplete?: () => void;\n}) {\n  return (\n    <AnimatePresence>\n      {show && (\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          className=\"fixed inset-0 pointer-events-none z-50 flex items-center justify-center\"\n          onAnimationComplete={() => {\n            setTimeout(() => onComplete?.(), 3000);\n          }}\n        >\n          {/* Central burst */}\n          <QuantumParticleEffects\n            trigger=\"quantum-burst\"\n            intensity=\"high\"\n            effectType=\"success\"\n            width={800}\n            height={600}\n            className=\"absolute inset-0\"\n          />\n          \n          {/* Quantum text effect */}\n          <motion.div\n            initial={{ scale: 0, rotate: -180 }}\n            animate={{ scale: 1, rotate: 0 }}\n            transition={{ duration: 0.8, type: \"spring\" }}\n            className=\"bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent text-6xl font-bold z-20\"\n          >\n            🎉 QUANTUM SUCCESS! 🎉\n          </motion.div>\n          \n          {/* Floating quantum symbols */}\n          {Array.from({ length: 20 }).map((_, i) => (\n            <motion.div\n              key={i}\n              initial={{ \n                x: Math.random() * window.innerWidth,\n                y: window.innerHeight + 50,\n                rotate: 0,\n                scale: 0\n              }}\n              animate={{ \n                y: -50,\n                rotate: 360,\n                scale: [0, 1, 0],\n                transition: {\n                  duration: 3,\n                  delay: Math.random() * 2,\n                  ease: \"easeOut\"\n                }\n              }}\n              className=\"absolute text-4xl\"\n            >\n              {['⚛️', '🔬', '⚡', '🌟', '💫'][Math.floor(Math.random() * 5)]}\n            </motion.div>\n          ))}\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n}\n\n// Quantum loading/thinking effect\nexport function QuantumThinkingEffect({ show }: { show: boolean }) {\n  return (\n    <AnimatePresence>\n      {show && (\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          className=\"relative w-full h-32 flex items-center justify-center\"\n        >\n          <QuantumParticleEffects\n            trigger=\"superposition\"\n            intensity=\"medium\"\n            effectType=\"quantum\"\n            width={300}\n            height={100}\n          />\n          \n          <motion.div\n            animate={{ \n              scale: [1, 1.1, 1],\n              opacity: [0.5, 1, 0.5]\n            }}\n            transition={{ \n              duration: 2,\n              repeat: Infinity,\n              ease: \"easeInOut\"\n            }}\n            className=\"absolute text-purple-600 font-medium\"\n          >\n            Quantum Computing...\n          </motion.div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n}","size_bytes":13644},"client/src/components/quantum/quantum-tutorial-system.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  BookOpen, \n  ChevronRight, \n  ChevronLeft, \n  Lightbulb,\n  Target,\n  Zap,\n  Brain,\n  CheckCircle,\n  Play,\n  Pause,\n  RotateCcw\n} from \"lucide-react\";\nimport { QuantumParticleEffects } from \"./quantum-particle-effects\";\n\ninterface TutorialStep {\n  id: string;\n  title: string;\n  content: string;\n  concept: string;\n  visualAid?: 'bloch-sphere' | 'circuit' | 'particles' | 'math';\n  interactiveElement?: React.ReactNode;\n  tips: string[];\n  nextButton: string;\n}\n\ninterface QuantumTutorialSystemProps {\n  levelId: string;\n  onComplete: () => void;\n  onSkip: () => void;\n}\n\nconst tutorialData: Record<string, TutorialStep[]> = {\n  'qb-101': [\n    {\n      id: 'qubit-intro',\n      title: 'Welcome to Quantum Computing! 🎉',\n      content: 'A qubit is the fundamental unit of quantum information. Unlike classical bits that are either 0 or 1, qubits can exist in a \"superposition\" of both states simultaneously!',\n      concept: 'Quantum Superposition',\n      visualAid: 'particles',\n      tips: [\n        'Think of a spinning coin - it\\'s neither heads nor tails until it lands',\n        'Qubits can process multiple possibilities at once',\n        'This gives quantum computers their incredible power'\n      ],\n      nextButton: 'Explore Superposition →'\n    },\n    {\n      id: 'superposition-demo',\n      title: 'Superposition in Action ⚡',\n      content: 'When we measure a qubit in superposition, it \"collapses\" to either |0⟩ or |1⟩. The probability of each outcome depends on the qubit\\'s quantum state.',\n      concept: 'Quantum Measurement',\n      visualAid: 'bloch-sphere',\n      tips: [\n        'The Bloch sphere shows all possible qubit states',\n        'North pole = |0⟩, South pole = |1⟩',\n        'Equator = superposition states'\n      ],\n      nextButton: 'Ready for Gates! →'\n    }\n  ],\n  'qg-201': [\n    {\n      id: 'hadamard-intro',\n      title: 'The Hadamard Gate - Your Quantum Swiss Army Knife! 🔧',\n      content: 'The Hadamard gate (H) is one of the most important quantum gates. It creates perfect superposition from any basis state and is the foundation of many quantum algorithms.',\n      concept: 'Quantum Gates',\n      visualAid: 'circuit',\n      tips: [\n        'H|0⟩ = (|0⟩ + |1⟩)/√2 - equal superposition',\n        'H|1⟩ = (|0⟩ - |1⟩)/√2 - superposition with phase',\n        'Applying H twice returns to original state'\n      ],\n      nextButton: 'Build Your Circuit →'\n    }\n  ],\n  'qa-401': [\n    {\n      id: 'grovers-intro',\n      title: 'Grover\\'s Quantum Search - Finding Needles in Haystacks! 🔍',\n      content: 'Grover\\'s algorithm can search unsorted databases quadratically faster than any classical algorithm. Instead of checking N items, it only needs ~√N steps!',\n      concept: 'Quantum Algorithms',\n      visualAid: 'particles',\n      tips: [\n        'Classical search: O(N) - check every item',\n        'Grover\\'s search: O(√N) - quadratic speedup',\n        'Works by amplifying the amplitude of correct answers'\n      ],\n      nextButton: 'Implement Grover\\'s →'\n    }\n  ]\n};\n\nconst conceptExplanations = {\n  'Quantum Superposition': {\n    description: 'The ability of quantum systems to exist in multiple states simultaneously until measured',\n    realWorldExample: 'Like Schrödinger\\'s cat being both alive and dead until observed',\n    applications: ['Quantum algorithms', 'Parallel computation', 'Quantum sensing']\n  },\n  'Quantum Measurement': {\n    description: 'The process that collapses a quantum superposition into a definite classical state',\n    realWorldExample: 'Like observing which way the spinning coin lands',\n    applications: ['Reading quantum computation results', 'Quantum error detection', 'Quantum communication']\n  },\n  'Quantum Gates': {\n    description: 'Operations that manipulate qubits, analogous to logic gates in classical computing',\n    realWorldExample: 'Like switches and transformers in an electrical circuit',\n    applications: ['Building quantum circuits', 'Implementing algorithms', 'Error correction']\n  },\n  'Quantum Algorithms': {\n    description: 'Step-by-step procedures that leverage quantum mechanics for computational advantages',\n    realWorldExample: 'Like having a GPS that can explore all routes simultaneously',\n    applications: ['Cryptography', 'Optimization', 'Machine learning', 'Drug discovery']\n  }\n};\n\nexport function QuantumTutorialSystem({ levelId, onComplete, onSkip }: QuantumTutorialSystemProps) {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [showConcept, setShowConcept] = useState(false);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const [progress, setProgress] = useState(0);\n\n  const steps = tutorialData[levelId] || [];\n  const currentStepData = steps[currentStep];\n\n  useEffect(() => {\n    if (steps.length > 0) {\n      setProgress(((currentStep + 1) / steps.length) * 100);\n    }\n  }, [currentStep, steps.length]);\n\n  const handleNext = async () => {\n    if (currentStep < steps.length - 1) {\n      setIsAnimating(true);\n      await new Promise(resolve => setTimeout(resolve, 300));\n      setCurrentStep(currentStep + 1);\n      setIsAnimating(false);\n    } else {\n      onComplete();\n    }\n  };\n\n  const handlePrevious = async () => {\n    if (currentStep > 0) {\n      setIsAnimating(true);\n      await new Promise(resolve => setTimeout(resolve, 300));\n      setCurrentStep(currentStep - 1);\n      setIsAnimating(false);\n    }\n  };\n\n  const toggleConcept = () => {\n    setShowConcept(!showConcept);\n  };\n\n  if (!currentStepData) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <p className=\"text-gray-500\">No tutorial available for this level.</p>\n        <Button onClick={onSkip} variant=\"outline\" className=\"ml-4\">\n          Skip to Challenge\n        </Button>\n      </div>\n    );\n  }\n\n  const conceptInfo = conceptExplanations[currentStepData.concept as keyof typeof conceptExplanations];\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 space-y-6\">\n      {/* Progress Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <BookOpen className=\"h-6 w-6 text-blue-600\" />\n          <div>\n            <h2 className=\"text-lg font-semibold\">Quantum Tutorial</h2>\n            <p className=\"text-sm text-gray-600\">Step {currentStep + 1} of {steps.length}</p>\n          </div>\n        </div>\n        <Button onClick={onSkip} variant=\"ghost\" size=\"sm\">\n          Skip Tutorial\n        </Button>\n      </div>\n\n      <Progress value={progress} className=\"h-2\" />\n\n      {/* Main Tutorial Content */}\n      <div className=\"grid md:grid-cols-3 gap-6\">\n        {/* Tutorial Step */}\n        <div className=\"md:col-span-2 space-y-4\">\n          <AnimatePresence mode=\"wait\">\n            <motion.div\n              key={currentStep}\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              exit={{ opacity: 0, x: -20 }}\n              transition={{ duration: 0.3 }}\n            >\n              <Card className=\"border-2 border-blue-200\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Zap className=\"h-5 w-5 text-blue-600\" />\n                    {currentStepData.title}\n                  </CardTitle>\n                  <Badge variant=\"secondary\" className=\"w-fit\">\n                    {currentStepData.concept}\n                  </Badge>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p className=\"text-gray-700 leading-relaxed\">\n                    {currentStepData.content}\n                  </p>\n\n                  {/* Visual Aid */}\n                  {currentStepData.visualAid === 'particles' && (\n                    <div className=\"bg-gradient-to-br from-blue-50 to-purple-50 rounded-lg p-4 h-40 relative overflow-hidden\">\n                      <QuantumParticleEffects\n                        effectType=\"quantum\"\n                        intensity=\"medium\"\n                        width={400}\n                        height={160}\n                        trigger={currentStep.toString()}\n                      />\n                    </div>\n                  )}\n\n                  {currentStepData.visualAid === 'bloch-sphere' && (\n                    <div className=\"bg-gradient-to-br from-purple-50 to-pink-50 rounded-lg p-4 h-40 flex items-center justify-center\">\n                      <div className=\"text-center\">\n                        <div className=\"w-32 h-32 mx-auto bg-gradient-to-br from-blue-400 to-purple-600 rounded-full flex items-center justify-center text-white font-bold text-lg shadow-lg\">\n                          Bloch<br />Sphere\n                        </div>\n                        <p className=\"text-xs text-gray-600 mt-2\">Interactive visualization coming soon!</p>\n                      </div>\n                    </div>\n                  )}\n\n                  {currentStepData.visualAid === 'circuit' && (\n                    <div className=\"bg-gray-50 rounded-lg p-4 h-40 flex items-center justify-center\">\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"w-12 h-8 bg-blue-500 rounded flex items-center justify-center text-white font-bold\">\n                          |0⟩\n                        </div>\n                        <div className=\"w-16 h-12 bg-purple-500 rounded flex items-center justify-center text-white font-bold\">\n                          H\n                        </div>\n                        <div className=\"w-16 h-8 bg-green-500 rounded flex items-center justify-center text-white text-sm\">\n                          Measure\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Interactive Element */}\n                  {currentStepData.interactiveElement}\n                </CardContent>\n              </Card>\n            </motion.div>\n          </AnimatePresence>\n\n          {/* Tips Section */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-sm\">\n                <Lightbulb className=\"h-4 w-4 text-yellow-500\" />\n                Key Insights\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"space-y-2\">\n                {currentStepData.tips.map((tip, index) => (\n                  <li key={index} className=\"flex items-start gap-2 text-sm\">\n                    <CheckCircle className=\"h-4 w-4 text-green-500 mt-0.5 flex-shrink-0\" />\n                    <span>{tip}</span>\n                  </li>\n                ))}\n              </ul>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Concept Sidebar */}\n        <div className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-sm\">\n                <Brain className=\"h-4 w-4 text-purple-600\" />\n                Quantum Concept\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div>\n                <h4 className=\"font-semibold text-purple-700\">{currentStepData.concept}</h4>\n                <p className=\"text-sm text-gray-600 mt-1\">{conceptInfo?.description}</p>\n              </div>\n\n              <Button\n                onClick={toggleConcept}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"w-full\"\n                data-testid=\"button-toggle-concept\"\n              >\n                {showConcept ? 'Hide Details' : 'Learn More'}\n              </Button>\n\n              <AnimatePresence>\n                {showConcept && conceptInfo && (\n                  <motion.div\n                    initial={{ opacity: 0, height: 0 }}\n                    animate={{ opacity: 1, height: 'auto' }}\n                    exit={{ opacity: 0, height: 0 }}\n                    className=\"space-y-3\"\n                  >\n                    <div>\n                      <h5 className=\"text-sm font-semibold\">Real-World Example:</h5>\n                      <p className=\"text-xs text-gray-600\">{conceptInfo.realWorldExample}</p>\n                    </div>\n                    \n                    <div>\n                      <h5 className=\"text-sm font-semibold\">Applications:</h5>\n                      <ul className=\"text-xs text-gray-600\">\n                        {conceptInfo.applications.map((app: string, index: number) => (\n                          <li key={index} className=\"flex items-center gap-1\">\n                            <Target className=\"h-3 w-3\" />\n                            {app}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <div className=\"flex justify-between items-center\">\n        <Button\n          onClick={handlePrevious}\n          disabled={currentStep === 0 || isAnimating}\n          variant=\"outline\"\n          data-testid=\"button-tutorial-previous\"\n        >\n          <ChevronLeft className=\"h-4 w-4 mr-1\" />\n          Previous\n        </Button>\n\n        <div className=\"flex items-center gap-2\">\n          {steps.map((_, index) => (\n            <div\n              key={index}\n              className={`w-2 h-2 rounded-full transition-colors ${\n                index === currentStep ? 'bg-blue-600' : \n                index < currentStep ? 'bg-green-500' : 'bg-gray-300'\n              }`}\n            />\n          ))}\n        </div>\n\n        <Button\n          onClick={handleNext}\n          disabled={isAnimating}\n          className=\"bg-gradient-to-r from-blue-600 to-purple-600\"\n          data-testid=\"button-tutorial-next\"\n        >\n          {currentStepData.nextButton}\n          <ChevronRight className=\"h-4 w-4 ml-1\" />\n        </Button>\n      </div>\n    </div>\n  );\n}\n\n// Quantum Hint System for ongoing help\ninterface QuantumHintProps {\n  hint: string;\n  visible: boolean;\n  onDismiss: () => void;\n}\n\nexport function QuantumHint({ hint, visible, onDismiss }: QuantumHintProps) {\n  if (!visible) return null;\n\n  return (\n    <AnimatePresence>\n      <motion.div\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        exit={{ opacity: 0, y: -20 }}\n        className=\"fixed top-4 right-4 z-50\"\n      >\n        <Card className=\"max-w-sm border-2 border-yellow-200 bg-yellow-50\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-start gap-3\">\n              <Lightbulb className=\"h-5 w-5 text-yellow-600 mt-0.5 flex-shrink-0\" />\n              <div className=\"flex-1\">\n                <p className=\"text-sm text-gray-700\">{hint}</p>\n                <Button\n                  onClick={onDismiss}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"mt-2 h-6 px-2 text-xs\"\n                  data-testid=\"button-dismiss-hint\"\n                >\n                  Got it!\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </AnimatePresence>\n  );\n}","size_bytes":15667},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/theme-provider.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { ThemeProviderContext } from \"@/hooks/use-theme\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"light\",\n  storageKey = \"ui-theme\",\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    if (typeof window !== \"undefined\") {\n      const stored = localStorage.getItem(storageKey) as Theme;\n      return stored || defaultTheme;\n    }\n    return defaultTheme;\n  });\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n    toggleTheme: () => {\n      const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n      localStorage.setItem(storageKey, newTheme);\n      setTheme(newTheme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n","size_bytes":1196},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"system-architecture-diagram.md":{"content":"# Quantum Job Management Dashboard - System Architecture\n\n```\n┌─────────────────────────────────────────────────────────────────────────────────────┐\n│                                   CLIENT LAYER                                      │\n├─────────────────────────────────────────────────────────────────────────────────────┤\n│                                                                                     │\n│  ┌─────────────────┐  ┌─────────────────┐  ┌─────────────────┐  ┌─────────────────┐ │\n│  │   Landing Page  │  │  Authentication │  │    Dashboard    │  │  Quantum Quest  │ │\n│  │                 │  │                 │  │                 │  │                 │ │\n│  │ • Hero Section  │  │ • Login/Signup  │  │ • Job Mgmt      │  │ • Tutorials     │ │\n│  │ • Features      │  │ • Protected     │  │ • Analytics     │  │ • Challenges    │ │\n│  │ • Call to Action│  │   Routes        │  │ • Real-time     │  │ • Simulations   │ │\n│  └─────────────────┘  └─────────────────┘  └─────────────────┘  └─────────────────┘ │\n│                                                                                     │\n│  ┌─────────────────────────────────────────────────────────────────────────────────┐│\n│  │                          REACT FRONTEND ARCHITECTURE                            ││\n│  │                                                                                 ││\n│  │  ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ ┌───────────┐ │ │\n│  │  │   Routing   │ │ State Mgmt  │ │ UI Library  │ │  Real-time  │ │  Theme    │ │ │\n│  │  │             │ │             │ │             │ │             │ │           │ │ │\n│  │  │ • Wouter    │ │ • TanStack  │ │ • shadcn/ui │ │ • WebSocket │ │ • Next    │ │ │\n│  │  │ • Protected │ │   Query     │ │ • Tailwind  │ │ • Live      │ │   Themes  │ │ │\n│  │  │   Routes    │ │ • Cache     │ │ • Framer    │ │   Updates   │ │ • Dark    │ │ │\n│  │  │             │ │   Mgmt      │ │   Motion    │ │             │ │   Mode    │ │ │\n│  │  └─────────────┘ └─────────────┘ └─────────────┘ └─────────────┘ └───────────┘ │ │\n│  └─────────────────────────────────────────────────────────────────────────────────┘ │\n│                                                                                      │\n│  ┌─────────────────────────────────────────────────────────────────────────────────┐ │\n│  │                              FEATURE COMPONENTS                                 │ │\n│  │                                                                                 │ │\n│  │  Dashboard Components:     │  Quantum Components:    │  AI Components:         │ │\n│  │  • Analytics Charts       │  • Gate Simulator       │  • AI Assistant          │ │\n│  │  • Jobs Table            │  • Bloch Sphere         │  • Job Assistant          │ │\n│  │  • Live Activity Feed    │  • Tutorial System      │  • Failure Analysis       │ │\n│  │  • Stats Cards           │  • Level Challenges     │  • Collaboration          │ │\n│  │  • System Status         │  • Particle Effects     │                           │ │\n│  │  • Timeline View         │  • Advanced Challenges  │                           │ │\n│  │  • Export Options        │                         │                           │ │\n│  └─────────────────────────────────────────────────────────────────────────────────┘ │\n└─────────────────────────────────────────────────────────────────────────────────────┘\n\n                                        ↕ HTTP/WebSocket\n                                        \n┌─────────────────────────────────────────────────────────────────────────────────────┐\n│                                  SERVER LAYER                                          │\n├─────────────────────────────────────────────────────────────────────────────────────┤\n│                                                                                         │\n│  ┌─────────────────────────────────────────────────────────────────────────────────┐ │\n│  │                            EXPRESS.JS SERVER                                     │ │\n│  │                                                                                   │ │\n│  │  ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ ┌───────────┐ │ │\n│  │  │    Vite     │ │  Middleware │ │  API Routes │ │  WebSocket  │ │   Static  │ │ │\n│  │  │ Integration │ │             │ │             │ │   Server    │ │   Assets  │ │ │\n│  │  │             │ │ • Request   │ │ • /api/jobs │ │             │ │           │ │ │\n│  │  │ • Dev Mode  │ │   Logging   │ │ • /api/     │ │ • Real-time │ │ • Prod    │ │ │\n│  │  │ • HMR       │ │ • Error     │ │   sessions  │ │   Collab    │ │   Mode    │ │ │\n│  │  │ • SPA       │ │   Handling  │ │ • /api/     │ │ • Document  │ │           │ │ │\n│  │  │   Fallback  │ │ • CORS      │ │   analytics │ │   Sync      │ │           │ │ │\n│  │  └─────────────┘ └─────────────┘ └─────────────┘ └─────────────┘ └───────────┘ │ │\n│  └─────────────────────────────────────────────────────────────────────────────────┘ │\n└─────────────────────────────────────────────────────────────────────────────────────┘\n\n                                              ↕\n                                              \n┌─────────────────────────────────────────────────────────────────────────────────────┐\n│                                 SERVICES LAYER                                         │\n├─────────────────────────────────────────────────────────────────────────────────────┤\n│                                                                                         │\n│  ┌─────────────────┐ ┌─────────────────┐ ┌─────────────────┐ ┌─────────────────┐   │\n│  │ AI Collaboration│ │ Smart           │ │ Advanced        │ │ Gamification    │   │\n│  │ Service         │ │ Notification    │ │ Analytics       │ │ Service         │   │\n│  │                 │ │ Service         │ │ Service         │ │                 │   │\n│  │ • Team Insights │ │ • Contextual    │ │ • Performance   │ │ • Achievements  │   │\n│  │ • AI Suggestions│ │   Alerts        │ │   Metrics       │ │ • Challenges    │   │\n│  │ • Code Review   │ │ • Batch         │ │ • Quantum       │ │ • Leaderboards  │   │\n│  │ • Chat Bot      │ │   Processing    │ │   Statistics    │ │ • Progress      │   │\n│  └─────────────────┘ └─────────────────┘ └─────────────────┘ └─────────────────┘   │\n│                                                                                         │\n│  ┌─────────────────┐ ┌─────────────────┐ ┌─────────────────┐ ┌─────────────────┐   │\n│  │ Real-time       │ │ IBM Quantum     │ │ OpenAI Service  │ │ Job Simulator   │   │\n│  │ Collaboration   │ │ Service         │ │                 │ │ Service         │   │\n│  │                 │ │                 │ │ • GPT-4o Mini   │ │                 │   │\n│  │ • WebSocket     │ │ • Qiskit        │ │ • Circuit       │ │ • Mock Quantum  │   │\n│  │   Management    │ │   Runtime API   │ │   Analysis      │ │   Results       │   │\n│  │ • Document      │ │ • Job Queue     │ │ • Failure       │ │ • Realistic     │   │\n│  │   Synchronization│ │ • Backend List  │ │   Analysis      │ │   Delays        │   │\n│  │ • Live Chat     │ │ • Token Auth    │ │ • Suggestions   │ │ • Error Sim     │   │\n│  └─────────────────┘ └─────────────────┘ └─────────────────┘ └─────────────────┘   │\n└─────────────────────────────────────────────────────────────────────────────────────┘\n\n                                              ↕\n                                              \n┌─────────────────────────────────────────────────────────────────────────────────────┐\n│                                STORAGE LAYER                                           │\n├─────────────────────────────────────────────────────────────────────────────────────┤\n│                                                                                         │\n│  ┌─────────────────────────────────────────────────────────────────────────────────┐ │\n│  │                           IN-MEMORY STORAGE (IStorage)                           │ │\n│  │                                                                                   │ │\n│  │  ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ ┌───────────┐ │ │\n│  │  │    Jobs     │ │  Sessions   │ │ Workspaces  │ │ Analytics   │ │ Projects  │ │ │\n│  │  │    Map      │ │    Map      │ │     Map     │ │     Map     │ │    Map    │ │ │\n│  │  │             │ │             │ │             │ │             │ │           │ │ │\n│  │  │ • UUID Keys │ │ • UUID Keys │ │ • UUID Keys │ │ • Metrics   │ │ • Team    │ │ │\n│  │  │ • Job Data  │ │ • Quantum   │ │ • User      │ │ • Charts    │ │   Data    │ │ │\n│  │  │ • Status    │ │   Sessions  │ │   Workspaces│ │ • Reports   │ │           │ │ │\n│  │  │ • Results   │ │ • Backend   │ │             │ │             │ │           │ │ │\n│  │  └─────────────┘ └─────────────┘ └─────────────┘ └─────────────┘ └───────────┘ │ │\n│  │                                                                                   │ │\n│  │  ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐               │ │\n│  │  │ Notifications│ │Achievements │ │ Challenges  │ │    Users    │               │ │\n│  │  │     Map     │ │     Map     │ │     Map     │ │     Map     │               │ │\n│  │  │             │ │             │ │             │ │             │               │ │\n│  │  │ • Alerts    │ │ • Badges    │ │ • Quantum   │ │ • Auth Data │               │ │\n│  │  │ • Context   │ │ • Progress  │ │   Puzzles   │ │ • Profiles  │               │ │\n│  │  │ • Batching  │ │ • Points    │ │ • Levels    │ │             │               │ │\n│  │  └─────────────┘ └─────────────┘ └─────────────┘ └─────────────┘               │ │\n│  └─────────────────────────────────────────────────────────────────────────────────┘ │\n│                                                                                         │\n│  ┌─────────────────────────────────────────────────────────────────────────────────┐ │\n│  │                            DRIZZLE SCHEMA LAYER                                  │ │\n│  │                                                                                   │ │\n│  │           • Type-safe schema definitions (shared/schema.ts)                      │ │\n│  │           • Zod validation for API endpoints                                     │ │\n│  │           • PostgreSQL ready (currently in-memory)                              │ │\n│  │           • Insert/Select types for frontend/backend consistency                 │ │\n│  └─────────────────────────────────────────────────────────────────────────────────┘ │\n└─────────────────────────────────────────────────────────────────────────────────────┘\n\n                                              ↕\n                                              \n┌─────────────────────────────────────────────────────────────────────────────────────┐\n│                              EXTERNAL INTEGRATIONS                                     │\n├─────────────────────────────────────────────────────────────────────────────────────┤\n│                                                                                         │\n│  ┌─────────────────┐ ┌─────────────────┐ ┌─────────────────┐ ┌─────────────────┐   │\n│  │  IBM Quantum    │ │     OpenAI      │ │   WebSocket     │ │    Browser      │   │\n│  │  Platform       │ │    Platform     │ │   Connections   │ │   LocalStorage  │   │\n│  │                 │ │                 │ │                 │ │                 │   │\n│  │ • Qiskit        │ │ • GPT-4o Mini   │ │ • Real-time     │ │ • Auth Tokens   │   │\n│  │   Runtime API   │ │ • Chat          │ │   Collaboration │ │ • User Prefs    │   │\n│  │ • Job Queue     │ │   Completions   │ │ • Document      │ │ • Theme State   │   │\n│  │ • Backend List  │ │ • Circuit       │ │   Sync          │ │                 │   │\n│  │ • Token Auth    │ │   Analysis      │ │ • Live Chat     │ │                 │   │\n│  │ • Graceful      │ │ • Graceful      │ │                 │ │                 │   │\n│  │   Fallback      │ │   Fallback      │ │                 │ │                 │   │\n│  └─────────────────┘ └─────────────────┘ └─────────────────┘ └─────────────────┘   │\n└─────────────────────────────────────────────────────────────────────────────────────┘\n\n┌─────────────────────────────────────────────────────────────────────────────────────┐\n│                          BUILD & DEPLOYMENT PIPELINE                                   │\n├─────────────────────────────────────────────────────────────────────────────────────┤\n│                                                                                         │\n│  ┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐                   │\n│  │  Development    │    │      Build      │    │   Deployment    │                   │\n│  │                 │    │                 │    │                 │                   │\n│  │ • npm run dev   │───▶│ • vite build    │───▶│ • Replit        │                   │\n│  │ • tsx server    │    │ • esbuild       │    │   Autoscale     │                   │\n│  │ • Hot Reload    │    │   bundling      │    │ • Production    │                   │\n│  │ • Vite HMR      │    │ • Asset         │    │   Environment   │                   │\n│  │ • 0.0.0.0:5000  │    │   Optimization  │    │ • npm start     │                   │\n│  └─────────────────┘    └─────────────────┘    └─────────────────┘                   │\n└─────────────────────────────────────────────────────────────────────────────────────┘\n\n                               DATA FLOW DIAGRAM\n                                       \n  Frontend                    API Layer                    Services\n     │                           │                           │\n     ├─── GET /api/jobs ─────────┼──▶ Job Routes ──────────▶ IBM Quantum\n     │                           │                           │\n     ├─── POST /api/sessions ────┼──▶ Session Routes ──────▶ Storage Layer\n     │                           │                           │\n     ├─── WebSocket /ws ─────────┼──▶ Collaboration ───────▶ Real-time Service\n     │                           │      Service              │\n     ├─── GET /api/analytics ────┼──▶ Analytics Routes ────▶ Analytics Service\n     │                           │                           │\n     └─── AI Chat Requests ─────┼──▶ AI Routes ────────────▶ OpenAI Service\n                                 │\n                            Authentication\n                               Middleware\n```\n\n## Key Architecture Highlights:\n\n### 🎯 **Full-Stack TypeScript Application**\n- **Frontend**: React + Vite + TanStack Query + shadcn/ui\n- **Backend**: Express.js + TypeScript with comprehensive service layer\n- **Shared**: Type-safe schema definitions with Drizzle + Zod\n\n### 🚀 **Modern Development Stack**\n- **Build Tool**: Vite with hot module replacement and fast development\n- **Styling**: Tailwind CSS with dark mode support\n- **State Management**: TanStack Query for server state, React hooks for local state\n- **Real-time**: WebSocket integration for live collaboration\n\n### 🔧 **Service-Oriented Architecture**\n- **Modular Services**: AI Collaboration, Smart Notifications, Analytics, Gamification\n- **External Integrations**: IBM Quantum Platform, OpenAI API with graceful fallbacks\n- **Storage Abstraction**: In-memory storage with database-ready interface\n\n### 🛡️ **Production Ready**\n- **Development**: 0.0.0.0:5000 with proxy-friendly configuration\n- **Deployment**: Replit Autoscale with optimized build pipeline\n- **Security**: Environment-based API key management with fallbacks\n\n### 🎮 **Quantum Computing Features**\n- **Job Management**: Create, monitor, and analyze quantum computing jobs\n- **Interactive Learning**: Quantum tutorials, gate simulators, and challenges\n- **Real-time Collaboration**: Live document editing and team chat\n- **AI-Powered Assistance**: Circuit analysis and failure diagnostics","size_bytes":25688},"client/src/components/dashboard/news-panel.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Newspaper, X, Clock, TrendingUp, Users, Building, Globe, Star, Sparkles, Zap, Activity, Bell } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface NewsItem {\n  id: string;\n  title: string;\n  content: string;\n  category: 'company' | 'product' | 'achievement' | 'announcement';\n  timestamp: Date;\n  priority: 'high' | 'medium' | 'low';\n}\n\ninterface NewsPanelProps {\n  className?: string;\n}\n\n// Professional company news data - updates with real-time timestamps\nconst getCompanyNews = (): NewsItem[] => {\n  const baseTime = Date.now();\n  return [\n    {\n      id: \"news-1\",\n      title: \"Quantum Backend Performance Optimization Complete\",\n      content: \"Our engineering team has successfully completed performance optimization across all quantum backends, resulting in a 35% improvement in processing efficiency. IBM Cairo and IBM Brisbane systems showing enhanced stability and reduced queue times.\",\n      category: \"achievement\",\n      timestamp: new Date(baseTime - Math.random() * 30 * 60 * 1000), // 0-30 min ago\n      priority: \"high\"\n    },\n    {\n      id: \"news-2\", \n      title: \"Daily Processing Milestone: 10,000+ Quantum Jobs Executed\",\n      content: \"Today marks a significant milestone with over 10,000 quantum jobs successfully processed on our platform, achieving a 99.8% success rate. This represents record-breaking performance across all operational metrics.\",\n      category: \"achievement\",\n      timestamp: new Date(baseTime - Math.random() * 60 * 60 * 1000), // 0-1 hour ago\n      priority: \"high\"\n    },\n    {\n      id: \"news-3\",\n      title: \"Advanced Error Mitigation Algorithm Now Deployed\",\n      content: \"Our latest quantum error mitigation algorithm has been successfully deployed across all quantum systems. Initial performance data indicates a 42% reduction in computational errors and significantly improved fidelity rates.\",\n      category: \"product\", \n      timestamp: new Date(baseTime - Math.random() * 2 * 60 * 60 * 1000), // 0-2 hours ago\n      priority: \"high\"\n    },\n    {\n      id: \"news-4\",\n      title: \"Enhanced Analytics Dashboard Features Released\",\n      content: \"New dashboard capabilities are now available, including advanced job prediction algorithms, quantum circuit optimization recommendations, and comprehensive real-time monitoring tools for improved operational oversight.\",\n      category: \"product\",\n      timestamp: new Date(baseTime - Math.random() * 4 * 60 * 60 * 1000), // 0-4 hours ago\n      priority: \"medium\"\n    },\n    {\n      id: \"news-5\",\n      title: \"Company Receives Quantum Innovation Excellence Award 2024\",\n      content: \"We are proud to announce that our platform has been recognized with the prestigious Quantum Innovation Excellence Award 2024 for our contributions to advancing accessible quantum computing technology.\",\n      category: \"achievement\",\n      timestamp: new Date(baseTime - Math.random() * 8 * 60 * 60 * 1000), // 0-8 hours ago\n      priority: \"medium\"\n    },\n    {\n      id: \"news-6\",\n      title: \"Infrastructure Improvements Reduce Job Submission Time by 50%\",\n      content: \"Recent infrastructure enhancements have resulted in significantly faster job submission processing, with a 50% reduction in submission times and decreased queue wait periods across all quantum backend systems.\",\n      category: \"product\",\n      timestamp: new Date(baseTime - Math.random() * 12 * 60 * 60 * 1000), // 0-12 hours ago\n      priority: \"medium\"\n    }\n  ];\n};\n\nconst categoryIcons = {\n  company: Building,\n  product: Zap, \n  achievement: Star,\n  announcement: Globe\n};\n\nconst categoryColors = {\n  company: \"bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-200\",\n  product: \"bg-emerald-100 text-emerald-800 dark:bg-emerald-900/30 dark:text-emerald-200\",\n  achievement: \"bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-200\",\n  announcement: \"bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-200\"\n};\n\nconst priorityColors = {\n  high: \"border-l-red-600\",\n  medium: \"border-l-amber-600\", \n  low: \"border-l-slate-400\"\n};\n\nexport function NewsPanel({ className = \"\" }: NewsPanelProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [news, setNews] = useState<NewsItem[]>(getCompanyNews());\n  const scrollAreaRef = useRef<HTMLDivElement>(null);\n\n  // Live news updates every 30 seconds\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setNews(getCompanyNews());\n    }, 30000);\n    return () => clearInterval(interval);\n  }, []);\n\n  useEffect(() => {\n    if (isOpen && scrollAreaRef.current) {\n      scrollAreaRef.current.scrollTop = 0;\n    }\n  }, [isOpen]);\n\n  return (\n    <>\n      {/* Floating News Button */}\n      <motion.div\n        className={`fixed bottom-24 right-6 z-50 ${className}`}\n        whileHover={{ scale: 1.1 }}\n        whileTap={{ scale: 0.95 }}\n      >\n        <Button\n          onClick={() => setIsOpen(!isOpen)}\n          size=\"lg\"\n          className=\"h-12 w-12 rounded-lg bg-slate-700 hover:bg-slate-800 dark:bg-slate-600 dark:hover:bg-slate-700 text-white shadow-lg transition-all duration-200\"\n          data-testid=\"button-news-panel\"\n        >\n          <AnimatePresence mode=\"wait\">\n            {isOpen ? (\n              <motion.div\n                key=\"close\"\n                initial={{ rotate: -90, opacity: 0 }}\n                animate={{ rotate: 0, opacity: 1 }}\n                exit={{ rotate: 90, opacity: 0 }}\n                transition={{ duration: 0.2 }}\n              >\n                <X className=\"h-6 w-6 text-white\" />\n              </motion.div>\n            ) : (\n              <motion.div\n                key=\"news\"\n                initial={{ rotate: 90, opacity: 0 }}\n                animate={{ rotate: 0, opacity: 1 }}\n                exit={{ rotate: -90, opacity: 0 }}\n                transition={{ duration: 0.2 }}\n                className=\"relative\"\n              >\n                <Newspaper className=\"h-6 w-6 text-white\" />\n                <motion.div\n                  className=\"absolute -top-1 -right-1 h-3 w-3 bg-red-400 rounded-full\"\n                  animate={{ scale: [1, 1.2, 1] }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                />\n              </motion.div>\n            )}\n          </AnimatePresence>\n          \n          {/* Simple unread indicator */}\n          <motion.div\n            className=\"absolute -top-1 -right-1 h-3 w-3 bg-red-500 rounded-full\"\n            animate={{ scale: [1, 1.1, 1] }}\n            transition={{ duration: 2, repeat: Infinity }}\n          />\n        </Button>\n      </motion.div>\n\n      {/* News Sidebar */}\n      <AnimatePresence>\n        {isOpen && (\n          <>\n            {/* Backdrop */}\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              className=\"fixed inset-0 bg-black bg-opacity-20 z-40 md:hidden\"\n              onClick={() => setIsOpen(false)}\n            />\n\n            {/* Sidebar */}\n            <motion.div\n              initial={{ x: \"100%\", opacity: 0 }}\n              animate={{ x: 0, opacity: 1 }}\n              exit={{ x: \"100%\", opacity: 0 }}\n              transition={{ type: \"spring\", damping: 20, stiffness: 200 }}\n              className=\"fixed right-0 top-0 h-full w-full md:w-96 bg-white dark:bg-gray-900 shadow-2xl z-50 border-l border-gray-200 dark:border-gray-800\"\n            >\n              <Card className=\"h-full flex flex-col border-0 rounded-none bg-white dark:bg-gray-900\">\n                {/* Header */}\n                <div className=\"flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-800 bg-gray-50 dark:bg-gray-800\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"relative\">\n                      <div className=\"h-10 w-10 rounded-lg bg-slate-700 dark:bg-slate-600 flex items-center justify-center\">\n                        <Newspaper className=\"h-6 w-6 text-white\" />\n                      </div>\n                      <div className=\"absolute -bottom-1 -right-1 h-4 w-4 bg-blue-500 rounded-full border-2 border-white dark:border-gray-800\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900 dark:text-white text-lg\">\n                        Company News\n                      </h3>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">Latest updates and announcements</p>\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setIsOpen(false)}\n                    className=\"h-8 w-8 p-0 hover:bg-gray-100 dark:hover:bg-gray-800\"\n                    data-testid=\"button-close-news\"\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n\n                {/* News Feed */}\n                <ScrollArea className=\"flex-1 p-4\" ref={scrollAreaRef}>\n                  <div className=\"space-y-4\">\n                    {news.map((item) => {\n                      const CategoryIcon = categoryIcons[item.category];\n                      return (\n                        <motion.div\n                          key={item.id}\n                          initial={{ opacity: 0, y: 20 }}\n                          animate={{ opacity: 1, y: 0 }}\n                          transition={{ duration: 0.3 }}\n                          className={`bg-white dark:bg-gray-900 rounded-lg border-l-4 ${priorityColors[item.priority]} p-4 border border-gray-200 dark:border-gray-800 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors duration-200`}\n                          data-testid={`news-item-${item.id}`}\n                        >\n                          <div className=\"flex items-start justify-between mb-2\">\n                            <div className=\"flex items-center space-x-2\">\n                              <CategoryIcon className=\"h-4 w-4 text-gray-600 dark:text-gray-400\" />\n                              <Badge className={`text-xs ${categoryColors[item.category]}`}>\n                                {item.category}\n                              </Badge>\n                              {item.priority === 'high' && (\n                                <Badge variant=\"secondary\" className=\"text-xs bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-200\">\n                                  High Priority\n                                </Badge>\n                              )}\n                            </div>\n                            <div className=\"flex items-center text-xs text-gray-500 dark:text-gray-400\">\n                              <Clock className=\"h-3 w-3 mr-1\" />\n                              {formatDistanceToNow(item.timestamp, { addSuffix: true })}\n                            </div>\n                          </div>\n                          \n                          <h4 className=\"font-semibold text-gray-900 dark:text-white mb-2 text-base leading-tight\">\n                            {item.title}\n                          </h4>\n                          \n                          <p className=\"text-sm text-gray-600 dark:text-gray-300 leading-relaxed\">\n                            {item.content}\n                          </p>\n                        </motion.div>\n                      );\n                    })}\n                  </div>\n                </ScrollArea>\n\n                {/* Footer */}\n                <div className=\"border-t border-gray-200 dark:border-gray-800 p-4 bg-gray-50 dark:bg-gray-800\">\n                  <div className=\"flex items-center justify-center text-xs text-gray-500 dark:text-gray-400\">\n                    <Activity className=\"h-3 w-3 mr-2\" />\n                    Updates refresh every 30 seconds\n                  </div>\n                </div>\n              </Card>\n            </motion.div>\n          </>\n        )}\n      </AnimatePresence>\n    </>\n  );\n}","size_bytes":12362}},"version":1}